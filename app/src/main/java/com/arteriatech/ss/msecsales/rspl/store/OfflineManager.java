package com.arteriatech.ss.msecsales.rspl.store;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Environment;
import android.text.TextUtils;
import android.util.Log;

import com.arteriatech.mutils.common.OfflineError;
import com.arteriatech.mutils.common.OfflineODataStoreException;
import com.arteriatech.mutils.common.Operation;
import com.arteriatech.mutils.common.UIListener;
import com.arteriatech.mutils.common.UtilConstants;
import com.arteriatech.mutils.common.UtilOfflineManager;
import com.arteriatech.mutils.log.LogManager;
import com.arteriatech.mutils.store.CredentialsProvider;
import com.arteriatech.mutils.store.OnlineODataInterface;
import com.arteriatech.mutils.store.OnlineRequestListeners;
import com.arteriatech.ss.msecsales.rspl.BuildConfig;
import com.arteriatech.ss.msecsales.rspl.R;
import com.arteriatech.ss.msecsales.rspl.common.Constants;
import com.arteriatech.ss.msecsales.rspl.common.ConstantsUtils;
import com.arteriatech.ss.msecsales.rspl.common.MyUtils;
import com.arteriatech.ss.msecsales.rspl.complaintcreate.ComplaintCreateBeanUOMandDescription;
import com.arteriatech.ss.msecsales.rspl.complaintlist.ComplaintListModel;
import com.arteriatech.ss.msecsales.rspl.dbstock.stockmaterial.DBStockBean;
import com.arteriatech.ss.msecsales.rspl.dbstock.stockmaterial.DMSDivisionBean;
import com.arteriatech.ss.msecsales.rspl.expense.ExpenseBean;
import com.arteriatech.ss.msecsales.rspl.expense.ExpenseConfig;
import com.arteriatech.ss.msecsales.rspl.expenselist.ExpenseListBean;
import com.arteriatech.ss.msecsales.rspl.expenselist.expenselistdetails.DocumentBean;
import com.arteriatech.ss.msecsales.rspl.expenselist.expenselistdetails.ExpenseDetailsBean;
import com.arteriatech.ss.msecsales.rspl.home.dashboard.BrandProductiveBean;
import com.arteriatech.ss.msecsales.rspl.mbo.AppointmentBean;
import com.arteriatech.ss.msecsales.rspl.mbo.BaseUOMBean;
import com.arteriatech.ss.msecsales.rspl.mbo.BeatOpeningSummaryBean;
import com.arteriatech.ss.msecsales.rspl.mbo.BirthdaysBean;
import com.arteriatech.ss.msecsales.rspl.mbo.BrandBean;
import com.arteriatech.ss.msecsales.rspl.mbo.CPStockSNoBean;
import com.arteriatech.ss.msecsales.rspl.mbo.CollectionHistoryBean;
import com.arteriatech.ss.msecsales.rspl.mbo.CompetitorBean;
import com.arteriatech.ss.msecsales.rspl.mbo.Config;
import com.arteriatech.ss.msecsales.rspl.mbo.ConfigTypeValues;
import com.arteriatech.ss.msecsales.rspl.mbo.ConfigTypesetTypesBean;
import com.arteriatech.ss.msecsales.rspl.mbo.CustomerBean;
import com.arteriatech.ss.msecsales.rspl.mbo.CustomerPartnerFunctionBean;
import com.arteriatech.ss.msecsales.rspl.mbo.DmsDivQryBean;
import com.arteriatech.ss.msecsales.rspl.mbo.DocumentsBean;
import com.arteriatech.ss.msecsales.rspl.mbo.FeedbackBean;
import com.arteriatech.ss.msecsales.rspl.mbo.FreeMaterialBean;
import com.arteriatech.ss.msecsales.rspl.mbo.InvoiceBean;
import com.arteriatech.ss.msecsales.rspl.mbo.InvoiceHistoryBean;
import com.arteriatech.ss.msecsales.rspl.mbo.MTPHeaderBean;
import com.arteriatech.ss.msecsales.rspl.mbo.MTPRoutePlanBean;
import com.arteriatech.ss.msecsales.rspl.mbo.MaterialBatchBean;
import com.arteriatech.ss.msecsales.rspl.mbo.MerchandisingBean;
import com.arteriatech.ss.msecsales.rspl.mbo.MustSellBean;
import com.arteriatech.ss.msecsales.rspl.mbo.MyPerformanceBean;
import com.arteriatech.ss.msecsales.rspl.mbo.MyTargetsBean;
import com.arteriatech.ss.msecsales.rspl.mbo.OutstandingBean;
import com.arteriatech.ss.msecsales.rspl.mbo.PricingConditions;
import com.arteriatech.ss.msecsales.rspl.mbo.RemarkReasonBean;
import com.arteriatech.ss.msecsales.rspl.mbo.RetailerBean;
import com.arteriatech.ss.msecsales.rspl.mbo.RetailerStockBean;
import com.arteriatech.ss.msecsales.rspl.mbo.ReturnOrderBean;
import com.arteriatech.ss.msecsales.rspl.mbo.RoutePlanBean;
import com.arteriatech.ss.msecsales.rspl.mbo.SKUGroupBean;
import com.arteriatech.ss.msecsales.rspl.mbo.SKUGroupItemBean;
import com.arteriatech.ss.msecsales.rspl.mbo.SOConditionItemDetaiBean;
import com.arteriatech.ss.msecsales.rspl.mbo.SOCreateBean;
import com.arteriatech.ss.msecsales.rspl.mbo.SOItemBean;
import com.arteriatech.ss.msecsales.rspl.mbo.SOListBean;
import com.arteriatech.ss.msecsales.rspl.mbo.SalesOrderBean;
import com.arteriatech.ss.msecsales.rspl.mbo.SalesOrderConditionsBean;
import com.arteriatech.ss.msecsales.rspl.mbo.SalesPersonBean;
import com.arteriatech.ss.msecsales.rspl.mbo.SchemeBean;
import com.arteriatech.ss.msecsales.rspl.mbo.UserCustomersBean;
import com.arteriatech.ss.msecsales.rspl.mbo.ValueHelpBean;
import com.arteriatech.ss.msecsales.rspl.mbo.VisitSummaryBean;
import com.arteriatech.ss.msecsales.rspl.mbo.WeekDetailsList;
import com.arteriatech.ss.msecsales.rspl.registration.Configuration;
import com.arteriatech.ss.msecsales.rspl.reports.invoicelist.InvoiceListBean;
import com.arteriatech.ss.msecsales.rspl.reports.invoicelist.invoiceDetails.InvoiceItemBean;
import com.arteriatech.ss.msecsales.rspl.sampledisbursement.addsampledisbursement.CPTypeBean;
import com.arteriatech.ss.msecsales.rspl.scheme.CPDMSDivisionBean;
import com.arteriatech.ss.msecsales.rspl.scheme.GetSalesOrderListBasedOnScheme;
import com.arteriatech.ss.msecsales.rspl.scheme.SchemeIDBean;
import com.arteriatech.ss.msecsales.rspl.scheme.SchemeItemListBean;
import com.arteriatech.ss.msecsales.rspl.scheme.SchemeListBean;
import com.arteriatech.ss.msecsales.rspl.scheme.SchemeSalesAreaBean;
import com.arteriatech.ss.msecsales.rspl.scheme.SchemeSlabBean;
import com.arteriatech.ss.msecsales.rspl.so.SOUtils;
import com.arteriatech.ss.msecsales.rspl.sync.SyncUtils;
import com.arteriatech.ss.msecsales.rspl.visitsummaryreport.VisitSummaryReportPresentImpl;
import com.arteriatech.ss.msecsales.rspl.windowdisplay.windowdisplaycreate.ExpenseImageBean;
import com.sap.client.odata.v4.core.CharBuffer;
import com.sap.client.odata.v4.core.StringFunction;
import com.sap.smp.client.httpc.HttpConversationManager;
import com.sap.smp.client.httpc.IManagerConfigurator;
import com.sap.smp.client.httpc.authflows.CommonAuthFlowsConfigurator;
import com.sap.smp.client.odata.ODataDuration;
import com.sap.smp.client.odata.ODataEntity;
import com.sap.smp.client.odata.ODataEntitySet;
import com.sap.smp.client.odata.ODataGuid;
import com.sap.smp.client.odata.ODataNavigationProperty;
import com.sap.smp.client.odata.ODataPayload;
import com.sap.smp.client.odata.ODataPropMap;
import com.sap.smp.client.odata.ODataProperty;
import com.sap.smp.client.odata.exception.ODataContractViolationException;
import com.sap.smp.client.odata.exception.ODataException;
import com.sap.smp.client.odata.exception.ODataParserException;
import com.sap.smp.client.odata.impl.ODataEntityDefaultImpl;
import com.sap.smp.client.odata.impl.ODataErrorDefaultImpl;
import com.sap.smp.client.odata.impl.ODataGuidDefaultImpl;
import com.sap.smp.client.odata.impl.ODataPropertyDefaultImpl;
import com.sap.smp.client.odata.impl.ODataUploadMediaDefaultImpl;
import com.sap.smp.client.odata.offline.ODataOfflineStore;
import com.sap.smp.client.odata.offline.ODataOfflineStoreOptions;
import com.sap.smp.client.odata.offline.ODataOfflineStoreState;
import com.sap.smp.client.odata.store.ODataDownloadMediaResult;
import com.sap.smp.client.odata.store.ODataDownloadMediaSyncListener;
import com.sap.smp.client.odata.store.ODataRequestChangeSet;
import com.sap.smp.client.odata.store.ODataRequestExecution;
import com.sap.smp.client.odata.store.ODataRequestListener;
import com.sap.smp.client.odata.store.ODataRequestParamBatch;
import com.sap.smp.client.odata.store.ODataRequestParamSingle;
import com.sap.smp.client.odata.store.ODataResponseSingle;
import com.sap.smp.client.odata.store.ODataStore;
import com.sap.smp.client.odata.store.impl.ODataDownloadMediaResultDefaultImpl;
import com.sap.smp.client.odata.store.impl.ODataRequestChangeSetDefaultImpl;
import com.sap.smp.client.odata.store.impl.ODataRequestParamBatchDefaultImpl;
import com.sap.smp.client.odata.store.impl.ODataRequestParamSingleDefaultImpl;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.locks.ReentrantLock;

import static com.arteriatech.mutils.common.UtilConstants.removeLeadingZero;
import static com.arteriatech.mutils.common.UtilConstants.trimQtyDecimalPlace;

/**
 * Created by e10769 on 12-Apr-18.
 */

public class OfflineManager {
    public static final String TAG = OfflineManager.class.getSimpleName();
    public static ODataOfflineStore offlineStore;
    public static ODataOfflineStoreOptions options = null;
    static HashMap<String, String> hmMRPByItemIfQtyAval = new HashMap<>();
    static String SetResourcePath = "";

    public static boolean isOfflineStoreOpen() {
        boolean isOpen = false;
        if (offlineStore != null && ODataOfflineStoreState.ODataOfflineStoreOpen.name().equals(UtilOfflineManager.getStoreState())) {
            isOpen = true;
        }
        return isOpen;
    }

    /**
     * Initialize a new offline odata store
     *
     * @param context the application context
     * @return true if it's initialized, false otherwise
     * @throws OfflineODataStoreException
     */
    public static boolean openOfflineStore(Context context, UIListener uiListener) throws OfflineODataStoreException {
        if (!isOfflineStoreOpen()) {
            try {
                //This instantiate the native UDB libraries which are located in the

                ODataOfflineStore.globalInit();
                //Get application endpoint URL
                /*LogonCoreContext lgCtx = LogonCore.getInstance().getLogonContext();
                String endPointURL = lgCtx.getAppEndPointUrl();*/
                String endPointURL = MyUtils.getDefaultEndPointURL();
                URL url = new URL(endPointURL);
                // Define the offline store options.
                // Connection parameter and credentials and
                // the application connection id we got at the registration

                options = new ODataOfflineStoreOptions();
                options.storeEncryptionKey = Constants.EncryptKey;
                options.host = url.getHost();
                options.port = String.valueOf(url.getPort());
//                options.enableHTTPS = lgCtx.isHttps();
                options.enableHTTPS =Configuration.IS_HTTPS;
                options.enableRepeatableRequests = true;
                // the serviceRoot is the backend connector name, which is usually the same
                // as the application configuration name in the SMP Management Cockpit
                options.serviceRoot = Configuration.APP_ID;

                //for Relay enable next line
//				options.urlSuffix = lgCtx.getResourcePath()+"/"+lgCtx.getFarmId();

                //The logon configurator uses the information obtained in the registration
                // (i.e endpoint URL, login, etc ) to configure the conversation manager
                /*IManagerConfigurator configurator =
                        LogonUIFacade.getInstance().getLogonConfigurator(context);
                HttpConversationManager manager = new HttpConversationManager(context);
                configurator.configure(manager);*/
                CredentialsProvider credProvider = CredentialsProvider.getInstance(context);
                HttpConversationManager manager = new CommonAuthFlowsConfigurator(context).supportBasicAuthUsing(credProvider).configure(new HttpConversationManager(context));

                options.conversationManager = manager;
                options.storeName = Constants.STORE_NAME;

                options.customHeaders.put(Constants.arteria_dayfilter, Constants.NO_OF_DAYS);
//                options.customHeaders.put("Content-Type", "application/atom+xml");
                String[] DEFINGREQARRAY = Constants.getDefinigReq(context);
                for (int incReq = 0; incReq < DEFINGREQARRAY.length; incReq++) {
                    String collectionName = DEFINGREQARRAY[incReq];
                    if (collectionName.contains("?")) {
                        String splitCollName[] = collectionName.split("\\?");
                        collectionName = splitCollName[0];
                    }
                    if (collectionName.equalsIgnoreCase(Constants.MerchReviewImages) || collectionName.equalsIgnoreCase(Constants.Documents) || collectionName.equalsIgnoreCase(Constants.ComplaintDocuments) || collectionName.equalsIgnoreCase(Constants.SchemeCPDocuments) || collectionName.equalsIgnoreCase(Constants.ClaimDocuments) || collectionName.equalsIgnoreCase(Constants.ExpenseDocuments)) {
                        options.addDefiningRequest(collectionName, DEFINGREQARRAY[incReq], true);
                    } else {
                        options.addDefiningRequest(collectionName, DEFINGREQARRAY[incReq], false);
                    }
                }

                offlineStore = new ODataOfflineStore(context);
                OfflineStoreListner offlineStoreListner = new OfflineStoreListner(uiListener);
                offlineStore.setOfflineStoreListener(offlineStoreListner);
                //Assign an Offline
                offlineStore.setRequestErrorListener(new OfflineErrorListener());

                offlineStore.openStoreSync(options);
                return true;
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        } else {
            return true;
        }
        //END
    }

    /**
     * Get the conflict errors registered in the ErrorArchive
     *
     * @return List of Errors
     * @throws OfflineODataStoreException
     */
    public static List<OfflineError> getErrorArchive() throws OfflineODataStoreException {
        ArrayList<OfflineError> errorList = new ArrayList<>();
        if (offlineStore != null) {
            OfflineError offlineError;
            ODataProperty property;
            ODataPropMap properties = null;
            try {
                String resourcePath = Constants.ERROR_ARCHIVE_COLLECTION;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(resourcePath);
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.executeRequest(request);
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl) response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (int k = entities.size() - 1; k >= 0; k--) {
                        ODataEntity entity = entities.get(k);
                        properties = entity.getProperties();
                        property = properties.get(Constants.ERROR_ARCHIVE_ENTRY_MESSAGE);
                        String mStrGetMsg = (String) property.getValue();
                        String errorMsg = "";
                        try {
                            JSONObject jsonObject = new JSONObject(mStrGetMsg);
                            JSONObject errorJson = (JSONObject) jsonObject.get(Constants.error);
                            JSONObject errorMsgJson = (JSONObject) errorJson.get(Constants.message);
                            errorMsg = (String) errorMsgJson.get(Constants.value);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.ERROR_ARCHIVE_ENTRY_REQUEST_URL);
                        String requestURL = (String) property.getValue();
                        String repalceString = "";
                        if (requestURL != null && !requestURL.equalsIgnoreCase("")) {
                            if (requestURL.indexOf("/") != -1) {
                                repalceString = requestURL.replace("/", "");
                            } else {
                                repalceString = requestURL;
                            }
                        }
                        String errMsg = null;
                        try {
                            errMsg = errorMsg.equalsIgnoreCase("") ? mStrGetMsg : errorMsg;
                        } catch (Exception e) {
                            errMsg = "";
                            e.printStackTrace();
                        }
                        LogManager.writeLogError(repalceString + " : " + errMsg);

                        if (repalceString.contains("guid")) {
                            try {

                                String requiredString = "";
                                requiredString = repalceString.replace(repalceString.substring(repalceString.indexOf("("), repalceString.length()), "");
                                Constants.AL_ERROR_MSG.add(requiredString + " : " + errMsg);
                                Constants.Entity_Set.add(requiredString);
                            } catch (Exception e) {
                                Constants.Entity_Set.add(repalceString);
                                Constants.AL_ERROR_MSG.add(repalceString + " : " + errMsg);
                            }
                        } else {
                            Constants.AL_ERROR_MSG.add(repalceString + " : " + errMsg);
                        }

                        property = properties.get(Constants.ERROR_ARCHIVE_ENTRY_MESSAGE);
                        offlineError = new OfflineError((String) property.getValue());
                        offlineError.setEditResourcePath(entity.getEditResourcePath());
                        deleteErrorArchiveEntity(entity);
                        Log.d(Constants.error_txt1, Constants.error_archive_called_txt);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return errorList;
    }

    /**
     * Delete error archive on offline store
     *
     * @throws OfflineODataStoreException
     */
    public static void deleteErrorArchiveEntity(ODataEntity oDataEntity) throws OfflineODataStoreException {
        //BEGIN
        if (offlineStore == null) return;
        try {
            //Get Edit resource path
            ODataPropMap properties = null;
            properties = oDataEntity.getProperties();
            OfflineRequestListener offlineRequestListener = new OfflineRequestListener(
                    Operation.DeleteErrorArchive.getValue(), (String) properties.get(Constants.ERROR_ARCHIVE_ENTRY_REQUEST_METHOD).getValue());
            //Delete the selected error from the ErrorArchive
            offlineStore.executeDeleteEntity(oDataEntity,
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*
     * Closes existing or opened Offline store if it is not null
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     * */
    public static boolean closeOfflineStore() throws OfflineODataStoreException {
        if (isOfflineStoreOpen()) {
            try {
                UtilOfflineManager.setStoreState(ODataOfflineStoreState.ODataOfflineStoreClosed.name());
                OfflineManager.offlineStore.closeStore();
                return true;
            } catch (ODataException e) {
                LogManager.writeLogError(Constants.offline_store_not_closed + e.getMessage());
                throw new OfflineODataStoreException(e);
            }
        } else {
            return false;
        }
    }

    public static boolean closeOfflineStore(Context context, ODataOfflineStoreOptions options) throws OfflineODataStoreException {
        try {
            UtilOfflineManager.setStoreState(ODataOfflineStoreState.ODataOfflineStoreClosed.name());
            UtilOfflineManager.closeOfflineStore(context, options, OfflineManager.offlineStore, Constants.PREFS_NAME);
            return true;
        } catch (Exception e) {
            LogManager.writeLogError(Constants.offline_store_not_closed + e.getMessage());
            throw new OfflineODataStoreException(e);
        }
    }

    /*
     * refresh offline store data for collections passed as input parameter to this method
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     * */
    public static void refreshStoreSync(Context context, UIListener uiListener, String syncType, String defineReq) throws OfflineODataStoreException {

        if (offlineStore != null) {
            try {
                OfflineRefreshListener refreshListener = new OfflineRefreshListener(context, syncType, defineReq, uiListener);

                if (syncType.equals(Constants.Fresh)) {
                    offlineStore.scheduleRefresh(defineReq, refreshListener);
                } else {
                    offlineStore.scheduleRefresh(refreshListener);
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
    }

    /**
     * Returns value for selected column name from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getGuidValueByColumnName(String retailerQry, String columnName) throws OfflineODataStoreException {
        String mStrVal = "";
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retailerQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(columnName);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            mStrVal = mInvoiceGUID.guidAsString36().toUpperCase();
                            //To Remove
                            break;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrVal;
    }

    public static List<SalesPersonBean> getSalesPerson(String qry) throws OfflineODataStoreException {
        List<SalesPersonBean> salesPersonBeanList = new ArrayList<>();
        SalesPersonBean salesPersonBean = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        salesPersonBean = new SalesPersonBean();
                        properties = entity.getProperties();
                        salesPersonBean = getUserSalesPersonData(salesPersonBean, properties);
                        salesPersonBeanList.add(salesPersonBean);
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return salesPersonBeanList;
    }

    private static SalesPersonBean getUserSalesPersonData(SalesPersonBean salesPersonBean, ODataPropMap properties) {
        ODataProperty property = properties.get(Constants.SPNo);
        if (property != null) {
            salesPersonBean.setSPNo(property.getValue().toString());
        }

        property = properties.get(Constants.FirstName);
        if (property != null) {
            salesPersonBean.setFirstName(property.getValue().toString());
        }

        property = properties.get(Constants.LastName);
        if (property != null) {
            salesPersonBean.setLastName(property.getValue().toString());
        }
        property = properties.get(Constants.SalesPersonMobileNo);
        if (property != null) {
            salesPersonBean.setMobileNo(property.getValue().toString());
        }
        property = properties.get(Constants.SPGUID);
        try {
            ODataGuid spGUID = (ODataGuid) property.getValue();
            salesPersonBean.setSPGUID(spGUID.guidAsString36().toUpperCase());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return salesPersonBean;
    }

    private static SalesPersonBean getSalesPersonData(SalesPersonBean salesPersonBean, ODataPropMap properties) {
        ODataProperty property = properties.get(Constants.SPNo);
        if (property != null) {
            salesPersonBean.setSPNo(property.getValue().toString());
        }

        property = properties.get(Constants.FirstName);
        if (property != null) {
            salesPersonBean.setFirstName(property.getValue().toString());
        }

        property = properties.get(Constants.LastName);
        if (property != null) {
            salesPersonBean.setLastName(property.getValue().toString());
        }

        property = properties.get(Constants.SPCategoryID);
        if (property != null) {
            salesPersonBean.setSPCategoryID(property.getValue().toString());
        }

        property = properties.get(Constants.DesignationID);
        if (property != null) {
            salesPersonBean.setDesignationID(property.getValue().toString());
        }

        property = properties.get(Constants.DesignationDesc);
        if (property != null) {
            salesPersonBean.setDesignationDesc(property.getValue().toString());
        }

        property = properties.get(Constants.Address1);
        if (property != null) {
            salesPersonBean.setAddress1(property.getValue().toString());
        }

        property = properties.get(Constants.Address2);
        if (property != null) {
            salesPersonBean.setAddress2(property.getValue().toString());
        }

        property = properties.get(Constants.Address3);
        if (property != null) {
            salesPersonBean.setAddress3(property.getValue().toString());
        }
        property = properties.get(Constants.Address4);
        if (property != null) {
            salesPersonBean.setAddress4(property.getValue().toString());
        }

        property = properties.get(Constants.PostalCode);
        if (property != null) {
            salesPersonBean.setPostalCode(property.getValue().toString());
        }

        property = properties.get(Constants.EmailID);
        if (property != null) {
            salesPersonBean.setEmailID(property.getValue().toString());
        }

        property = properties.get(Constants.MobileNoSales);
        if (property != null) {
            salesPersonBean.setMobileNo(property.getValue().toString());
        }
        property = properties.get(Constants.SPGUID);
        try {
            ODataGuid spGUID = (ODataGuid) property.getValue();
            salesPersonBean.setSPGUID(spGUID.guidAsString36().toUpperCase());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return salesPersonBean;
    }

    /**
     * returns Authorization data from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<Config> getAuthorizations(Context cntxt) throws OfflineODataStoreException {

        ArrayList<Config> authList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            Config authBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = Constants.UserProfileAuthSet + "?$filter=Application eq 'MSEC' and AuthOrgTypeID eq '000011' ";
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the AUTHORIZATIONS from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        authBean = new Config();
                        properties = entity.getProperties();
                        property = properties.get(Constants.AuthOrgValue);
                        authBean.setFeature((String) property.getValue());
                        authList.add(authBean);
                    }
                    SharedPreferences sharedPreferences = cntxt.getSharedPreferences(Constants.PREFS_NAME, 0);
                    SharedPreferences.Editor editor = sharedPreferences.edit();

                    Constants.updateTCodeToSharedPreference(sharedPreferences, editor, authList);


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return authList;

    }

    /**
     * get log Authorizations
     */

    public static ArrayList<Config> getLogAuthorizations(Context cntxt) throws OfflineODataStoreException {

        ArrayList<Config> authList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            Config authBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = Constants.UserProfileAuthSet + "?$filter=Application eq 'MSEC' and AuthOrgTypeID eq '000011' ";
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the AUTHORIZATIONS from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        authBean = new Config();
                        properties = entity.getProperties();
                        property = properties.get(Constants.AuthOrgValue);
                        authBean.setFeature((String) property.getValue());
                        authList.add(authBean);
                    }
                    SharedPreferences sharedPreferences = cntxt.getSharedPreferences(Constants.LOGPREFS_NAME, 0);
                    SharedPreferences.Editor editor = sharedPreferences.edit();

                    Constants.updateLogTCodeToSharedPreference(sharedPreferences, editor, authList);


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return authList;

    }

    /**
     * returns Attendance guid as string from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getAttendance(String strQry) throws OfflineODataStoreException {
        String attdVal = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Attendances from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.AttendanceGUID);
                        attdVal = property.getValue().toString();
                        Constants.MapEntityVal.put(Constants.AttendanceGUID, property.getValue());

                        property = properties.get(Constants.StartDate);
                        Constants.MapEntityVal.put(Constants.StartDate, property.getValue());
                        property = properties.get(Constants.StartTime);
                        Constants.MapEntityVal.put(Constants.StartTime, property.getValue());
                        property = properties.get(Constants.StartLat);
                        Constants.MapEntityVal.put(Constants.StartLat, property.getValue());
                        property = properties.get(Constants.StartLong);
                        Constants.MapEntityVal.put(Constants.StartLong, property.getValue());
                        property = properties.get(Constants.EndDate);
                        Constants.MapEntityVal.put(Constants.EndDate, property.getValue());
                        property = properties.get(Constants.EndLat);
                        Constants.MapEntityVal.put(Constants.EndLat, property.getValue());
                        property = properties.get(Constants.EndLong);
                        Constants.MapEntityVal.put(Constants.EndLong, property.getValue());

                        property = properties.get(Constants.Remarks);
                        Constants.MapEntityVal.put(Constants.Remarks, property.getValue());
                        property = properties.get(Constants.AttendanceTypeH1);
                        Constants.MapEntityVal.put(Constants.AttendanceTypeH1, property.getValue());
                        property = properties.get(Constants.AttendanceTypeH2);
                        Constants.MapEntityVal.put(Constants.AttendanceTypeH2, property.getValue());

                        property = properties.get(Constants.AttendanceGUID);
                        ODataGuid mAttendenceGuid = (ODataGuid) property.getValue();
                        Constants.MapEntityVal.put(Constants.SetResourcePath, Constants.Attendances + "(guid'" + mAttendenceGuid.guidAsString36() + "')");
                        if (entity.getEtag() != null) {
                            Constants.MapEntityVal.put(Constants.Etag, entity.getEtag());
                        }
                    }
                }


            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return attdVal;
    }

    /**
     * Returns other retailers visit status before starting visit for current retailer from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[] checkVisitForOtherRetailer(String strQry) throws OfflineODataStoreException {

        String[] visitDetail = new String[2];
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPGUID);
                        String cpGUID = (String) property.getValue();
                        String custName = "";
                        visitDetail[0] = (custName.equalsIgnoreCase("")) ? getValueByColumnName(Constants.ChannelPartners +
                                "?$select=" + Constants.RetailerName + " &$filter = " + Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(cpGUID) + "'", Constants.RetailerName) : custName;
                        property = properties.get(Constants.VISITKEY);
                        visitDetail[1] = ((ODataGuid) property.getValue()).guidAsString36();
                    }
                }


            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return visitDetail;
    }

    /**
     * Returns value for selected column name from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getValueByColumnName(final String mQry, final String columnName) throws OfflineODataStoreException {
        final String[] mStrVal = {""};
        Thread thread =null;
        try {
            thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    if (offlineStore != null) {
                        try {
                            //Define the resource path
                            ODataProperty property;
                            ODataPropMap properties;
                            ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                            request.setMode(ODataRequestParamSingle.Mode.Read);
                            request.setResourcePath(mQry);
                            //Send a request to read the Distributors from the local database
                            ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                                    executeRequest(request);
                            //Check if the response is an error
                            if (response.getPayloadType() == ODataPayload.Type.Error) {
                                ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                        response.getPayload();
                                throw new OfflineODataStoreException(error.getMessage());
                                //Check if the response contains EntitySet
                            } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                                List<ODataEntity> entities = feed.getEntities();

                                for (ODataEntity entity : entities) {
                                    properties = entity.getProperties();
                                    property = properties.get(columnName);
                                    mStrVal[0] = (String) property.getValue();
                                }


                            } else {
                                throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                            }
                        } catch (Exception e) {
                            try {
                                throw new OfflineODataStoreException(e);
                            } catch (OfflineODataStoreException e1) {
                                e1.printStackTrace();
                            }
                        }
                    }
                }
            });
            thread.start();
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (thread!=null&&thread.isAlive()){
                thread.interrupt();
            }
        }
        return mStrVal[0];

    }

    /**
     * Returns VisitAcitivities for retailer done or not from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean checkVisitActivitiesForRetailer(String strQry) throws OfflineODataStoreException {

        boolean isVisitActivities = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {
                        isVisitActivities = true;
                        break;
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return isVisitActivities;

    }

    public static String getRouteQry(String qry) throws OfflineODataStoreException {
        String mStrRouteQry = "";

        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
        RoutePlanBean routePlanBean;
        ArrayList<RoutePlanBean> alRouteList = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.RschGuid);
                ODataGuid RschGuid = null;
                RschGuid = (ODataGuid) property.getValue();
                if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                    routePlanBean = new RoutePlanBean();
                    routePlanBean.setRschGuid(RschGuid.guidAsString36().toUpperCase());
                    String dayOfWeek = "";
                    String dayOfMonth = "";
                    property = properties.get(Constants.DOW);
                    if (property.getValue() != null)
                        dayOfWeek = (String) property.getValue();
                    property = properties.get(Constants.DOM);
                    if (property.getValue() != null)
                        dayOfMonth = (String) property.getValue();

                    routePlanBean.setDOM(dayOfMonth);
                    routePlanBean.setDOW(dayOfWeek);

                    alRouteList.add(routePlanBean);
                }
            }

            if (alRouteList != null && alRouteList.size() > 0) {
                for (int i = 0; i < alRouteList.size(); i++) {
                    if (i == 0 && i == alRouteList.size() - 1) {
                        mStrRouteQry = mStrRouteQry
                                + "(" + Constants.RouteSchGUID + "%20eq%20guid'"
                                + alRouteList.get(i).getRschGuid() + "' and " + Constants.DayOfWeek + " eq '" + alRouteList.get(i).getDOW() + "' " +
                                "and " + Constants.DayOfMonth + " eq '" + alRouteList.get(i).getDOM() + "')";

                    } else if (i == 0) {
                        mStrRouteQry = mStrRouteQry
                                + "((" + Constants.RouteSchGUID + "%20eq%20guid'"
                                + alRouteList.get(i).getRschGuid() + "' and " + Constants.DayOfWeek + " eq '" + alRouteList.get(i).getDOW() + "' " +
                                "and " + Constants.DayOfMonth + " eq '" + alRouteList.get(i).getDOM() + "')";

                    } else if (i == alRouteList.size() - 1) {
                        mStrRouteQry = mStrRouteQry
                                + "%20)or%20(" + Constants.RouteSchGUID + "%20eq%20guid'"
                                + alRouteList.get(i).getRschGuid() + "' and " + Constants.DayOfWeek + " eq '" + alRouteList.get(i).getDOW() + "' " +
                                "and " + Constants.DayOfMonth + " eq '" + alRouteList.get(i).getDOM() + "'))";
                    } else {
                        mStrRouteQry = mStrRouteQry
                                + "%20)or%20(" + Constants.RouteSchGUID + "%20eq%20guid'"
                                + alRouteList.get(i).getRschGuid() + "' and " + Constants.DayOfWeek + " eq '" + alRouteList.get(i).getDOW() + "' " +
                                "and " + Constants.DayOfMonth + " eq '" + alRouteList.get(i).getDOM() + "') ";
                    }
                }

            }

        } else {
            mStrRouteQry = "";
        }
        return mStrRouteQry;
    }

    /**
     * Returns List of retailers for route who are not visited from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
   /* public static String[][] getNotVisitedRetailerList(String qry, String startDate) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        int i = 0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[entities.size()][6];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();


                        property = properties.get(Constants.RouteSchGUID);
                        ODataGuid routeSchGuid = null;
                        try {
                            routeSchGuid = (ODataGuid) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        String routePlanKey = getValueByColumnName(Constants.RoutePlans +
                                "?$select=" + Constants.RoutePlanKey + " &$filter = " +
                                Constants.RschGuid + " eq guid'" + routeSchGuid.guidAsString36().toUpperCase() + "'", Constants.RoutePlanKey);


                        property = properties.get(Constants.VisitCPGUID);
                        String cpGuid = (String) property.getValue();


                        if (!OfflineManager.getVisitStatusForCustomer(Constants.Visits
                                + "?$filter=" + Constants.CPGUID + " eq '" + cpGuid.toUpperCase()
                                + "' and StartDate eq datetime'" + startDate + "' " +
                                "and (" + Constants.StatusID + " eq '01' or " + Constants.StatusID + " eq '02') ")) {

								*//*and " +
								""+Constants.ROUTEPLANKEY+" eq guid'"+Constants.convertStrGUID32to36(routePlanKey.toUpperCase())+"'*//*

                            String custNo = getValueByColumnName(Constants.ChannelPartners +
                                    "?$select=" + Constants.CPNo + " &$filter = " +
                                    Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(cpGuid.toUpperCase()) + "'", Constants.CPNo);
                            configVal[incVal][0] = custNo;
                            String custName = getValueByColumnName(Constants.ChannelPartners +
                                    "?$select=" + Constants.RetailerName + " &$filter = " +
                                    Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(cpGuid.toUpperCase()) + "'", Constants.RetailerName);
                            configVal[incVal][1] = custName;
                            configVal[incVal][2] = custName + " - " + custNo;
                            configVal[incVal][3] = cpGuid.toUpperCase();
                            configVal[incVal][4] = routePlanKey;
                            configVal[incVal][5] = "";
                            incVal++;
                            i++;
                        }

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (i <= 0)
            return null;
        else {
            String[][] tempVal = new String[i][6];
            for (int j = 0; j < i; j++) {
                tempVal[j][0] = configVal[j][0];
                tempVal[j][1] = configVal[j][1];
                tempVal[j][2] = configVal[j][2];
                tempVal[j][3] = configVal[j][3];
                tempVal[j][4] = configVal[j][4];
                tempVal[j][5] = configVal[j][5];
            }

            //sorting array based on name
            Arrays.sort(tempVal, new Comparator<String[]>() {
                @Override
                public int compare(String[] entry1, String[] entry2) {
                    // Sort by name
                    return entry1[1].compareTo(entry2[1]);
                }
            });
            return tempVal;
        }

    }*/
    public static String[][] getNotVisitedRetailerList(String qry, String startDate) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        int i = 0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[entities.size()][9];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.RouteSchGUID);
                        ODataGuid routeSchGuid = null;
                        try {
                            routeSchGuid = (ODataGuid) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                        property = properties.get(Constants.VisitCPGUID);
                        String cpGuid = (String) property.getValue();


                        if (!OfflineManager.getVisitStatusForCustomer(Constants.Visits
                                + "?$top=1 &$filter=" + Constants.CPGUID + " eq '" + cpGuid.toUpperCase()
                                + "' and StartDate eq datetime'" + startDate + "' " +
                                "and (" + Constants.StatusID + " eq '01' or " + Constants.StatusID + " eq '02') ")) {

                            String routePlanKey = getValueByColumnName(Constants.RoutePlans +
                                    "?$select=" + Constants.RoutePlanKey + "&$top=1 &$filter = " +
                                    Constants.RschGuid + " eq guid'" + routeSchGuid.guidAsString36().toUpperCase() + "' and " + Constants.VisitDate + " eq datetime'" + startDate + "' ", Constants.RoutePlanKey);

                            property = properties.get(Constants.ViisitCPNo);


                            String custNo = (String) property.getValue();

                           /* String custNo = getValueByColumnName(Constants.ChannelPartners +
                                    "?$select=" + Constants.CPNo + " &$filter = " +
                                    Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(cpGuid.toUpperCase()) + "'", Constants.CPNo);*/
                            configVal[incVal][0] = custNo;
                            property = properties.get(Constants.VisitCPName);
                            String custName = (String) property.getValue();

                            /*String custName = getValueByColumnName(Constants.ChannelPartners +
                                    "?$select=" + Constants.RetailerName + " &$filter = " +
                                    Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(cpGuid.toUpperCase()) + "'", Constants.RetailerName);*/
                            configVal[incVal][1] = custName;
                            configVal[incVal][2] = custName + " - " + custNo;
                            configVal[incVal][3] = cpGuid.toUpperCase();
                            configVal[incVal][4] = routePlanKey;
                            configVal[incVal][5] = "";
                            configVal[incVal][7] = "";
                            configVal[incVal][8] = "";
                            configVal[incVal][6] = Constants.convertStrGUID32to36(cpGuid.toUpperCase()).toUpperCase();
                            incVal++;
                            i++;
                        }

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (i <= 0)
            return null;
        else {
            String[][] tempVal = new String[i][9];
            for (int j = 0; j < i; j++) {
                tempVal[j][0] = configVal[j][0];
                tempVal[j][1] = configVal[j][1];
                tempVal[j][2] = configVal[j][2];
                tempVal[j][3] = configVal[j][3];
                tempVal[j][4] = configVal[j][4];
                tempVal[j][5] = configVal[j][5];
                tempVal[j][6] = configVal[j][6];
                tempVal[j][7] = configVal[j][7];
                tempVal[j][8] = configVal[j][8];
            }

            //sorting array based on name
            Arrays.sort(tempVal, new Comparator<String[]>() {
                @Override
                public int compare(String[] entry1, String[] entry2) {
                    // Sort by name
                    return entry1[1].compareTo(entry2[1]);
                }
            });
            return tempVal;
        }

    }

    /**
     * returns Visit status for retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getVisitStatusForCustomer(String strQry) throws OfflineODataStoreException {

        boolean mBooleanVisitStatus = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        mBooleanVisitStatus = true;
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mBooleanVisitStatus;

    }

    /**
     * Update an existing attendance in the local database
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void updateAttendance(Hashtable<String, String> table, UIListener uiListener,Context context) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateAttendanceEntity(table);
            //Send the request to update attendance in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.Attendances,context), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*Creates entity to update attendance in offline store*/
    private static ODataEntity updateAttendanceEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.ATTENDANCEENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.AttendanceGUID,
                        new ODataPropertyDefaultImpl(Constants.AttendanceGUID, hashtable.get(Constants.AttendanceGUID)));

                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));

                newEntity.getProperties().put(Constants.StartDate,
                        new ODataPropertyDefaultImpl(Constants.StartDate, hashtable.get(Constants.StartDate)));

                newEntity.getProperties().put(Constants.StartTime,
                        new ODataPropertyDefaultImpl(Constants.StartTime, hashtable.get(Constants.StartTime)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));

                newEntity.getProperties().put(Constants.EndDate,
                        new ODataPropertyDefaultImpl(Constants.EndDate, UtilConstants.convertDateFormat(hashtable.get(Constants.EndDate))));
                try {
                    newEntity.getProperties().put(Constants.EndLat,
                            new ODataPropertyDefaultImpl(Constants.EndLat, hashtable.get(Constants.EndLat)));
                    newEntity.getProperties().put(Constants.EndLong,
                            new ODataPropertyDefaultImpl(Constants.EndLong, hashtable.get(Constants.EndLong)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.EndTime,
                        new ODataPropertyDefaultImpl(Constants.EndTime, hashtable.get(Constants.EndTime)));

                newEntity.getProperties().put(Constants.AttendanceTypeH1,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH1, hashtable.get(Constants.AttendanceTypeH1)));
                newEntity.getProperties().put(Constants.AttendanceTypeH2,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH2, hashtable.get(Constants.AttendanceTypeH2)));
                newEntity.getProperties().put(Constants.REMARKS,
                        new ODataPropertyDefaultImpl(Constants.REMARKS, hashtable.get(Constants.REMARKS)));


                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));

                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }

                if (!hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * returns Visit status for visit Guid from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ODataEntity getVisitDetailsByKey(ODataGuid visitKey) throws OfflineODataStoreException {

        ODataEntity visitEntity = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            try {
                //Define the resource path
                String resourcePath = Constants.Visits + "(guid'" + visitKey.guidAsString36() + "')";

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Visits from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntity oDataEntity = (ODataEntity) response.getPayload();
                    visitEntity = oDataEntity;
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return visitEntity;

    }

    /**
     * Resets existing Attendance for today in the local database
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void resetAttendanceEntity(Hashtable<String, String> table, UIListener uiListener,Context context) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = resetAttendanceEntity(table);

            //Send the request to update attendance in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.Attendances,context), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*Creates entity to reset attendance in offline store*/
    private static ODataEntity resetAttendanceEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.ATTENDANCEENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.AttendanceGUID,
                        new ODataPropertyDefaultImpl(Constants.AttendanceGUID, hashtable.get(Constants.AttendanceGUID)));

                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));

                newEntity.getProperties().put(Constants.StartDate,
                        new ODataPropertyDefaultImpl(Constants.StartDate, hashtable.get(Constants.StartDate)));

                newEntity.getProperties().put(Constants.StartTime,
                        new ODataPropertyDefaultImpl(Constants.StartTime, hashtable.get(Constants.StartTime)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));

                newEntity.getProperties().put(Constants.EndDate,
                        new ODataPropertyDefaultImpl(Constants.EndDate, null));
                newEntity.getProperties().put(Constants.EndLat,
                        new ODataPropertyDefaultImpl(Constants.EndLat, null));
                newEntity.getProperties().put(Constants.EndLong,
                        new ODataPropertyDefaultImpl(Constants.EndLong, null));
                newEntity.getProperties().put(Constants.EndTime,
                        new ODataPropertyDefaultImpl(Constants.EndTime, null));

                newEntity.getProperties().put(Constants.AttendanceTypeH1,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH1, hashtable.get(Constants.AttendanceTypeH1)));
                newEntity.getProperties().put(Constants.AttendanceTypeH2,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH2, hashtable.get(Constants.AttendanceTypeH2)));
                newEntity.getProperties().put(Constants.REMARKS,
                        new ODataPropertyDefaultImpl(Constants.REMARKS, hashtable.get(Constants.REMARKS)));

                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));

                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }

                if (!hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;
    }

    /**
     * CreateOperation a new entity in the local database
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void createAttendance(Hashtable<String, String> table, UIListener uiListener,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createAttendanceEntity(table);
            //Send the request to create the new attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.Attendances,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Attendances,context),
                    null);
        } catch (Exception e) {
            e.printStackTrace();
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /*Creates Attendance Entity to save in offline store*/
    private static ODataEntity createAttendanceEntity(Hashtable<String, String> hashTable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashTable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.ATTENDANCEENTITY);

                newEntity.getProperties().put(Constants.AttendanceGUID,
                        new ODataPropertyDefaultImpl(Constants.AttendanceGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.AttendanceGUID))));

                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashTable.get(Constants.LOGINID)));

                newEntity.getProperties().put(Constants.AttendanceTypeH1,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH1, hashTable.get(Constants.AttendanceTypeH1)));

                newEntity.getProperties().put(Constants.AttendanceTypeH2,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH2, hashTable.get(Constants.AttendanceTypeH2)));

                newEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashTable.get(Constants.Remarks)));

                newEntity.getProperties().put(Constants.StartDate,
                        new ODataPropertyDefaultImpl(Constants.StartDate, UtilConstants.convertDateFormat(hashTable.get(Constants.StartDate))));

                newEntity.getProperties().put(Constants.StartTime,
                        new ODataPropertyDefaultImpl(Constants.StartTime, hashTable.get(Constants.StartTime)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashTable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashTable.get(Constants.StartLong)));

                newEntity.setResourcePath(hashTable.get(Constants.SetResourcePath), hashTable.get(Constants.SetResourcePath));

                if (!hashTable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.SPGUID))));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;
    }

    /**
     * Flush request queue on offline request DB
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void flushQueuedRequests(UIListener uiListener) throws
            OfflineODataStoreException {
        //BEGIN
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //used to get progress updates of a flush operation
            OfflineFlushListener flushListener = new OfflineFlushListener(uiListener);
            //Asynchronously starts sending pending modification request to the server
            offlineStore.scheduleFlushQueuedRequests(flushListener);
        } catch (ODataException e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * Flush request queue for collection on offline request DB
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void flushQueuedRequests(UIListener uiListener, String collection) throws
            OfflineODataStoreException {
        //BEGIN
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //used to get progress updates of a flush operation
            OfflineFlushListener flushListener = new OfflineFlushListener(uiListener, collection);
            //Assign an Offline Error Archive
            offlineStore.setRequestErrorListener(new OfflineErrorListener());

            //Asynchronously starts sending pending modification request to the server
            offlineStore.scheduleFlushQueuedRequests(flushListener);
        } catch (ODataException e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * returns configurations( values for drop down) for attendance
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getConfigListAttendance(String qry) throws OfflineODataStoreException {

        String[] configVal[] = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[3][entities.size()];
                    /*configVal[0][0] = Constants.str_00;
                    configVal[1][0] = Constants.None;
                    configVal[2][0] = Constants.X;*/
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        String propIDVal = (String) property.getValue();
                        configVal[0][incVal] = (String) property.getValue();

                        property = properties.get(Constants.DESCRIPTION);
                        configVal[1][incVal] = (String) property.getValue();
                        String mStrTypeVal = getConfigTypeIndicator(Constants.ConfigTypsetTypeValues,
                                Constants.TypeValue, Constants.Types, propIDVal, Constants.Typeset, Constants.PROP_ATTTYP);
                        configVal[2][incVal] = mStrTypeVal;
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    public static String getConfigTypeIndicator(String collName, String columnName, String whereColumnn, String whereColval, String propertyColumn, String propVal) {
        String colmnVal = "";
        try {
            colmnVal = OfflineManager.getValueByColumnName(collName + "?$select=" + columnName + " &$filter = " + whereColumnn + " eq '" + whereColval + "' and " + propertyColumn + " eq '" + propVal + "' ", columnName);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return colmnVal;
    }

    public static String getCustomerQry(String retListQry) throws OfflineODataStoreException {
        String mStrRouteQry = "";
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, retListQry);
                if (entities != null) {
                    int i = 0;
                    int entitiesTotalSize = entities.size();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CustomerNo);
                        String cuNumber = (String) property.getValue();

                        if (i == 0 && i == entitiesTotalSize - 1) {
                            mStrRouteQry = Constants.CustomerNo + " eq '"
                                    + cuNumber + "'";

                        } else if (i == 0) {
                            mStrRouteQry = mStrRouteQry + Constants.CustomerNo + " eq '"
                                    + cuNumber + "'";

                        } else if (i == entitiesTotalSize - 1) {
                            mStrRouteQry = mStrRouteQry + " or " + Constants.CustomerNo + " eq '"
                                    + cuNumber + "'";
                        } else {
                            mStrRouteQry = mStrRouteQry + " or " + Constants.CustomerNo + " eq '"
                                    + cuNumber + "'";
                        }

                        i++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + retListQry);
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        if (TextUtils.isEmpty(mStrRouteQry)) {
            mStrRouteQry = Constants.Customers + "?$select=CustomerNo,Name,Address1,Address2,Address3,District,City,PostalCode,Mobile1,Currency &$orderby=Name asc";
        } else {
            mStrRouteQry = Constants.Customers + "?$select=CustomerNo,Name,Address1,Address2,Address3,District,City,PostalCode,Mobile1,Currency &$filter=" + mStrRouteQry + "&$orderby=Name asc";
        }
        return mStrRouteQry;

    }

    /**
     * returns List of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<RetailerBean> getCustomerList(String retListQry) throws OfflineODataStoreException {

        ArrayList<RetailerBean> retailerList = new ArrayList<RetailerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            RetailerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CustomerNo);
                        retBean = new RetailerBean((String) property.getValue());
                        retBean.setCustomerId((String) property.getValue());
                        property = properties.get(Constants.Name);
                        retBean.setCustomerName((String) property.getValue());
                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.District);
                        retBean.setDistrict((String) property.getValue());


                        property = properties.get(Constants.City);
                        retBean.setCity((String) property.getValue());

                        property = properties.get(Constants.PostalCode);
                        retBean.setPostalCode((String) property.getValue());

                        try {
                            property = properties.get(Constants.MobileNo);
                            retBean.setMobile1((String) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                            property = properties.get(Constants.Mobile1);
                            retBean.setMobile1((String) property.getValue());
                        }

                        property = properties.get(Constants.Currency);
                        retBean.setCurrency((String) property.getValue());


                        // Currency


                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    public static ArrayList<RetailerBean> getCustomerListRTGS(String retListQry, ArrayList<WeekDetailsList> mtpRoutePlanBeanArrayList) throws OfflineODataStoreException {

        ArrayList<RetailerBean> retailerList = new ArrayList<RetailerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            RetailerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CustomerNo);
                        retBean = new RetailerBean((String) property.getValue());
                        retBean.setCustomerId((String) property.getValue());
                        boolean isCustomerNoPresent = checkCustomerNoPresentRtgs(retBean, mtpRoutePlanBeanArrayList);
                        property = properties.get(Constants.Name);
                        retBean.setCustomerName((String) property.getValue());

//                        property = properties.get(Constants.Name);
                        retBean.setCustomerType("01");

                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.District);
                        retBean.setDistrict((String) property.getValue());
                        property = properties.get(Constants.City);
                        retBean.setCity((String) property.getValue());
                        property = properties.get(Constants.PostalCode);
                        retBean.setPostalCode((String) property.getValue());
                        try {
                            property = properties.get(Constants.MobileNo);
                            retBean.setMobile1((String) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                            property = properties.get(Constants.Mobile1);
                            retBean.setMobile1((String) property.getValue());
                        }
                        property = properties.get(Constants.Currency);
                        retBean.setCurrency((String) property.getValue());
                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    private static boolean checkCustomerNoPresentRtgs(RetailerBean customerBean, ArrayList<WeekDetailsList> mtpRoutePlanBeanArrayList) {
        int pos = 0;
        boolean isGetList = false;
        for (WeekDetailsList mtpRoutePlanBean : mtpRoutePlanBeanArrayList) {
            if (customerBean.getCustomerId().equalsIgnoreCase(mtpRoutePlanBean.getcPNo())) {
                customerBean.setChecked(true);
                try {
                    customerBean.setAmount(mtpRoutePlanBean.getPlannedValue());
                } catch (Exception e) {
                    customerBean.setAmount("");
                    e.printStackTrace();
                }
                try {
                    customerBean.setRemarks(mtpRoutePlanBean.getRemarks());
                } catch (Exception e) {
                    customerBean.setRemarks("");
                    e.printStackTrace();
                }
                customerBean.setRouteSchPlanGUID(mtpRoutePlanBean.getCollectionPlanItemGUID());
                isGetList = true;
                break;
            }
        }
        return isGetList;
    }

    public static ArrayList<RetailerBean> getCustomerList(String retListQry, ArrayList<MTPRoutePlanBean> mtpRoutePlanBeanArrayList) throws OfflineODataStoreException {

        ArrayList<RetailerBean> retailerList = new ArrayList<RetailerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            RetailerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CustomerNo);
                        retBean = new RetailerBean((String) property.getValue());
                        retBean.setCustomerId((String) property.getValue());
                        boolean isCustomerNoPresent = checkCustomerNoPresent(retBean, mtpRoutePlanBeanArrayList);
                        property = properties.get(Constants.Name);
                        retBean.setCustomerName((String) property.getValue());
                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.District);
                        retBean.setDistrict((String) property.getValue());
                        property = properties.get(Constants.City);
                        retBean.setCity((String) property.getValue());
                        property = properties.get(Constants.PostalCode);
                        retBean.setPostalCode((String) property.getValue());
                        try {
                            property = properties.get(Constants.MobileNo);
                            retBean.setMobile1((String) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                            property = properties.get(Constants.Mobile1);
                            retBean.setMobile1((String) property.getValue());
                        }
                        property = properties.get(Constants.Currency);
                        retBean.setCurrency((String) property.getValue());
                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    private static boolean checkCustomerNoPresent(RetailerBean customerBean, ArrayList<MTPRoutePlanBean> mtpRoutePlanBeanArrayList) {
        int pos = 0;
        boolean isGetList = false;
        for (MTPRoutePlanBean mtpRoutePlanBean : mtpRoutePlanBeanArrayList) {
            if (customerBean.getCustomerId().equalsIgnoreCase(mtpRoutePlanBean.getCustomerNo())) {
                customerBean.setChecked(true);
                customerBean.setRouteSchPlanGUID(mtpRoutePlanBean.getRouteSchPlanGUID());
                isGetList = true;
                break;
            }
            pos++;
        }
        if (isGetList) {
            mtpRoutePlanBeanArrayList.remove(pos);
        }
        return isGetList;
    }

   /* public static ArrayList<RetailerBean> getRetailerList(String retListQry) throws OfflineODataStoreException {

        ArrayList<RetailerBean> retailerList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            RetailerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPNo);
                        retBean = new RetailerBean((String) property.getValue());
                        retBean.setCPNo((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        ODataGuid mCpGuid = null;
                        try {
                            mCpGuid = (ODataGuid) property.getValue();
                            retBean.setCPGUID(mCpGuid.guidAsString36().toUpperCase());
                            retBean.setCpGuidStringFormat(mCpGuid.guidAsString32().toUpperCase() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.RetailerName);
                        retBean.setRetailerName((String) property.getValue());
                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.TownDesc);
                        retBean.setTownDesc((String) property.getValue());

                        property = properties.get(Constants.DistrictDesc);
                        retBean.setDistrictDesc((String) property.getValue());

                        property = properties.get(Constants.Landmark);
                        retBean.setLandMark((String) property.getValue());

                        property = properties.get(Constants.Latitude);
                        BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                        if (mDecimalLatitude != null) {
                            retBean.setLatVal(mDecimalLatitude.doubleValue());
                        } else {
                            retBean.setLatVal(0.0);
                        }

                        property = properties.get(Constants.Longitude);
                        BigDecimal mDecimalLongitude = (BigDecimal) property.getValue();  //---------> Decimal property

                        if (mDecimalLongitude != null) {
                            retBean.setLongVal(mDecimalLongitude.doubleValue());
                        } else {
                            retBean.setLongVal(0.0);
                        }

                        property = properties.get(Constants.CityDesc);
                        retBean.setCity((String) property.getValue());

                        property = properties.get(Constants.PostalCode);
                        retBean.setPostalCode((String) property.getValue());

                        property = properties.get(Constants.MobileNo);
                        retBean.setMobileNumber((String) property.getValue());

                        property = properties.get(Constants.CPUID);
                        retBean.setUID((String) property.getValue());

                        property = properties.get(Constants.DOB);
                        retBean.setCustDOB(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        property = properties.get(Constants.Anniversary);
                        retBean.setAnniversary(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        property = properties.get(Constants.OwnerName);
                        retBean.setOwnerName((String) property.getValue());

                        retBean.setEditResourceURL(entity.getEditResourcePath());
                        retBean.setIsAddressEnabled(false);
                        retailerList.add(retBean);

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        Collections.sort(retailerList, new Comparator<RetailerBean>() {
            public int compare(RetailerBean one, RetailerBean other) {
                    return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
            }
        });
        return retailerList;

    }*/

    public static ArrayList<RetailerBean> getCustomerSalesAreaList(String retListQry, ArrayList<MTPRoutePlanBean> mtpRoutePlanBeanArrayList) throws OfflineODataStoreException {

        ArrayList<RetailerBean> retailerList = new ArrayList<RetailerBean>();
        //Check if the offline oData store is initialized
        ArrayList<String> tempList = new ArrayList<>();
        if (offlineStore != null) {
            RetailerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, retListQry);
                if (entities != null) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.SalesDistrictID);
                        retBean = new RetailerBean((String) property.getValue());
                        retBean.setCustomerId((String) property.getValue());
                        if (!tempList.contains(retBean.getCustomerId())) {
                            boolean isCustomerNoPresent = checkSalesDistPresent(retBean, mtpRoutePlanBeanArrayList);
                            property = properties.get(Constants.SalesDistrictDesc);
                            retBean.setCustomerName((String) property.getValue());
                            retailerList.add(retBean);
                            tempList.add(retBean.getCustomerId());
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + retListQry);
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    private static boolean checkSalesDistPresent(RetailerBean customerBean, ArrayList<MTPRoutePlanBean> mtpRoutePlanBeanArrayList) {
        int pos = 0;
        boolean isGetList = false;
        for (MTPRoutePlanBean mtpRoutePlanBean : mtpRoutePlanBeanArrayList) {
            if (customerBean.getCustomerId().equalsIgnoreCase(mtpRoutePlanBean.getSalesDistrict())) {
                customerBean.setChecked(true);
                customerBean.setRouteSchPlanGUID(mtpRoutePlanBean.getRouteSchPlanGUID());
                isGetList = true;
                break;
            }
            pos++;
        }
        if (isGetList) {
            mtpRoutePlanBeanArrayList.remove(pos);
        }
        return isGetList;
    }

    public static ArrayList<RetailerBean> getRetailerList(String retListQry) throws OfflineODataStoreException {
        ArrayList<RetailerBean> retailerList = new ArrayList<>();

        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    retailerList.addAll(getRetailerList(entities));
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        /*Collections.sort(retailerList, new Comparator<RetailerBean>() {
            public int compare(RetailerBean one, RetailerBean other) {
                return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
            }
        });*/
        return retailerList;

    }

    /**
     * @param mContext
     * @param salListQry
     * @return sales persons array list
     * @throws OfflineODataStoreException
     * @desc getting competitors list
     */
    public static ArrayList<CompetitorBean> getCompetitors(Context mContext, String salListQry) throws OfflineODataStoreException {

        ArrayList<CompetitorBean> competitorList = null;
        CompetitorBean competitorBean = null;
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(mContext);
        ODataProperty property;
        ODataPropMap properties;

        try {
            competitorList = new ArrayList<>();
            // check weather offline store is initialized or not
            if (offlineStore != null) {
                // define the resource pathe
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(salListQry);

                // send a request to read the sales persons from the local data base
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.executeRequest(request);

                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl) response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());

                    // Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    // Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        competitorBean = new CompetitorBean();
                        // fetching data from properties assigning to setters
                        property = properties.get(Constants.Currency);
                        competitorBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.Earnings);
                        if (property != null) {
                            BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                            if (mDecimalLatitude != null) {
                                competitorBean.setEarnings(String.valueOf(mDecimalLatitude.doubleValue()));
                            } else {
                                competitorBean.setEarnings("0.0");
                            }
                        }

                        property = properties.get(Constants.RoutDesc);
                        if (property != null) {
                            competitorBean.setRoutDesc((String) property.getValue());
                        }

                        property = properties.get(Constants.Remarks);
                        if (property != null) {
                            competitorBean.setRemarks((String) property.getValue());
                        }

                        property = properties.get(Constants.SPName);
                        if (property != null) {
                            competitorBean.setSPName((String) property.getValue());
                        }

                        property = properties.get(Constants.CPName);
                        if (property != null) {
                            competitorBean.setCPName((String) property.getValue());
                        }

                        property = properties.get(Constants.SchemeName);
                        if (property != null) {
                            competitorBean.setSchemeName((String) property.getValue());
                        }

                        property = properties.get(Constants.CompName);
                        if (property != null) {
                            competitorBean.setCompanyName((String) property.getValue());
                        }

                        property = properties.get(Constants.MaterialDesc);
                        if (property != null) {
                            competitorBean.setMaterialDesc((String) property.getValue());
                        }

                        property = properties.get(Constants.LandingPrice);
                        if (property != null) {
                            BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                            if (mDecimalLatitude != null) {
                                competitorBean.setLandingPrice(String.valueOf(mDecimalLatitude.doubleValue()));
                            } else {
                                competitorBean.setLandingPrice("0.0");
                            }
                        }

                        property = properties.get(Constants.WholeSalesLandingPrice);
                        if (property != null) {
                            BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                            if (mDecimalLatitude != null) {
                                competitorBean.setWholesalerLandingPrice(String.valueOf(mDecimalLatitude.doubleValue()));
                            } else {
                                competitorBean.setWholesalerLandingPrice("0.0");
                            }
                        }

                        property = properties.get(Constants.SPNo);
                        if (property != null) {
                            competitorBean.setSpNo((String) property.getValue());
                        }

                        property = properties.get(Constants.Margin);
                        if (property != null) {
                            BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                            if (mDecimalLatitude != null) {
                                competitorBean.setMargin(String.valueOf(mDecimalLatitude.doubleValue()));
                            } else {
                                competitorBean.setMRP("0.0");
                            }
                        }

                        property = properties.get(Constants.TradeOffer);
                        if (property != null) {
                            competitorBean.setTradeOffer((String) property.getValue());
                        }

                        property = properties.get(Constants.MRP);
                        if (property != null) {
                            BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                            if (mDecimalLatitude != null) {
                                competitorBean.setMRP(String.valueOf(mDecimalLatitude.doubleValue()));
                            } else {
                                competitorBean.setMRP("0.0");
                            }
                        }

                        property = properties.get(Constants.ConsumerOffer);
                        if (property != null) {
                            competitorBean.setConsumerOffer((String) property.getValue());
                        }

                        property = properties.get(Constants.ShelfLife);
                        if (property != null) {
                            BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                            if (mDecimalLatitude != null) {
                                competitorBean.setShelfLife(String.valueOf(mDecimalLatitude.doubleValue()));
                            }
                        }

                        property = properties.get(Constants.UpdatedOn);
                        if (property != null) {
                            competitorBean.setUpdatedOn(UtilConstants.convertDateIntoDeviceFormat(mContext, (GregorianCalendar) property.getValue(), configDateFormat));
                        }

                        // adding model of data to list
                        competitorList.add(competitorBean);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return competitorList;
    }

    public static ArrayList<RetailerBean> getRetailerList(List<ODataEntity> entities) {
        ArrayList<RetailerBean> retailerList = new ArrayList<>();
        ArrayList<String> removeDuplicate = new ArrayList<>();
        ArrayList<RetailerBean> otherRetailerList = new ArrayList<>();
        RetailerBean retBean;
        ODataProperty property;
        ODataPropMap properties;
        String lastRoutId = "";
        RetailerBean rb1 = null;
        for (ODataEntity entity : entities) {
            properties = entity.getProperties();

            property = properties.get(Constants.CPNo);
            retBean = new RetailerBean((String) property.getValue());
            retBean.setCPNo((String) property.getValue());
            property = properties.get(Constants.RouteID);
            retBean.setRouteID((String) property.getValue());
            property = properties.get(Constants.ParentID);
            retBean.setParentID((String) property.getValue());
            property = properties.get(Constants.RouteDesc);
            Log.d("RouteID","RetailerList"+retBean.getRouteID());
            retBean.setRouteDesc((String) property.getValue());

            property = properties.get(Constants.CPGUID);
            ODataGuid mCpGuid = null;
            try {
                mCpGuid = (ODataGuid) property.getValue();
                retBean.setCPGUID(mCpGuid.guidAsString36().toUpperCase());
                retBean.setCpGuidStringFormat(mCpGuid.guidAsString32().toUpperCase() + "");
            } catch (Exception e) {
                e.printStackTrace();
            }
            property = properties.get(Constants.RouteGUID);
            try {
                mCpGuid = (ODataGuid) property.getValue();
                retBean.setRouteGuid36(mCpGuid.guidAsString36().toUpperCase());
                retBean.setRouteGuid32(mCpGuid.guidAsString32().toUpperCase() + "");
            } catch (Exception e) {
                e.printStackTrace();
            }
            property = properties.get(Constants.RetailerName);
            retBean.setRetailerName((String) property.getValue());
            property = properties.get(Constants.Address1);
            retBean.setAddress1((String) property.getValue());
            property = properties.get(Constants.Address2);
            retBean.setAddress2((String) property.getValue());
            property = properties.get(Constants.Address3);
            retBean.setAddress3((String) property.getValue());
            property = properties.get(Constants.TownDesc);
            if (property != null)
                retBean.setTownDesc((String) property.getValue());

            property = properties.get(Constants.DistrictDesc);
            if (property != null)
                retBean.setDistrictDesc((String) property.getValue());

            property = properties.get(Constants.Landmark);
            if (property != null)
                retBean.setLandMark((String) property.getValue());

            property = properties.get(Constants.Latitude);
            if (property != null) {
                BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                if (mDecimalLatitude != null) {
                    retBean.setLatVal(mDecimalLatitude.doubleValue());
                } else {
                    retBean.setLatVal(0.0);
                }
            }

            property = properties.get(Constants.Longitude);
            if (property != null) {
                BigDecimal mDecimalLongitude = (BigDecimal) property.getValue();  //---------> Decimal property

                if (mDecimalLongitude != null) {
                    retBean.setLongVal(mDecimalLongitude.doubleValue());
                } else {
                    retBean.setLongVal(0.0);
                }
            }

            property = properties.get(Constants.CityDesc);
            if (property != null)
                retBean.setCity((String) property.getValue());

            property = properties.get(Constants.PostalCode);
            if (property != null)
                retBean.setPostalCode((String) property.getValue());

            property = properties.get(Constants.MobileNo1);
            retBean.setMobileNumber((String) property.getValue());

            property = properties.get(Constants.CPUID);
            retBean.setUID((String) property.getValue());

            property = properties.get(Constants.DOB);
            if (property != null)
                retBean.setCustDOB(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

            property = properties.get(Constants.Anniversary);
            if (property != null)
                retBean.setAnniversary(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

            property = properties.get(Constants.OwnerName);
            if (property != null)
                retBean.setOwnerName((String) property.getValue());
            property = properties.get(Constants.Group3Desc);
            if (property != null)
                retBean.setGroup3Desc((String) property.getValue());

            retBean.setEditResourceURL(entity.getEditResourcePath());
            retBean.setIsAddressEnabled(false);
            if (TextUtils.isEmpty(retBean.getRouteID())) {
                otherRetailerList.add(retBean);
            } else if (!retBean.getRouteID().equalsIgnoreCase(lastRoutId)) {
                if (rb1 != null) {
                    retailerList.add(rb1);
                }
                rb1 = new RetailerBean();
                property = properties.get(Constants.RouteID);
                rb1.setRouteID((String) property.getValue());
                rb1.setTitle(true);
                property = properties.get(Constants.RouteDesc);
                rb1.setRouteDesc((String) property.getValue());
                ArrayList<RetailerBean> tempRetailerList1 = new ArrayList<>();
                tempRetailerList1.add(retBean);


                rb1.setItemList(tempRetailerList1);
                lastRoutId = rb1.getRouteID();
               /* if (!tempRetailerList.isEmpty()) {
                    Collections.sort(tempRetailerList, new Comparator<RetailerBean>() {
                        public int compare(RetailerBean one, RetailerBean other) {
                            return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
                        }
                    });
                    retailerList.addAll(tempRetailerList);
                    tempRetailerList.clear();
                }

                retailerList.add(rb1);
                tempRetailerList.add(retBean);*/
            } else {
                if (rb1 != null) {
                    ArrayList<RetailerBean> tempRetailerList1 = rb1.getItemList();
                    tempRetailerList1.add(retBean);
                    rb1.setItemList(tempRetailerList1);
                }
//                tempRetailerList.add(retBean);
            }
        }
        if (rb1 != null) {
            retailerList.add(rb1);
        }
        ArrayList<RetailerBean> modifiedretailerList = new ArrayList<>();
        List<String> duplicationId = new ArrayList<>();

        if(retailerList!=null && retailerList.size()>0) {
            for (RetailerBean beandata : retailerList) {
                ArrayList<RetailerBean> itemretailerList = new ArrayList<>();
                itemretailerList.addAll(beandata.getItemList());
                for(RetailerBean routfor : retailerList){
                    if(beandata.getRouteID().equalsIgnoreCase(routfor.getRouteID())){
                        itemretailerList.addAll(routfor.getItemList());
                    }
                }
                if(!duplicationId.contains(beandata.getRouteID())) {
                    beandata.setItemList(itemretailerList);
                    modifiedretailerList.add(beandata);
                }
                duplicationId.add(beandata.getRouteID());

            }
        }

        Collections.sort(modifiedretailerList, new Comparator<RetailerBean>() {
            public int compare(RetailerBean one, RetailerBean other) {
                return one.getRouteDesc().toLowerCase().compareTo(other.getRouteDesc().toLowerCase());
            }
        });

        for (RetailerBean retailerBean : modifiedretailerList) {
            ArrayList<RetailerBean> tempArr = retailerBean.getItemList();
            Collections.sort(tempArr, new Comparator<RetailerBean>() {
                public int compare(RetailerBean one, RetailerBean other) {
                    return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
                }
            });
            retailerBean.setItemList(tempArr);
            retailerBean.setRetailerCount(String.valueOf(tempArr.size()));
//            finalRetailerList.add(retailerBean);
//            finalRetailerList.addAll(tempArr);
        }
        /*if (!tempRetailerList.isEmpty()) {
            Collections.sort(tempRetailerList, new Comparator<RetailerBean>() {
                public int compare(RetailerBean one, RetailerBean other) {
                    return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
                }
            });
            retailerList.addAll(tempRetailerList);
            tempRetailerList.clear();
        }*/
        if (!otherRetailerList.isEmpty()) {
            rb1 = new RetailerBean();
            rb1.setRouteID("");
            rb1.setTitle(true);
            rb1.setRouteDesc("");
            rb1.setRetailerCount(String.valueOf(otherRetailerList.size()));


            Collections.sort(otherRetailerList, new Comparator<RetailerBean>() {
                public int compare(RetailerBean one, RetailerBean other) {
                    return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
                }
            });
            rb1.setItemList(otherRetailerList);
            modifiedretailerList.add(rb1);
//            finalRetailerList.addAll(otherRetailerList);
        }
        ArrayList<RetailerBean> tempListHeader = new ArrayList<>();
        ArrayList<RetailerBean> tempListItem = new ArrayList<>();
        try {
            if(modifiedretailerList!=null & modifiedretailerList.size()>0){
                for(int j=0;j<modifiedretailerList.size();j++) {
                    tempListItem = new ArrayList<>();
                    RetailerBean retailerBean = modifiedretailerList.get(j);
                    ArrayList<RetailerBean> retailerBeanItemList = retailerBean.getItemList();

                    if (retailerBeanItemList != null & retailerBeanItemList.size() > 0) {
                        for (int i = 0; i < retailerBeanItemList.size(); i++) {
                            RetailerBean retailerBeanItm = retailerBeanItemList.get(i);
                            if (!removeDuplicate.contains(retailerBeanItm.getCPGUID())) {
                                tempListItem.add(retailerBeanItm);
                                removeDuplicate.add(retailerBeanItm.getCPGUID());
                            }
                            retailerBeanItm=null;
                        }
                        retailerBean.setItemList(tempListItem);
                        tempListHeader.add(retailerBean);
                        retailerBean= null;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tempListHeader;
    }

    public static ODataGuid getVisitDetails(String strQry) throws OfflineODataStoreException {

        ODataGuid attdVal = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.VISITKEY);
                        attdVal = (ODataGuid) property.getValue();
                        Constants.MapEntityVal.put(Constants.VISITKEY, property.getValue());
                        property = properties.get(Constants.STARTDATE);
                        Constants.MapEntityVal.put(Constants.STARTDATE, property.getValue());
                        property = properties.get(Constants.STARTTIME);
                        Constants.MapEntityVal.put(Constants.STARTTIME, property.getValue());
                        property = properties.get(Constants.StartLat);
                        Constants.MapEntityVal.put(Constants.StartLat, property.getValue());
                        property = properties.get(Constants.StartLong);
                        Constants.MapEntityVal.put(Constants.StartLong, property.getValue());
                        property = properties.get(Constants.ENDDATE);
                        Constants.MapEntityVal.put(Constants.ENDDATE, property.getValue());
                        property = properties.get(Constants.EndLat);
                        Constants.MapEntityVal.put(Constants.EndLat, property.getValue());
                        property = properties.get(Constants.EndLong);
                        Constants.MapEntityVal.put(Constants.EndLong, property.getValue());
                        property = properties.get(Constants.CPNo);
                        Constants.MapEntityVal.put(Constants.CPNo, property.getValue());
                        property = properties.get(Constants.CPGUID);
                        Constants.MapEntityVal.put(Constants.CPGUID, property.getValue());

                        if (property.getValue().toString() != null) {
                            String guidValue = property.getValue().toString();
                            String mStrAddDashSymbol = CharBuffer.join9(StringFunction.substring(guidValue, 0, 8), "-", StringFunction.substring(guidValue, 8, 12), "-", StringFunction.substring(guidValue, 12, 16), "-", StringFunction.substring(guidValue, 16, 20), "-", StringFunction.substring(guidValue, 20, 32));

                            Constants.MapEntityVal.put(Constants.OtherCustGuid, mStrAddDashSymbol);
                        }
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return attdVal;

    }

    /**
     * returns Details of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ODataEntity getRetDetails(String strQry) throws OfflineODataStoreException {

        ODataEntity retailerEntity = null;

        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntity oDataEntity = (ODataEntity) response.getPayload();
                    retailerEntity = oDataEntity;
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        retailerEntity = entity;
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerEntity;

    }

    public static ArrayList<ConfigTypesetTypesBean> getConfigTypesetTypes(String query, String defaultValue) throws OfflineODataStoreException {
        ArrayList<ConfigTypesetTypesBean> configTypesetTypesBeanArrayList = new ArrayList<>();
        ConfigTypesetTypesBean configTypesetTypesBean;
        if (!TextUtils.isEmpty(defaultValue)) {
            configTypesetTypesBean = new ConfigTypesetTypesBean();
            configTypesetTypesBean.setTypes("");
            configTypesetTypesBean.setTypesName(defaultValue);
            configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
        }
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        configTypesetTypesBean = new ConfigTypesetTypesBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        configTypesetTypesBean.setTypes((String) property.getValue());
                        property = properties.get(Constants.TypesName);
                        configTypesetTypesBean.setTypesName((String) property.getValue());
                        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configTypesetTypesBeanArrayList;
    }

    public static ArrayList<ConfigTypesetTypesBean> getConfigTypesetTypes(String query) throws OfflineODataStoreException {
        ArrayList<ConfigTypesetTypesBean> configTypesetTypesBeanArrayList = new ArrayList<>();
        ConfigTypesetTypesBean configTypesetTypesBean;
        configTypesetTypesBean = new ConfigTypesetTypesBean();
        configTypesetTypesBean.setTypes("");
        configTypesetTypesBean.setTypesName(Constants.ALL);
        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        configTypesetTypesBean = new ConfigTypesetTypesBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        configTypesetTypesBean.setTypes((String) property.getValue());
                        property = properties.get(Constants.TypesName);
                        configTypesetTypesBean.setTypesName((String) property.getValue());
                        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configTypesetTypesBeanArrayList;
    }

    /**
     * get secondary sales order list
     *
     * @param retailerStockQry
     * @return
     * @throws OfflineODataStoreException
     */
    public static ArrayList<SalesOrderBean> getSecondarySalesOrderList(Context mContext, String retailerStockQry) throws OfflineODataStoreException {
        ArrayList<SalesOrderBean> salesOrderBeanArrayList = new ArrayList<>();
        ArrayList<SalesOrderBean> soArrayList = new ArrayList<>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(mContext);
        if (offlineStore != null) {
            SalesOrderBean salesOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        salesOrderBean = new SalesOrderBean();

                        property = properties.get(Constants.SSSOGuid);
                        try {
                            if (property != null) {
                                ODataGuid mCpGuid = (ODataGuid) property.getValue();
                                salesOrderBean.setSSROGUID(mCpGuid.guidAsString36().toUpperCase());
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.SSROGUID);
                        try {
                            if (property != null) {
                                ODataGuid mCpGuid = (ODataGuid) property.getValue();
                                salesOrderBean.setSSROGUID(mCpGuid.guidAsString36().toUpperCase());
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.OrderNo);
                        if (property != null) {
                            salesOrderBean.setOrderNo((String) property.getValue());
                        }

                        property = properties.get(Constants.Status);
                        if (property != null) {
                            salesOrderBean.setStatusID((String) property.getValue());
                        }

                        property = properties.get(Constants.StatusID);
                        if (property != null) {
                            salesOrderBean.setStatusID((String) property.getValue());
                        }

                        property = properties.get(Constants.ApprovalStatus);
                        if (property != null) {
                            salesOrderBean.setDelvStatus((String) property.getValue());
                        }

                        property = properties.get(Constants.Currency);
                        if (property != null) {
                            salesOrderBean.setCurrency((String) property.getValue());
                        }

                        property = properties.get(Constants.NetPrice);
                        if (property != null) {
                            BigDecimal netAmount = (BigDecimal) property.getValue();
                            salesOrderBean.setNetAmount(netAmount.doubleValue() + "");
                        }

                        property = properties.get(Constants.NetAmount);
                        if (property != null) {
                            BigDecimal netAmount = (BigDecimal) property.getValue();
                            salesOrderBean.setNetAmount(netAmount.doubleValue() + "");
                        }

                        property = properties.get(Constants.OrderDate);
                        if (property != null) {
                            String convertDateFormat2 = UtilConstants.convertDateIntoDeviceFormat(mContext, (GregorianCalendar) property.getValue(), configDateFormat);
                            salesOrderBean.setOrderDate(convertDateFormat2);
                        }

                        salesOrderBeanArrayList.add(salesOrderBean);
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        Collections.sort(salesOrderBeanArrayList, new Comparator<SalesOrderBean>() {
            public int compare(SalesOrderBean one, SalesOrderBean other) {
                BigInteger i1 = null;
                BigInteger i2 = null;
                try {
                    i1 = new BigInteger(one.getOrderNo());
                } catch (NumberFormatException e) {
                }

                try {
                    i2 = new BigInteger(other.getOrderNo());
                } catch (NumberFormatException e) {
                }
                if (i1 != null && i2 != null) {
                    return i2.compareTo(i1);
                } else {
                    return other.getOrderNo().compareTo(one.getOrderNo());
                }
            }
        });
        /*custom sorting start*/
        String lastDate = "";
        for (int i = 0; i < salesOrderBeanArrayList.size(); i++) {
            SalesOrderBean soListBean = salesOrderBeanArrayList.get(i);
            String currentDate = soListBean.getOrderDate();
            if (!currentDate.equalsIgnoreCase(lastDate)) {
                ArrayList<SalesOrderBean> tempNumberSortingList = new ArrayList<>();
                for (int j = i; j < salesOrderBeanArrayList.size(); j++) {
                    SalesOrderBean soListBean1 = salesOrderBeanArrayList.get(j);
                    if (soListBean1.getOrderDate().equalsIgnoreCase(currentDate)) {
                        tempNumberSortingList.add(soListBean1);
                    } else {
                        break;
                    }
                }
                Collections.sort(tempNumberSortingList, new Comparator<SalesOrderBean>() {
                    public int compare(SalesOrderBean one, SalesOrderBean other) {
                        BigInteger i1 = null;
                        BigInteger i2 = null;
                        try {
                            i1 = new BigInteger(one.getOrderNo());
                        } catch (NumberFormatException e) {
                        }

                        try {
                            i2 = new BigInteger(other.getOrderNo());
                        } catch (NumberFormatException e) {
                        }
                        if (i1 != null && i2 != null) {
                            return i2.compareTo(i1);
                        } else {
                            return other.getOrderNo().compareTo(one.getOrderNo());
                        }
                    }
                });
                soArrayList.addAll(tempNumberSortingList);
                lastDate = currentDate;
            }
        }
        /*custom sorting end*/
        return soArrayList;

    }
    public static boolean isSoPresent(Context mContext, String retailerStockQry) throws OfflineODataStoreException {
      boolean isCheck = false;
        if (offlineStore != null) {
            SalesOrderBean salesOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if(entities!=null && entities.size()>0) isCheck = true;

                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        return isCheck;

    }

    public static List<SalesOrderBean> getSOListDB(Context context, String retailerStockQry,
                                                   String mStrCustomerNo, String status) throws OfflineODataStoreException {

        List<SalesOrderBean> salesOrderBeanList = new ArrayList<>();
        if (offlineStore != null) {
            SalesOrderBean salesOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        boolean isCancelledSO = false;
                        properties = entity.getProperties();

                        salesOrderBean = new SalesOrderBean();

                        property = properties.get(Constants.SONo);
                        salesOrderBean.setOrderNo((String) property.getValue());

                        property = properties.get(Constants.StatusID);
                        salesOrderBean.setStatusID((String) property.getValue());

                        property = properties.get(Constants.DelvStatusID);
                        salesOrderBean.setDelvStatus((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        salesOrderBean.setCurrency((String) property.getValue());
                        property = properties.get(Constants.Material);
                        salesOrderBean.setMaterialNo((String) property.getValue());
                        property = properties.get(Constants.MaterialDesc);
                        salesOrderBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.NetAmount);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setNetAmount(netAmount.doubleValue() + "");

                        property = properties.get(Constants.Quantity);
                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }
                        property = properties.get(Constants.UOM);
                        salesOrderBean.setUom((String) property.getValue());
                        if (checkNoUOMZero(salesOrderBean.getUom()))
                            salesOrderBean.setQAQty(trimQtyDecimalPlace(qty));
                        else
                            salesOrderBean.setQAQty(qty);

                /*        property = properties.get(Constants.TaxAmount);
                        BigDecimal taxAmount = (BigDecimal) property.getValue();
                       salesOrderBean.setTaxAmt(taxAmount.doubleValue() + "");*/
//
//
               /*         property = properties.get(Constants.TotalAmount);
                        BigDecimal totalAmount = (BigDecimal) property.getValue();
                       salesOrderBean.setTotalAmt(totalAmount.doubleValue() + "");*/

                        property = properties.get(Constants.OrderDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        salesOrderBean.setOrderDate(convertDateFormat);

                        String soTxtQry = Constants.SOTexts + "?$select=" + Constants.Text + " &$filter=SONo eq '" + salesOrderBean.getOrderNo() + "'";
                        String soTxt = UtilOfflineManager.getColumnVal(offlineStore, soTxtQry, Constants.Text);
                        salesOrderBean.setRemarks(soTxt != null ? soTxt : "");


                        salesOrderBeanList.add(salesOrderBean);
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        if (getDeviceCancelledSO(context, mStrCustomerNo) > 0) {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.SOCancel, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                                && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                            for (SalesOrderBean item : salesOrderBeanList) {
                                if (item.getOrderNo().equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SONo))) {
                                    item.setDelvStatus("F");
                                    if (!status.equalsIgnoreCase("F") && !status.equalsIgnoreCase(Constants.str_00)) {
                                        salesOrderBeanList.remove(item);
                                    }
                                    break;
                                }
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if (getDeviceChangedSO(context, mStrCustomerNo) > 0) {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.SOUpdate, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                                && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                            for (SalesOrderBean item : salesOrderBeanList) {
                                if (item.getOrderNo().equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SONo))) {
                                    item.setDeviceNo(fetchJsonHeaderObject.getString(Constants.SONo));
                                    item.setNetAmount(fetchJsonHeaderObject.optString(Constants.TotalAmount));
                                    item.setRemarks(fetchJsonHeaderObject.optString(Constants.Remarks));
                                    break;
                                }
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return salesOrderBeanList;

    }

    public static int getDeviceCancelledSO(Context context, String mStrCustomerNo) {
        Set<String> set = new HashSet<>();
        int count = 0;
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.SOCancel, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                            && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                        count++;

                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return count;
    }

    public static int getDeviceChangedSO(Context context, String mStrCustomerNo) {
        Set<String> set = new HashSet<>();
        int count = 0;
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.SOUpdate, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                            && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                        count++;

                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return count;
    }

    public static double getBTD(String monthTarget, String actualTarget) {
        double mDoubBTD = 0.0;
        try {
            mDoubBTD = Double.parseDouble(monthTarget) - Double.parseDouble(actualTarget);

        } catch (NumberFormatException e) {
            mDoubBTD = 0.0;
        }
        if (Double.isNaN(mDoubBTD) || Double.isInfinite(mDoubBTD)) {
            mDoubBTD = 0.0;
        }

        return mDoubBTD;
    }

    public static double getAchivedPer(String monthTarget, String actualTarget) {
        double mDouAchivedPercentage = 0.0;
        try {
            mDouAchivedPercentage = Double.parseDouble(actualTarget) / Double.parseDouble(monthTarget) * 100;
        } catch (NumberFormatException e) {
            mDouAchivedPercentage = 0.0;
        }

        if (Double.isNaN(mDouAchivedPercentage) || Double.isInfinite(mDouAchivedPercentage)) {
            mDouAchivedPercentage = 0.0;
        }

        return mDouAchivedPercentage;
    }

    /*Returns KPI set GUID  based on current month and year */
    public static ArrayList<MyTargetsBean> getKpiSetGuidList(String kpiQry, String mStrDmsDivQry) throws OfflineODataStoreException {

        ArrayList<MyTargetsBean> kpiArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MyTargetsBean kpiBean;
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, kpiQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {
                    kpiBean = new MyTargetsBean();
                    properties = entity.getProperties();
                    String mStrRollUp = "";
                    property = properties.get(Constants.KPIGUID);
                    ODataGuid kpiGuid = null;
                    try {
                        kpiGuid = (ODataGuid) property.getValue();
                        kpiBean.setKpiGuid(kpiGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
//                    String activityStatusForVisitQry = Constants.KPIItems + "?$top=1 &$filter=" + Constants.KPIGUID
//                            + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "' and " + mStrDmsDivQry + "";
                    String activityStatusForVisitQry = Constants.KPIItems + "?$top=1 &$filter=" + Constants.KPIGUID
                            + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "' ";
                    if (getVisitActivityStatusForVisit(activityStatusForVisitQry)) {

                        /*mStrRollUp = getValueByColumnName(Constants.KPIItems + "?$select=" + Constants.RollUpTo + " &$filter = "
                                + Constants.KPIGUID + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "'", Constants.RollUpTo);
                        kpiBean.setRollUpTo(mStrRollUp);*/
                        kpiBean.setRollUpTo("");

                        property = properties.get(Constants.KPIName);
                        kpiBean.setKPIName((String) property.getValue());

                        property = properties.get(Constants.KPICode);
                        kpiBean.setKPICode((String) property.getValue());

                        property = properties.get(Constants.KPIFor);
                        kpiBean.setKPIFor((String) property.getValue());

                        property = properties.get(Constants.CalculationSource);
                        kpiBean.setCalculationSource((String) property.getValue());

                        property = properties.get(Constants.CalculationBase);
                        kpiBean.setCalculationBase((String) property.getValue());

                        property = properties.get(Constants.KPICategory);
                        kpiBean.setKPICategory((String) property.getValue());


                        kpiArrayList.add(kpiBean);
                    }

                }
            }


        }

        return kpiArrayList;


    }

    /**
     * Returns VisitActivity status for selected visit from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getVisitActivityStatusForVisit(String strQry) throws OfflineODataStoreException {

        boolean mBooleanVisitStatus = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        mBooleanVisitStatus = true;
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mBooleanVisitStatus;

    }

    /*Returns list of target item for sales person*/
    public static ArrayList<MyTargetsBean> getMyTargets(ArrayList<MyTargetsBean> arrayList, String mStrSPGuid) throws OfflineODataStoreException {
        ArrayList<MyTargetsBean> myTargetList = new ArrayList<>();
        for (int incVal = 0; incVal < arrayList.size(); incVal++) {
            String qryTargets = Constants.Targets + "?$filter=" + Constants.KPIGUID + " eq guid'"
                    + arrayList.get(incVal).getKpiGuid() + "'";
            ArrayList<MyTargetsBean> myTargetsBeanArrayList = OfflineManager.getMyTargetsList(qryTargets, mStrSPGuid,
                    arrayList.get(incVal).getKPIName(), arrayList.get(incVal).getKPICode(), arrayList.get(incVal).getKpiGuid(),
                    arrayList.get(incVal).getCalculationBase(), arrayList.get(incVal).getKPIFor(),
                    arrayList.get(incVal).getCalculationSource(), arrayList.get(incVal).getRollUpTo());
            if (myTargetsBeanArrayList != null && myTargetsBeanArrayList.size() > 0) {
                if (myTargetList != null && myTargetList.size() > 0) {
                    myTargetList.addAll(myTargetList.size(), myTargetsBeanArrayList);
                } else {
                    myTargetList.addAll(myTargetsBeanArrayList);
                }
            } else {
                MyTargetsBean targetsBean = new MyTargetsBean();
                targetsBean.setKPICode(arrayList.get(incVal).getKPICode());
                targetsBean.setKPIName(arrayList.get(incVal).getKPIName());
                targetsBean.setKpiGuid(arrayList.get(incVal).getKpiGuid());
                targetsBean.setCalculationBase(arrayList.get(incVal).getCalculationBase());
                targetsBean.setCalculationSource(arrayList.get(incVal).getCalculationBase());
                targetsBean.setKPIFor(arrayList.get(incVal).getKPIFor());
                targetsBean.setMonthTarget("0");
                targetsBean.setMTDA("0");
                targetsBean.setAchivedPercentage("0");
                targetsBean.setBTD("0");
                myTargetList.add(targetsBean);


            }
        }

        return myTargetList;
    }

    /*Returns list of target item for sales person*/
    public static ArrayList<MyTargetsBean> getMyTargetsList(String myTargetQry, String mStrSPGuid,
                                                            String mStrKpiName, String mStrKpiCode, String mStrKpiGuid,
                                                            String mStrCalBase, String mStrKpiFor, String mStrCalSource
            , String mStrRollUPto) throws OfflineODataStoreException {

        ArrayList<MyTargetsBean> myTargetList = new ArrayList<>();


        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MyTargetsBean myTargetBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, myTargetQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {

                    properties = entity.getProperties();

                    property = properties.get(Constants.TargetGUID);
                    ODataGuid mTargetGuid = null;
                    try {
                        mTargetGuid = (ODataGuid) property.getValue();

                    } catch (Exception e) {
                        e.printStackTrace();
                    }


                    ArrayList<MyTargetsBean> arrayList = getMyTargetItemsList(mTargetGuid.guidAsString36(), mStrSPGuid,
                            mStrCalBase, mStrRollUPto, mStrKpiName, mStrKpiGuid);

                    if (myTargetList != null && myTargetList.size() > 0) {
                        if (arrayList != null && arrayList.size() > 0) {
                            myTargetList.addAll(myTargetList.size(), arrayList);
                        }
                    } else {
                        if (arrayList != null && arrayList.size() > 0) {
                            myTargetList.addAll(arrayList);
                        }
                    }
                }
            }
        }

        return myTargetList;

    }

    public static ArrayList<MyTargetsBean> getMyTargetItemsList(String targetGuid, String mSPGuid,
                                                                String mStrCalBase, String mStrRollUp,
                                                                String mStrKpiName, String mStrKpiGuid) {
        ArrayList<MyTargetsBean> arrayList = new ArrayList<>();
        List<ODataEntity> entities = null;

        String mStrTargetQry = "", mSelectQry = "";

        try {

            if (getVisitStatusForCustomer("" + Constants.TargetItems +
                    "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " eq '" + mSPGuid + "' and "
                    + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase() + "' ")) {

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc;
                } else {

                    mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc;
                }


                mStrTargetQry = Constants.TargetItems +
                        "?$select=" + mSelectQry + " &$filter=" + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase()
                        + "' and " + Constants.PartnerGUID + " eq '" + mSPGuid + "'";

            } else if (getVisitStatusForCustomer("" + Constants.TargetItems +
                    "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " ne '" + mSPGuid + "' and "
                    + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase() + "' ")) {
//				if (mStrRollUp.equalsIgnoreCase("02")) {

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc;
                } else {

                    mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc;
                }

                mStrTargetQry = Constants.TargetItems +
                        "?$select=" + mSelectQry + " &$filter=" + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase()
                        + "' and " + Constants.PartnerGUID + " ne '" + mSPGuid + "'";
//				}
            }
        } catch (Exception e) {
            e.printStackTrace();
        }


        try {
            if (mStrTargetQry != null && !mStrTargetQry.equalsIgnoreCase("")) {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrTargetQry);
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();


                MyTargetsBean myTargetBean = new MyTargetsBean();

                String monthTarget = "", actualTarget = "";
                Double mDobTargetQty = 0.0, mDobActQty = 0.0;
                if (mStrCalBase.equalsIgnoreCase("01")) {


                    property = properties.get(Constants.TargetQty);
                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobTargetQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobTargetQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                        mDobTargetQty = 0.0;
                    }
                    monthTarget = mDobTargetQty + "";
                    property = properties.get(Constants.ActualQty);

                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobActQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobActQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                        mDobActQty = 0.0;
                    }
                    actualTarget = mDobActQty + "";
                } else {

                    property = properties.get(Constants.TargetValue);
                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobTargetQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobTargetQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                        mDobTargetQty = 0.0;
                    }
                    monthTarget = mDobTargetQty + "";

                    property = properties.get(Constants.ActualValue);

                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobActQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobActQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                        mDobActQty = 0.0;
                    }
                    actualTarget = mDobActQty + "";
                }

                if (monthTarget != null) {
                    myTargetBean.setMonthTarget(!monthTarget.toString().equalsIgnoreCase("") ? monthTarget.toString() : "0");
                } else {
                    myTargetBean.setMonthTarget("0");
                }

                if (actualTarget != null) {
                    myTargetBean.setMTDA(!actualTarget.toString().equalsIgnoreCase("") ? actualTarget.toString() : "0");
                } else {
                    myTargetBean.setMTDA("0");
                }

                double mDouAchivedPercentage = getAchivedPer(monthTarget, actualTarget);

                double mDoubBTD = getBTD(monthTarget, actualTarget);

                myTargetBean.setAchivedPercentage(mDouAchivedPercentage + "");
                myTargetBean.setBTD(mDoubBTD + "");

                property = properties.get(Constants.MaterialNo);
                myTargetBean.setMaterialNo((String) property.getValue());

                property = properties.get(Constants.MaterialDesc);
                myTargetBean.setMaterialDesc((String) property.getValue());

                property = properties.get(Constants.MaterialGroup);
                myTargetBean.setMaterialGroup((String) property.getValue());

                property = properties.get(Constants.MaterialGrpDesc);
                myTargetBean.setMaterialGrpDesc((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupID);
                myTargetBean.setOrderMaterialGroupID((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupDesc);
                myTargetBean.setOrderMaterialGroupDesc((String) property.getValue());

                myTargetBean.setKPIName(mStrKpiName);

                property = properties.get(Constants.KPICode);
                String mStrKpiCodeVal = (String) property.getValue();

                myTargetBean.setKPICode(mStrKpiCodeVal);

                myTargetBean.setKpiGuid(mStrKpiGuid);

                arrayList.add(myTargetBean);
            }
        }
        return arrayList;
    }

    public static List<ConfigTypesetTypesBean> getStatusConfig(String query, String defaultValue) throws OfflineODataStoreException {
        ArrayList<ConfigTypesetTypesBean> configTypesetTypesBeanArrayList = new ArrayList<>();
        ConfigTypesetTypesBean configTypesetTypesBean;
        if (TextUtils.isEmpty(defaultValue)) {
            configTypesetTypesBean = new ConfigTypesetTypesBean();
            configTypesetTypesBean.setTypes("");
            configTypesetTypesBean.setTypesName(defaultValue);
            configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
        }

        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        configTypesetTypesBean = new ConfigTypesetTypesBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Description);
                        configTypesetTypesBean.setTypeName((String) property.getValue());

                        property = properties.get(Constants.ID);
                        configTypesetTypesBean.setTypes((String) property.getValue());

                        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configTypesetTypesBeanArrayList;
    }

    public static ArrayList<RetailerBean> getBehavoiurList(String retListQry,String statusId) throws OfflineODataStoreException {

        ArrayList<RetailerBean> retailerList = new ArrayList<RetailerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            RetailerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPNo);
                        retBean = new RetailerBean((String) property.getValue());

                        property = properties.get(Constants.CPName);
                        retBean.setRetailerName((String) property.getValue());

                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.TownDesc);
                        retBean.setTownDesc((String) property.getValue());
                        property = properties.get(Constants.CPMobileNo);
                        retBean.setMobileNumber((String) property.getValue());

                        property = properties.get(Constants.PurchaseAmount);
                        if (property != null) {
                            BigDecimal mStrQty = (BigDecimal) property.getValue();
                            retBean.setPurchaseAmount(mStrQty.toString());
                        }else{
                            retBean.setPurchaseAmount("0.0");
                        }

                        property = properties.get(Constants.UOM);
                        retBean.setUOM(property.getValue().toString());


                        property = properties.get(Constants.SequenceNo);
                        if (property != null)
                            retBean.setSequenceNo(property.getValue().toString());

                        property = properties.get(Constants.Currency);
                        if (property != null)
                            retBean.setCurrency(property.getValue().toString());

                        property = properties.get(Constants.DistrictID);
                        if (property != null)
                            retBean.setDistrict(property.getValue().toString());

                        property = properties.get(Constants.PostalCode);
                        if (property != null)
                            retBean.setPostalCode(property.getValue().toString());

                        retBean.setNameNumber(retBean.getCustomerId() + retBean.getRetailerName());
                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }



        if("000002".equalsIgnoreCase(statusId)){
            Collections.sort(retailerList, new Comparator<RetailerBean>() {
                public int compare(RetailerBean one, RetailerBean other) {
                    return Double.valueOf(one.getPurchaseAmount()).compareTo(Double.valueOf(other.getPurchaseAmount()));
                }
            });
        }else  if ("000004".equals(statusId)){
            Collections.sort(retailerList, new Comparator<RetailerBean>() {
                public int compare(RetailerBean one, RetailerBean other) {
                    return one.getRetailerName().toUpperCase().compareTo(other.getRetailerName().toUpperCase());
                }
            });

        }/*else{
            Collections.sort(retailerList, new Comparator<RetailerBean>() {
                public int compare(RetailerBean one, RetailerBean other) {
                    return one.getPurchaseAmount().compareTo(other.getPurchaseAmount());
                }
            });
        }*/




        return retailerList;

    }

    public static ArrayList<RetailerBean> getTodayBeatRetailer(String cpguidQry, HashMap<String, String> mMapCPSeqNo) throws OfflineODataStoreException {
        ArrayList<RetailerBean> alRetailerList = new ArrayList<>();
        if (!cpguidQry.equalsIgnoreCase("")) {
            List<RetailerBean> listRetailers = OfflineManager.getRetailerListFromRouteSchudle(Constants.ChannelPartners + "?$select=" + Constants.CPNo + ","
                    + Constants.RetailerName + "," + Constants.Address1 + "," + Constants.Address2 + "," + Constants.Address3 + "," + Constants.TownDesc + ","
                    + Constants.DistrictDesc + "," + Constants.Landmark + "," + Constants.Latitude + "," + Constants.Longitude + "," + Constants.CityDesc + ","
                    + Constants.PostalCode + "," + Constants.MobileNo + ","+Constants.ParentID+"," + Constants.CPUID + "," + Constants.CPGUID + "," + Constants.DOB + ","
                    + Constants.Anniversary + "," + Constants.OwnerName + "," + Constants.ZZVisitFlag + " " + "&$filter=(" +
                    Constants.CPGUID + " eq " + cpguidQry + ") and " + Constants.StatusID + " eq '01' and " + Constants.ApprvlStatusID + " eq '03' ", "", mMapCPSeqNo);
            alRetailerList = (ArrayList<RetailerBean>) listRetailers;
        }

        return alRetailerList;
    }

    public static ArrayList<RetailerBean> getTodayBeatListRetailer(String cpguidQry, HashMap<String, String> mMapCPSeqNo,String routeGuid) throws OfflineODataStoreException {
        ArrayList<RetailerBean> alRetailerList = new ArrayList<>();
        if (!cpguidQry.equalsIgnoreCase("")) {
            List<RetailerBean> listRetailers = OfflineManager.getRetailerListFromRouteSchudles(Constants.ChannelPartners + "?$select=" + Constants.CPNo + ","
                    + Constants.RetailerName + "," + Constants.Address1 + "," + Constants.Address2 + "," + Constants.Address3 + "," + Constants.TownDesc + ","
                    + Constants.DistrictDesc + "," + Constants.Landmark + ","+Constants.ParentID+"," + Constants.Latitude + "," + Constants.Longitude + "," + Constants.CityDesc + ","
                    + Constants.PostalCode + "," + Constants.MobileNo + "," + Constants.CPUID + "," + Constants.CPGUID + "," + Constants.DOB + ","
                    + Constants.Anniversary + "," + Constants.OwnerName + "," + Constants.ZZVisitFlag + " " + "&$filter=(" +
                    Constants.CPGUID + " eq " + cpguidQry + ") and " + Constants.StatusID + " eq '01' and " + Constants.ApprvlStatusID + " eq '03' ", "", mMapCPSeqNo,routeGuid);
            alRetailerList = (ArrayList<RetailerBean>) listRetailers;
        }

        return alRetailerList;
    }

    public static ArrayList<RetailerBean> getRetailerListFromRouteSchudle(String retListQry, String mComingFrom,
                                                                          HashMap<String, String> mapCPSeq) throws OfflineODataStoreException {

        ArrayList<RetailerBean> retailerList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            RetailerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPNo);
                        retBean = new RetailerBean((String) property.getValue());
                        retBean.setCPNo((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        ODataGuid mCpGuid = null;
                        try {
                            mCpGuid = (ODataGuid) property.getValue();
                            retBean.setCPGUID(mCpGuid.guidAsString36().toUpperCase());
                            retBean.setCpGuidStringFormat(mCpGuid.guidAsString32().toUpperCase() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        String mStrTimeTakenVal = "";
                        property = properties.get(Constants.RetailerName);
                        retBean.setRetailerName((String) property.getValue());
                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.TownDesc);
                        retBean.setTownDesc((String) property.getValue());

                        property = properties.get(Constants.DistrictDesc);
                        retBean.setDistrictDesc((String) property.getValue());
                        property = properties.get(Constants.ParentID);
                        retBean.setParentID((String) property.getValue());

                        property = properties.get(Constants.Landmark);
                        retBean.setLandMark((String) property.getValue());

                        property = properties.get(Constants.Latitude);
                        BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                        if (mDecimalLatitude != null) {
                            retBean.setLatVal(mDecimalLatitude.doubleValue());
                        } else {
                            retBean.setLatVal(0.0);
                        }

                        property = properties.get(Constants.Longitude);
                        BigDecimal mDecimalLongitude = (BigDecimal) property.getValue();  //---------> Decimal property

                        if (mDecimalLongitude != null) {
                            retBean.setLongVal(mDecimalLongitude.doubleValue());
                        } else {
                            retBean.setLongVal(0.0);
                        }

                        property = properties.get(Constants.CityDesc);
                        retBean.setCity((String) property.getValue());

                        property = properties.get(Constants.PostalCode);
                        retBean.setPostalCode((String) property.getValue());

                        property = properties.get(Constants.MobileNo);
                        retBean.setMobileNumber((String) property.getValue());

                        property = properties.get(Constants.CPUID);
                        retBean.setUID((String) property.getValue());


                        property = properties.get(Constants.DOB);
                        retBean.setCustDOB(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        property = properties.get(Constants.Anniversary);
                        retBean.setAnniversary(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        property = properties.get(Constants.OwnerName);
                        retBean.setOwnerName((String) property.getValue());



                        retBean.setEditResourceURL(entity.getEditResourcePath());
                        retBean.setIsAddressEnabled(false);
                        try {
                            if(properties.get(Constants.ZZVisitFlag)!=null) {
                                property = properties.get(Constants.ZZVisitFlag);
                                if(property!=null)
                                    retBean.setZZVisitFlag((String) property.getValue());
                                else
                                    retBean.setZZVisitFlag("");
                            }
                        }catch (Exception e){
                            e.printStackTrace();
                        }

                        retailerList.add(retBean);

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        Collections.sort(retailerList, new Comparator<RetailerBean>() {
            @Override
            public int compare(RetailerBean retailerBean, RetailerBean t1) {
                return retailerBean.getRetailerName().toLowerCase().compareTo(t1.getRetailerName().toLowerCase());
            }
        });

        return retailerList;

    }

    public static ArrayList<RetailerBean> getRetailerListFromRouteSchudles(String retListQry, String mComingFrom,
                                                                          HashMap<String, String> mapCPSeq,String routeGuid) throws OfflineODataStoreException {

        ArrayList<RetailerBean> retailerList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            RetailerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPNo);
                        retBean = new RetailerBean((String) property.getValue());
                        retBean.setCPNo((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        ODataGuid mCpGuid = null;
                        try {
                            mCpGuid = (ODataGuid) property.getValue();
                            retBean.setCPGUID(mCpGuid.guidAsString36().toUpperCase());
                            retBean.setCpGuidStringFormat(mCpGuid.guidAsString32().toUpperCase() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        String mStrTimeTakenVal = "";
                        property = properties.get(Constants.RetailerName);
                        retBean.setRetailerName((String) property.getValue());
                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.TownDesc);
                        retBean.setTownDesc((String) property.getValue());

                        property = properties.get(Constants.DistrictDesc);
                        retBean.setDistrictDesc((String) property.getValue());

                        property = properties.get(Constants.Landmark);
                        retBean.setLandMark((String) property.getValue());

                        property = properties.get(Constants.Latitude);
                        BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                        if (mDecimalLatitude != null) {
                            retBean.setLatVal(mDecimalLatitude.doubleValue());
                        } else {
                            retBean.setLatVal(0.0);
                        }

                        property = properties.get(Constants.Longitude);
                        BigDecimal mDecimalLongitude = (BigDecimal) property.getValue();  //---------> Decimal property

                        if (mDecimalLongitude != null) {
                            retBean.setLongVal(mDecimalLongitude.doubleValue());
                        } else {
                            retBean.setLongVal(0.0);
                        }

                        property = properties.get(Constants.CityDesc);
                        retBean.setCity((String) property.getValue());

                        property = properties.get(Constants.PostalCode);
                        retBean.setPostalCode((String) property.getValue());
                        property = properties.get(Constants.ParentID);
                        retBean.setParentID((String) property.getValue());

                        property = properties.get(Constants.MobileNo);
                        retBean.setMobileNumber((String) property.getValue());

                        property = properties.get(Constants.CPUID);
                        retBean.setUID((String) property.getValue());


                        property = properties.get(Constants.DOB);
                        retBean.setCustDOB(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        property = properties.get(Constants.Anniversary);
                        retBean.setAnniversary(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        property = properties.get(Constants.OwnerName);
                        retBean.setOwnerName((String) property.getValue());



                        retBean.setEditResourceURL(entity.getEditResourcePath());
                        retBean.setIsAddressEnabled(false);
                        try {
                            if(properties.get(Constants.ZZVisitFlag)!=null) {
                                property = properties.get(Constants.ZZVisitFlag);
                                if(property!=null)
                                    retBean.setZZVisitFlag((String) property.getValue());
                                else
                                    retBean.setZZVisitFlag("");
                            }
                        }catch (Exception e){
                            e.printStackTrace();
                        }

                        retBean.setRouteGuid32(routeGuid.replaceAll("-",""));
                        retBean.setRouteGuid36(routeGuid);
                        retailerList.add(retBean);

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        Collections.sort(retailerList, new Comparator<RetailerBean>() {
            @Override
            public int compare(RetailerBean retailerBean, RetailerBean t1) {
                return retailerBean.getRetailerName().toLowerCase().compareTo(t1.getRetailerName().toLowerCase());
            }
        });

        return retailerList;

    }

    public static ArrayList<RetailerBean> getTodayRoutes1(String qry, String mDistGUID) throws OfflineODataStoreException {

        ArrayList<RetailerBean> routeList = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    int i = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();
                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                            RetailerBean routeBean = new RetailerBean("");
                            property = properties.get(Constants.RoutSchScope);
                            routeBean.setRoutSchScope((String) property.getValue());
                            property = properties.get(Constants.RoutePlanKey);
                            routeBean.setRoutePlanKey((String) property.getValue());
                            String qryForTodaysBeat = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID
                                    + " eq guid'" + RschGuid.guidAsString36().toUpperCase() + "' and ApprovalStatus eq '03' and StatusID eq '01'";
                            if (!TextUtils.isEmpty(mDistGUID)) {
                                qryForTodaysBeat = qryForTodaysBeat + " and " + Constants.CPGUID + " eq '" + mDistGUID + "'";
                            }
                            List<RetailerBean> listRouteNames = OfflineManager.getOtherBeatList(qryForTodaysBeat, true);
                            if (listRouteNames != null && listRouteNames.size() > 0) {
                                routeBean.setRouteID(listRouteNames.get(0).getRouteID());
                                routeBean.setRouteDesc(listRouteNames.get(0).getRouteDesc());
                                routeBean.setRschGuid(listRouteNames.get(0).getRschGuid());
                                Constants.mSetTodayRouteSch.add(listRouteNames.get(0).getRschGuid());
                                routeBean.setRschGuid32(listRouteNames.get(0).getRschGuid32());

                                routeList.add(routeBean);
                            }
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return routeList;
    }

    public static ArrayList<RetailerBean> getOtherBeatList(String retListQry, boolean isTodayBeat) throws OfflineODataStoreException {

        ArrayList<RetailerBean> retailerList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            RetailerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RoutId);

                        retBean = new RetailerBean((String) property.getValue());
                        retBean.setRouteID((String) property.getValue());
                        property = properties.get(Constants.Description);
                        retBean.setRouteDesc((String) property.getValue());
                        property = properties.get(Constants.RouteSchGUID);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            retBean.setRschGuid(mCpGuid.guidAsString36().toUpperCase());
                            retBean.setRschGuid32(mCpGuid.guidAsString32().toUpperCase() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (!isTodayBeat) {
                            retBean.setRoutSchScope("OtherBeat");
                        }
                        retBean.setEditResourceURL(entity.getEditResourcePath());
                        retBean.setIsAddressEnabled(false);
                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    public static String getBeatList(String retListQry) throws OfflineODataStoreException {

        Constants.mMapCPSeqNo.clear();
        String mCPGuid = "", cpguidQry = "";

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.SequenceNo);
                        String mSeqNo = (String) property.getValue();

                        property = properties.get(Constants.VisitCPGUID);
                        mCPGuid = Constants.convertStrGUID32to36((String) property.getValue()).toUpperCase();
                        try {
                            Constants.mMapCPSeqNo.put((String) property.getValue(), mSeqNo);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (cpguidQry.length() == 0)
                            cpguidQry += " guid'" + mCPGuid + "'";
                        else
                            cpguidQry += " or " + Constants.CPGUID + " eq guid'" + mCPGuid + "'";

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return cpguidQry;

    }

    public static DmsDivQryBean getDMSDIVQry(String cpspQry) throws OfflineODataStoreException {

        String mDMSDIV = "", mDMSDIVQry = "", mDMSCVGQry = "", mDMSDIVIDQry = "", mDMSDIVSSINVQry = "";
        DmsDivQryBean dmsDivQry = new DmsDivQryBean();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpspQry);

            if (entities != null && entities.size() > 0) {

                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.DMSDivisionID);
                    if(property!=null) {
                        mDMSDIV = (String) property.getValue();
                        if (mDMSDIVQry.length() == 0) {
                            mDMSDIVQry = mDMSDIVQry + "startswith(" + Constants.DMSDivision + ",'" + mDMSDIV + "')";
                            mDMSCVGQry = mDMSCVGQry + "startswith(" + Constants.CvgValue + ",'" + mDMSDIV + "')";
                            mDMSDIVSSINVQry = mDMSDIVSSINVQry + "startswith(" + Constants.DmsDivision + ",'" + mDMSDIV + "')";
                            mDMSDIVIDQry = mDMSDIVIDQry + "startswith(" + Constants.DMSDivisionID + ",'" + mDMSDIV + "')";
                        } else {
                            mDMSDIVQry = mDMSDIVQry + " or startswith(" + Constants.DMSDivision + ",'" + mDMSDIV + "')";
                            mDMSCVGQry = mDMSCVGQry + " or startswith(" + Constants.CvgValue + ",'" + mDMSDIV + "')";
                            mDMSDIVSSINVQry = mDMSDIVSSINVQry + " or startswith(" + Constants.DmsDivision + ",'" + mDMSDIV + "')";
                            mDMSDIVIDQry = mDMSDIVIDQry + " or startswith(" + Constants.DMSDivisionID + ",'" + mDMSDIV + "')";
                        }
                    }
                }
            }
        }

        if (!mDMSDIVQry.equalsIgnoreCase("")) {
            dmsDivQry.setDMSDivisionQry("(" + mDMSDIVQry + ")");  // CPStockItems ,Brands,BrandCategories,MaterialCategories,CPDMSDivisions
            dmsDivQry.setCVGValueQry("(" + mDMSCVGQry + ")");  // KPIItems
            dmsDivQry.setDMSDivisionSSInvQry("(" + mDMSDIVSSINVQry + ")");   // SSInvoices
            dmsDivQry.setDMSDivisionIDQry("(" + mDMSDIVIDQry + ")");  // Scheme sales area
        } else {
            dmsDivQry.setDMSDivisionQry("(startswith(" + Constants.DMSDivision + ",''))");  // CPStockItems ,Brands,BrandCategories,MaterialCategories,CPDMSDivisions
            dmsDivQry.setCVGValueQry("(startswith(" + Constants.CvgValue + ",''))");  // KPIItems
            dmsDivQry.setDMSDivisionSSInvQry("(startswith(" + Constants.DmsDivision + ",''))");   // SSInvoices
            dmsDivQry.setDMSDivisionIDQry("(startswith(" + Constants.DMSDivisionID + ",''))");  // Scheme sales area
        }

        return dmsDivQry;
    }

    public static DmsDivQryBean getDMSDIVQryForSchemes(String cpspQry) throws OfflineODataStoreException {

        String mDMSDIV = "", mDMSDIVQry = "", mDMSCVGQry = "", mDMSDIVIDQry = "", mDMSDIVSSINVQry = "";
        DmsDivQryBean dmsDivQry = new DmsDivQryBean();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpspQry);

            if (entities != null && entities.size() > 0) {

                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.DMSDivisionID);
                    if(property!=null) {
                        mDMSDIV = (String) property.getValue();
                        if (mDMSDIVQry.length() == 0) {
                            mDMSDIVQry = mDMSDIVQry + "startswith(" + Constants.DMSDivision + ",'" + mDMSDIV + "')";
                            mDMSCVGQry = mDMSCVGQry + "startswith(" + Constants.CvgValue + ",'" + mDMSDIV + "')";
                            mDMSDIVSSINVQry = mDMSDIVSSINVQry + "startswith(" + Constants.DmsDivision + ",'" + mDMSDIV + "')";
                            mDMSDIVIDQry = mDMSDIVIDQry + "startswith(" + Constants.DivisionID + ",'" + mDMSDIV + "')";
                        } else {
                            mDMSDIVQry = mDMSDIVQry + " or startswith(" + Constants.DMSDivision + ",'" + mDMSDIV + "')";
                            mDMSCVGQry = mDMSCVGQry + " or startswith(" + Constants.CvgValue + ",'" + mDMSDIV + "')";
                            mDMSDIVSSINVQry = mDMSDIVSSINVQry + " or startswith(" + Constants.DmsDivision + ",'" + mDMSDIV + "')";
                            mDMSDIVIDQry = mDMSDIVIDQry + " or startswith(" + Constants.DivisionID + ",'" + mDMSDIV + "')";
                        }
                    }
                }
            }
        }

        if (!mDMSDIVQry.equalsIgnoreCase("")) {
            dmsDivQry.setDMSDivisionQry("(" + mDMSDIVQry + ")");  // CPStockItems ,Brands,BrandCategories,MaterialCategories,CPDMSDivisions
            dmsDivQry.setCVGValueQry("(" + mDMSCVGQry + ")");  // KPIItems
            dmsDivQry.setDMSDivisionSSInvQry("(" + mDMSDIVSSINVQry + ")");   // SSInvoices
            dmsDivQry.setDMSDivisionIDQry("(" + mDMSDIVIDQry + ")");  // Scheme sales area
        } else {
            dmsDivQry.setDMSDivisionQry("(startswith(" + Constants.DMSDivision + ",''))");  // CPStockItems ,Brands,BrandCategories,MaterialCategories,CPDMSDivisions
            dmsDivQry.setCVGValueQry("(startswith(" + Constants.CvgValue + ",''))");  // KPIItems
            dmsDivQry.setDMSDivisionSSInvQry("(startswith(" + Constants.DmsDivision + ",''))");   // SSInvoices
            dmsDivQry.setDMSDivisionIDQry("(startswith(" + Constants.DivisionID + ",''))");  // Scheme sales area
        }

        return dmsDivQry;
    }


    public static int getBalanceRetVisitRoute(String qry) throws OfflineODataStoreException {


        int mIntBalRetailerVisit = 0;

        ArrayList<RoutePlanBean> routeAlList = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                try {
                    properties = entity.getProperties();

                    RoutePlanBean routePlanBean = new RoutePlanBean();

                    property = properties.get(Constants.RouteSchGUID);
                    try {
                        ODataGuid mRouteSchGuid = (ODataGuid) property.getValue();
                        routePlanBean.setRschGuid(mRouteSchGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.DayOfWeek);
                    routePlanBean.setDOW((String) property.getValue());
                    property = properties.get(Constants.DayOfMonth);
                    routePlanBean.setDOM((String) property.getValue());
                    routeAlList.add(routePlanBean);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }


        String mStrRouteQry = "";
        if (routeAlList != null && routeAlList.size() > 0) {
            for (int i = 0; i < routeAlList.size(); i++) {
                if (i == 0 && i == routeAlList.size() - 1) {
                    mStrRouteQry = mStrRouteQry
                            + "(" + Constants.RschGuid + "%20eq%20guid'"
                            + routeAlList.get(i).getRschGuid() + "' )";

                } else if (i == 0) {
                    mStrRouteQry = mStrRouteQry
                            + "((" + Constants.RschGuid + "%20eq%20guid'"
                            + routeAlList.get(i).getRschGuid() + "' )";

                } else if (i == routeAlList.size() - 1) {
                    mStrRouteQry = mStrRouteQry
                            + "%20or%20(" + Constants.RschGuid + "%20eq%20guid'"
                            + routeAlList.get(i).getRschGuid() + "' ))";
                } else {
                    mStrRouteQry = mStrRouteQry
                            + "%20or%20(" + Constants.RschGuid + "%20eq%20guid'"
                            + routeAlList.get(i).getRschGuid() + "' ) ";
                }
            }

        }

        if (!mStrRouteQry.equalsIgnoreCase("")) {
            String mStrBalVisitQry = Constants.RoutePlans + "?$filter = " + mStrRouteQry + " " +
                    "and " + Constants.VisitDate + " ge datetime'" + UtilConstants.getNewDate() + "' " +
                    "and  " + Constants.VisitDate + " le datetime'" + Constants.getLastDateOfCurrentMonth() + "' ";
            List<ODataEntity> entitiesBalVisit = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrBalVisitQry);
            if (entitiesBalVisit != null && entitiesBalVisit.size() > 0) {
                mIntBalRetailerVisit = entitiesBalVisit.size();
            }
        }

        return mIntBalRetailerVisit;

    }

    public static double getDeviceTotalOrderAmt(String createType, Context context, String mStrCurrentDate, ArrayList<String> alTodayRet) {

        double mDoubleDevOrderValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        if(store!=null) {
                            JSONObject fetchJsonHeaderObject = new JSONObject(store);
                            String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                            if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                    && createdOn[0].equalsIgnoreCase(splitToday[0])/* && alTodayRet.contains(fetchJsonHeaderObject.getString(Constants.SoldToId))*/) {
                                mDoubleDevOrderValue = mDoubleDevOrderValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.NetPrice));
                            }
                        }
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrderValue;
    }

    public static double getTLSD(String createType, Context context, String mStrCurrentDate, ArrayList<String> alTodayRet) {

        double mDoubleDevTLSDValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRet.contains(fetchJsonHeaderObject.getString(Constants.CPNo))) {
                            mDoubleDevTLSDValue = mDoubleDevTLSDValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.TLSD));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevTLSDValue;
    }

    public static String makeSSSOQry(String sssoQry, String guidColumn) throws OfflineODataStoreException {

        String sssosListQry = "";
        ArrayList<InvoiceHistoryBean> sssoArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, sssoQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    try {
                        invoiceBean = new InvoiceHistoryBean();
                        properties = entity.getProperties();
                        property = properties.get(guidColumn);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            invoiceBean.setInvoiceGuid(mInvoiceGUID.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        sssoArrayList.add(invoiceBean);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            }
        }


        if (sssoArrayList != null && sssoArrayList.size() > 0) {
            for (int incVal = 0; incVal < sssoArrayList.size(); incVal++) {
                if (incVal == 0 && incVal == sssoArrayList.size() - 1) {
                    sssosListQry = sssosListQry
                            + "(" + guidColumn + "%20eq%20guid'"
                            + sssoArrayList.get(incVal).getInvoiceGuid().toUpperCase() + "')";

                } else if (incVal == 0) {
                    sssosListQry = sssosListQry
                            + "(" + guidColumn + "%20eq%20guid'"
                            + sssoArrayList.get(incVal).getInvoiceGuid().toUpperCase() + "'";

                } else if (incVal == sssoArrayList.size() - 1) {
                    sssosListQry = sssosListQry
                            + "%20or%20" + guidColumn + "%20eq%20guid'"
                            + sssoArrayList.get(incVal).getInvoiceGuid().toUpperCase() + "')";
                } else {
                    sssosListQry = sssosListQry
                            + "%20or%20" + guidColumn + "%20eq%20guid'"
                            + sssoArrayList.get(incVal).getInvoiceGuid().toUpperCase() + "'";
                }
            }
        } else {
            sssosListQry = "";
        }

        return sssosListQry;
    }

    public static String getCountTLSDFromDatabase(String ssoItemListQry) throws OfflineODataStoreException {
        int countOfTLSd = 0;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, ssoItemListQry);
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            countOfTLSd = entities.size();
        }
        return countOfTLSd + "";
    }

    public static int getUniqueBillCut(String createType, Context context, String mStrCurrentDate,
                                       ArrayList<String> alTodayRet, String mQry, String mColumnName) {

        ArrayList<String> alRetUiqueBillCount = new ArrayList<>();
        int mIntDevUniqueBillCutValue = 0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRet.contains(fetchJsonHeaderObject.getString(Constants.CPNo))) {
                            if (!alRetUiqueBillCount.contains(fetchJsonHeaderObject.getString(Constants.CPNo))) {
                                alRetUiqueBillCount.add(fetchJsonHeaderObject.getString(Constants.CPNo));
                            }

                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }

        ODataProperty property;
        ODataPropMap properties;
        if (!Constants.SS_INV_RET_QRY.equalsIgnoreCase("")) {
            List<ODataEntity> entities = null;
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }

            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                try {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(mColumnName);
                        if (!alRetUiqueBillCount.contains((String) property.getValue())) {
                            alRetUiqueBillCount.add((String) property.getValue());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        if (alRetUiqueBillCount != null && alRetUiqueBillCount.size() > 0) {
            mIntDevUniqueBillCutValue = alRetUiqueBillCount.size();
        } else {
            mIntDevUniqueBillCutValue = 0;
        }

        return mIntDevUniqueBillCutValue;
    }

    public static double getDayTarget(String balTarget, String remingDays) {
        double mDouAchivedPercentage = 0.0;
        try {
            mDouAchivedPercentage = Double.parseDouble(balTarget) / Double.parseDouble(remingDays);
        } catch (NumberFormatException e) {
            mDouAchivedPercentage = 0.0;
        }

        if (Double.isNaN(mDouAchivedPercentage) || Double.isInfinite(mDouAchivedPercentage)) {
            mDouAchivedPercentage = 0.0;
        }

        return mDouAchivedPercentage;
    }

    public static void createVisit(Hashtable<String, String> table, UIListener uiListener,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createVisitEntity(table);
            //Send the request to create the new visit in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.Visits,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Visits,context),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*Create entity for visit to store in offline store*/
    private static ODataEntity createVisitEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {


                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.VISITENTITY);
                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.VISITKEY,
                        new ODataPropertyDefaultImpl(Constants.VISITKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VISITKEY))));

                if (!hashtable.get(Constants.VisitCatID).equalsIgnoreCase(Constants.str_03)) {
                    if (hashtable.get(Constants.STARTDATE) != "")
                        newEntity.getProperties().put(Constants.STARTDATE,
                                new ODataPropertyDefaultImpl(Constants.STARTDATE, UtilConstants.convertDateFormat(hashtable.get(Constants.STARTDATE))));

                    if (hashtable.get(Constants.STARTTIME) != "")
                        newEntity.getProperties().put(Constants.STARTTIME,
                                new ODataPropertyDefaultImpl(Constants.STARTTIME, hashtable.get(Constants.STARTTIME)));

                    try {
                        if (hashtable.get(Constants.StartLat) != "")
                            newEntity.getProperties().put(Constants.StartLat,
                                    new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));

                        if (hashtable.get(Constants.StartLong) != "")
                            newEntity.getProperties().put(Constants.StartLong,
                                    new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));

                try {
                    newEntity.getProperties().put(Constants.ZZDEVICE_ID,
                            new ODataPropertyDefaultImpl(Constants.ZZDEVICE_ID, hashtable.get(Constants.ZZDEVICE_ID)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.ZZPARENT,
                            new ODataPropertyDefaultImpl(Constants.ZZPARENT, hashtable.get(Constants.ZZPARENT)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashtable.get(Constants.CPName)));
                if (hashtable.get(Constants.VisitDate) != "")
                    newEntity.getProperties().put(Constants.VisitDate,
                            new ODataPropertyDefaultImpl(Constants.VisitDate, UtilConstants.convertDateFormat(hashtable.get(Constants.VisitDate))));

                newEntity.getProperties().put(Constants.StatusID,
                        new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));
                try {
                    if (hashtable.get(Constants.VisitSeq) != null) {
                        newEntity.getProperties().put(Constants.VisitSeq,
                                new ODataPropertyDefaultImpl(Constants.VisitSeq, hashtable.get(Constants.VisitSeq)));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (hashtable.get(Constants.BeatGUID) != null) {
                        newEntity.getProperties().put(Constants.BeatGUID,
                                new ODataPropertyDefaultImpl(Constants.BeatGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.BeatGUID))));

                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                if (hashtable.get(Constants.VisitCatID) != "")
                    newEntity.getProperties().put(Constants.VisitCatID,
                            new ODataPropertyDefaultImpl(Constants.VisitCatID, hashtable.get(Constants.VisitCatID)));
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID).toString()));
/*                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/


                if (hashtable.get(Constants.PlannedDate) != "")
                    newEntity.getProperties().put(Constants.PlannedDate,
                            new ODataPropertyDefaultImpl(Constants.PlannedDate, UtilConstants.convertDateFormat(hashtable.get(Constants.PlannedDate))));

                if (hashtable.get(Constants.PlannedStartTime) != "")
                    newEntity.getProperties().put(Constants.PlannedStartTime,
                            new ODataPropertyDefaultImpl(Constants.PlannedStartTime, hashtable.get(Constants.PlannedStartTime)));
                if (hashtable.get(Constants.PlannedEndTime) != "")
                    newEntity.getProperties().put(Constants.PlannedEndTime,
                            new ODataPropertyDefaultImpl(Constants.PlannedEndTime, hashtable.get(Constants.PlannedEndTime)));
                if (hashtable.get(Constants.Remarks) != "")
                    newEntity.getProperties().put(Constants.Remarks,
                            new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));

                newEntity.getProperties().put(Constants.VisitTypeID,
                        new ODataPropertyDefaultImpl(Constants.VisitTypeID, hashtable.get(Constants.VisitTypeID)));

                newEntity.getProperties().put(Constants.VisitTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.VisitTypeDesc, hashtable.get(Constants.VisitTypeDesc)));


                if (!TextUtils.isEmpty(hashtable.get(Constants.VISITKEY))) {
                    newEntity.setResourcePath(Constants.Visits + "(guid'" + hashtable.get(Constants.VISITKEY) + "')", Constants.Visits + "(guid'" + hashtable.get(Constants.VISITKEY) + "')");
                }

                if (!hashtable.get(Constants.ROUTEPLANKEY).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.ROUTEPLANKEY,
                            new ODataPropertyDefaultImpl(Constants.ROUTEPLANKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.ROUTEPLANKEY))));
                }

                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*Creates Entity to update visit in offline store*/
    private static ODataEntity updateVisitEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {

                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.VISITENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }


                try {
                    newEntity.getProperties().put(Constants.VISITKEY,
                            new ODataPropertyDefaultImpl(Constants.VISITKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VISITKEY))));
                } catch (Exception e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.STARTDATE,
                        new ODataPropertyDefaultImpl(Constants.STARTDATE, hashtable.get(Constants.STARTDATE)));

                newEntity.getProperties().put(Constants.STARTTIME,
                        new ODataPropertyDefaultImpl(Constants.STARTTIME, hashtable.get(Constants.STARTTIME)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));

                try {
                    newEntity.getProperties().put(Constants.ZZDEVICE_ID,
                            new ODataPropertyDefaultImpl(Constants.ZZDEVICE_ID, hashtable.get(Constants.ZZDEVICE_ID)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.ZZPARENT,
                            new ODataPropertyDefaultImpl(Constants.ZZPARENT, hashtable.get(Constants.ZZPARENT)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (!hashtable.get(Constants.ENDDATE).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.EndLat,
                            new ODataPropertyDefaultImpl(Constants.EndLat, hashtable.get(Constants.EndLat)));
                    newEntity.getProperties().put(Constants.EndLong,
                            new ODataPropertyDefaultImpl(Constants.EndLong, hashtable.get(Constants.EndLong)));
                    newEntity.getProperties().put(Constants.ENDDATE,
                            new ODataPropertyDefaultImpl(Constants.ENDDATE, UtilConstants.convertDateFormat(hashtable.get(Constants.ENDDATE))));

                    newEntity.getProperties().put(Constants.ENDTIME,
                            new ODataPropertyDefaultImpl(Constants.ENDTIME, hashtable.get(Constants.ENDTIME)));

                    try {

                        if (!TextUtils.isEmpty(hashtable.get(Constants.VisitDate) + "")) {
                            newEntity.getProperties().put(Constants.VisitDate,
                                    new ODataPropertyDefaultImpl(Constants.VisitDate, UtilConstants.convertDateFormat(hashtable.get(Constants.VisitDate))));
                        }
                    } catch (Exception e) {
                        if (hashtable.get(Constants.VisitDate) != null) {
                            newEntity.getProperties().put(Constants.VisitDate,
                                    new ODataPropertyDefaultImpl(Constants.VisitDate, hashtable.get(Constants.VisitDate)));
                        }
                    }

//                    if (hashtable.get(Constants.VisitDate)!=null) {
//                        newEntity.getProperties().put(Constants.VisitDate,
//                                new ODataPropertyDefaultImpl(Constants.VisitDate, hashtable.get(Constants.VisitDate)));
//                    }

                    newEntity.getProperties().put(Constants.StatusID,
                            new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));

                    try {
                        if (hashtable.get(Constants.VisitSeq) != null) {
                            newEntity.getProperties().put(Constants.VisitSeq,
                                    new ODataPropertyDefaultImpl(Constants.VisitSeq, hashtable.get(Constants.VisitSeq)));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (hashtable.get(Constants.BeatGUID) != null) {
                            newEntity.getProperties().put(Constants.BeatGUID,
                                    new ODataPropertyDefaultImpl(Constants.BeatGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.BeatGUID))));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    //new 28112016
                    newEntity.getProperties().put(Constants.Remarks,
                            new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));

                    if (hashtable.get(Constants.REASON) != null) {
                        try {
                            newEntity.getProperties().put(Constants.REASON,
                                    new ODataPropertyDefaultImpl(Constants.REASON, hashtable.get(Constants.REASON)));
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                    newEntity.getProperties().put(Constants.CPGUID,
                            new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
                }

            /*    newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/

                newEntity.getProperties().put(Constants.VisitCatID,
                        new ODataPropertyDefaultImpl(Constants.VisitCatID, hashtable.get(Constants.VisitCatID)));

                try {
                    if(!TextUtils.isEmpty(hashtable.get(Constants.CPTypeID)) && hashtable.get(Constants.CPTypeID)!= null) {
                        newEntity.getProperties().put(Constants.CPTypeID,
                                new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                    }else {
//                        String cpGuid36 = Constants.convertStrGUID32to36(hashtable.get(Constants.CPGUID));
//                        String cpTypeID = OfflineManager.getCpTypeID(Constants.ChannelPartners +"?$filter=CPGUID eq guid'"+Constants.convertStrGUID32to36(hashtable.get(Constants.CPGUID))+"'");
                        newEntity.getProperties().put(Constants.CPTypeID,
                                new ODataPropertyDefaultImpl(Constants.CPTypeID, Constants.str_02));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }


                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
                if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

                if (!hashtable.get(Constants.ROUTEPLANKEY).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.ROUTEPLANKEY,
                            new ODataPropertyDefaultImpl(Constants.ROUTEPLANKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.ROUTEPLANKEY))));
                }


                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * Update an existing visit in the local database for visit
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void updateVisit(Hashtable<String, String> table, UIListener uiListener,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateVisitEntity(table);
            //Send the request to update visit in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.Visits,context), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    public static boolean getVisitActivityDoneOrNot(HashSet<String> mSetVisitKeys, String activityType) {
        boolean mBoolVisitAct = false;
        if (mSetVisitKeys != null && mSetVisitKeys.size() > 0) {
            Iterator mapSelctedValues = mSetVisitKeys.iterator();
            while (mapSelctedValues.hasNext()) {
                String Key = (String) mapSelctedValues.next();
                String activityStatusForVisitQry = Constants.VISITACTIVITIES + "?$top=1 &$filter=" + Constants.VisitGUID
                        + " eq guid'" + Key.toUpperCase() + "' and " + Constants.ActivityType + " eq '" + activityType + "'";
                try {
                    if (getVisitActivityStatusForVisit(activityStatusForVisitQry))
                        return true;
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
            }
        } else {
            return false;
        }

        return mBoolVisitAct;
    }

    public static HashSet<String> getVisitKeysForCustomer(String strQry) throws OfflineODataStoreException {

        HashSet<String> mHashSetVisitKeys = new HashSet<>();
        boolean mBooleanVisitStatus = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        for (ODataEntity entity : entities) {
                            ODataGuid visitGuid = null;
                            properties = entity.getProperties();
                            property = properties.get(Constants.VisitGUID);
                            try {
                                visitGuid = (ODataGuid) property.getValue();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            mHashSetVisitKeys.add(visitGuid.guidAsString36().toUpperCase());

                        }
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mHashSetVisitKeys;

    }

    /*async method*/
    public static void requestQueryOffline(final OnlineODataInterface onlineODataInterface, final Bundle bundle, final Context mContext) {
        String resourcePath = "";
        String sessionId = "";
        boolean isSessionRequired = false;
        int sessionType = 0;
        try {
            if (bundle == null) {
//            throw new IllegalArgumentException("bundle is null");
                if (onlineODataInterface != null)
                    onlineODataInterface.responseFailed(null, "bundle is null", bundle);
            } else {
                resourcePath = bundle.getString(Constants.BUNDLE_RESOURCE_PATH, "");
                sessionId = bundle.getString(Constants.BUNDLE_SESSION_ID, "");
                isSessionRequired = bundle.getBoolean(Constants.BUNDLE_SESSION_REQUIRED, false);
                sessionType = bundle.getInt(Constants.BUNDLE_SESSION_TYPE, 0);
            }
            if (TextUtils.isEmpty(resourcePath)) {
//            throw new IllegalArgumentException("resource path is null");
                if (onlineODataInterface != null)
                    onlineODataInterface.responseFailed(null, "resource path is null", bundle);
            } else {
                final Map<String, String> createHeaders = new HashMap<String, String>();
                requestScheduledOffline(resourcePath, createHeaders, onlineODataInterface, bundle);
            }
        } catch (Exception e) {
            e.printStackTrace();
            if (onlineODataInterface != null)
                onlineODataInterface.responseFailed(null, e.getMessage(), bundle);
        }
    }

    private static void requestScheduledOffline(String resourcePath, Map<String, String> createHeaders, OnlineODataInterface onlineODataInterface, Bundle bundle) throws ODataException {
//        OnlineStoreListener openListener = OnlineStoreListener.getInstance();
//        OnlineODataStore store = openListener.getStore();
        if (offlineStore != null) {
            OnlineRequestListeners getOnlineRequestListener = new OnlineRequestListeners(onlineODataInterface, bundle);
            scheduledReqEntity(resourcePath, getOnlineRequestListener, createHeaders, offlineStore);

        } else {
            throw new IllegalArgumentException("Store not opened");
        }
    }

    private static ODataRequestExecution scheduledReqEntity(String resourcePath, ODataRequestListener listener, Map<String, String> options, ODataOfflineStore offStore) throws ODataContractViolationException {
        if (TextUtils.isEmpty(resourcePath)) {
            throw new IllegalArgumentException("resourcePath is null");
        } else if (listener == null) {
            throw new IllegalArgumentException("listener is null");
        } else {
            ODataRequestParamSingleDefaultImpl requestParam = new ODataRequestParamSingleDefaultImpl();
            requestParam.setMode(ODataRequestParamSingle.Mode.Read);
            requestParam.setResourcePath(resourcePath);
            requestParam.setOptions(options);
            requestParam.getCustomHeaders().putAll(options);

            return offStore.scheduleRequest(requestParam, listener);
        }
    }

    /*get data from value help*/
    public static ArrayList<ValueHelpBean> getConfigListFromValueHelp(List<ODataEntity> entities, String propName) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ArrayList<ValueHelpBean> valueHelpArrayList = new ArrayList<>();
        ValueHelpBean valueHelp;
        ODataProperty property;
        ODataPropMap properties;
        try {
            if (entities != null && !entities.isEmpty()) {

                for (ODataEntity entity : entities) {
                    valueHelp = new ValueHelpBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.PropName);
                    valueHelp.setPropName((String) property.getValue());
                    property = properties.get(Constants.ID);
                    valueHelp.setID((String) property.getValue());
                    if (propName.equalsIgnoreCase(valueHelp.getPropName()) && !TextUtils.isEmpty(valueHelp.getID())) {
                        property = properties.get(Constants.Description);
                        valueHelp.setDescription((String) property.getValue());
                        property = properties.get(Constants.IsDefault);
                        Boolean boolVal = null;
                        try {
                            boolVal = (Boolean) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        valueHelp.setIsDefault(boolVal.toString());
                        property = properties.get(Constants.ParentID);
                        valueHelp.setParentID((String) property.getValue());
//                        valueHelp.setDisplayData(valueHelp.getID() + " - " + valueHelp.getDescription());
                        valueHelp.setDisplayData(valueHelp.getDescription());
                        valueHelpArrayList.add(valueHelp);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new OfflineODataStoreException(e);
        }
        if (valueHelpArrayList.size() != 1) {
            valueHelp = new ValueHelpBean();
            valueHelp.setDisplayData(Constants.None);
            valueHelpArrayList.add(0, valueHelp);
        }
        return valueHelpArrayList;

    }

    public static ArrayList<ValueHelpBean> getConfigListWithDefaultValAndNone(List<ODataEntity> entities, String propName) {
        //Check if the offline oData store is initialized
        ArrayList<ValueHelpBean> valueHelpArrayList = new ArrayList<>();
        ValueHelpBean valueHelp;
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && !entities.isEmpty()) {

            for (ODataEntity entity : entities) {
                valueHelp = new ValueHelpBean();
                properties = entity.getProperties();
                property = properties.get(Constants.PropName);
                valueHelp.setPropName((String) property.getValue());
                property = properties.get(Constants.ID);
                valueHelp.setID((String) property.getValue());
                property = properties.get(Constants.Description);
                valueHelp.setDescription((String) property.getValue());
                property = properties.get(Constants.IsDefault);
                Boolean boolVal = null;
                try {
                    boolVal = (Boolean) property.getValue();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                valueHelp.setIsDefault(boolVal.toString());
                property = properties.get(Constants.ParentID);
                valueHelp.setParentID((String) property.getValue());
                if (!TextUtils.isEmpty(propName)) {
                    String mStrTypeVal = Constants.getConfigTypeIndicator(Constants.ConfigTypsetTypeValues,
                            Constants.TypeValue, Constants.Types, valueHelp.getID(), Constants.Typeset, propName);
                    valueHelp.setTypeValue(mStrTypeVal);
                }
//                        valueHelp.setDisplayData(valueHelp.getID() + " - " + valueHelp.getDescription());
                valueHelp.setDisplayData(valueHelp.getDescription());
                valueHelpArrayList.add(valueHelp);
            }
        }
        if (valueHelpArrayList.size() != 1) {
            valueHelp = new ValueHelpBean();
            valueHelp.setDisplayData(Constants.None);
            valueHelpArrayList.add(0, valueHelp);
        }
        return valueHelpArrayList;

    }

    public static Set<String> getUniqueOutVisitFromVisit(String visitQry) {
        ArrayList<CustomerBean> alRetBean = new ArrayList<>();
        Set setCPList = new HashSet();
        if (offlineStore != null) {
            CustomerBean customerBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(offlineStore, visitQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPNo);
                        customerBean = new CustomerBean((String) property.getValue());
                        customerBean.setCPNo((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        try {
                            customerBean.setCPGUID(Constants.convertStrGUID32to36((String) property.getValue()));
                            customerBean.setCpGuidStringFormat((String) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (!setCPList.contains((String) property.getValue())) {
                            setCPList.add((String) property.getValue());
                        }

                        if (!Constants.alRetailersGuid36.contains(customerBean.getCPGUID().toUpperCase())) {
                            Constants.alRetailersGuid36.add(customerBean.getCPGUID().toUpperCase());
                        }
                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }

        return setCPList;
    }

    public static int getUniqueVisitCount(String visitQry) {
        List<String> setVisitList = new ArrayList<>();
        List<String> setBeatList = new ArrayList<>();
        Set<String> alTemp = new HashSet<>();
        HashMap<String, Set<String>> distMap = new HashMap<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            String strVisitGuid = "";
            String strBeatGuid = "";
            ODataGuid visitGuid = null;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(offlineStore, visitQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        alTemp = new HashSet<>();
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPGUID);
                        String cpGuid = (String) property.getValue();

                        property = properties.get(Constants.BeatGUID);
                        ODataGuid beatGuid = (ODataGuid) property.getValue();
                        if(beatGuid != null){
                            strBeatGuid = beatGuid.guidAsString36();
                        }
                        if (!setVisitList.contains(cpGuid)) {
                            setVisitList.add(cpGuid);
                            setBeatList.add(strBeatGuid);

                        }/*else {
                            if(!setVisitList.contains(cpGuid) && !setBeatList.contains(strBeatGuid)){
                                setVisitList.add(cpGuid);
                                setBeatList.add(strBeatGuid);
                            }
                        }*/

                        if(distMap.containsKey(cpGuid)){
                            Set<String> beatList=  distMap.get(cpGuid);
                            beatList.add(strBeatGuid);
                            distMap.put(cpGuid,beatList);
                        }else {
                            alTemp.add(strBeatGuid);
                            distMap.put(cpGuid,alTemp);

                        }
                        try {
                            if (!Constants.alVisitedGuid36.contains(Constants.convertStrGUID32to36(cpGuid))) {
                                Constants.alVisitedGuid36.add(Constants.convertStrGUID32to36(cpGuid));
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        try {
                            if (!Constants.alRouteGuid36.contains(strBeatGuid)) {
                                Constants.alRouteGuid36.add(strBeatGuid);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.VisitGUID);
                        visitGuid = (ODataGuid) property.getValue();
                        if(visitGuid != null){
                            strVisitGuid = visitGuid.guidAsString36();
                        }
                        try {
                            if (!Constants.alVisitGuid36.contains(strVisitGuid)) {
                                Constants.alVisitGuid36.add(strVisitGuid);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                       /* property = properties.get(Constants.CPNo);
                        try {
                            cpNo = (String) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                            try {
                                if (!Constants.alCPNO.contains(cpNo)) {
                                    Constants.alCPNO.add(cpNo);
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }*/
                        }
                    }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }
        try {
            Constants.visitRetailersMap = distMap;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Set keys = distMap.keySet();
        Iterator itr = keys.iterator();
        String key;
        Set<String> value;
        int totalVisit=0;
        while (itr.hasNext()) {
            key = (String) itr.next();
            value =  distMap.get(key);
            totalVisit=totalVisit+value.size();
        }
        return totalVisit;
    }

    public static ArrayList<String> getUniqueOutVisitFromVisitTemp(String visitQry) {
        ArrayList<CustomerBean> alRetBean = new ArrayList<>();
        ArrayList<String> setCPList = new ArrayList<>();
        if (offlineStore != null) {
            CustomerBean customerBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, visitQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPNo);
                        customerBean = new CustomerBean((String) property.getValue());
                        customerBean.setCPNo((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        try {
                            customerBean.setCPGUID(Constants.convertStrGUID32to36((String) property.getValue()));
                            customerBean.setCpGuidStringFormat((String) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (!setCPList.contains((String) property.getValue())) {
                            setCPList.add((String) property.getValue());
                        }
                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }

        return setCPList;
    }

    public static ArrayList<MTPRoutePlanBean> getMTPTodayPlane(String qry, boolean isAsmLogin) throws OfflineODataStoreException {
        Calendar currentCal = Calendar.getInstance();
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
        return getRouteDetailsList(currentCal, entities, null, isAsmLogin);
    }

    private static ArrayList<MTPRoutePlanBean> getRouteDetailsList(Calendar currentCal, List<ODataEntity> entities, MTPHeaderBean weekHeaderList, boolean isAsmLogin) throws OfflineODataStoreException {
        ArrayList<MTPRoutePlanBean> mtpRoutePlanList = new ArrayList<>();
        List<ODataEntity> tempList = new ArrayList<>();
        ODataPropMap propertiesHeader;
        ODataPropMap propertiesItem;
        ODataProperty property;
        String dayShortName = currentCal.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.SHORT, Locale.getDefault());
        for (ODataEntity oDataEntity : entities) {
            propertiesHeader = oDataEntity.getProperties();
            property = propertiesHeader.get(Constants.RouteSchGUID);
            String routeSchemGuid = "";
            try {
                ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                routeSchemGuid = mInvoiceGUID.guidAsString36().toUpperCase();
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (weekHeaderList != null) {
                weekHeaderList.setRouteSchGUID(routeSchemGuid);
                property = propertiesHeader.get(Constants.ApprovalStatus);
                weekHeaderList.setApprovalStatus(property.getValue().toString());
                property = propertiesHeader.get(Constants.ApprovalStatusDs);
                weekHeaderList.setApprovalStatusDs(property.getValue().toString());
                property = propertiesHeader.get(Constants.RoutId);
               /* if (property != null)
                    weekHeaderList.setRoutId(property.getValue().toString());
                property = propertiesHeader.get(Constants.CreatedBy);
                if (property != null)
                    weekHeaderList.setCreatedBy(property.getValue().toString());
                property = propertiesHeader.get(Constants.CreatedOn);
                if (property != null)
                    weekHeaderList.setCreatedOn(ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue()));*/
                /*property = propertiesHeader.get(Constants.CreatedAt);
                if (property != null)
                    weekHeaderList.setCreatedAt(property.getValue().toString());*/
                weekHeaderList.setIsUpdate("X");
                if (TextUtils.isEmpty(weekHeaderList.getApprovalStatus())) {
                    weekHeaderList.setTestRun("D");
                }
            }

            List<ODataEntity> entitiesItem = UtilOfflineManager.getEntities(OfflineManager.offlineStore, Constants.RouteSchedulePlans + "?$filter=RouteSchGUID eq guid'" + routeSchemGuid + "'");
            for (ODataEntity oDataEntityItem : entitiesItem) {
                MTPRoutePlanBean mtpRoutePlanBean = new MTPRoutePlanBean();
                mtpRoutePlanBean.setRouteSchGUID(routeSchemGuid);
                propertiesItem = oDataEntityItem.getProperties();
                property = propertiesItem.get(Constants.VisitDate);
                if (property != null) {
                   /* mtpRoutePlanBean.setVisitDate(ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue()));
                    if (ConstantsUtils.convertCalenderToDisplayDateFormat(currentCal, "dd-MMM-yyyy").equalsIgnoreCase(mtpRoutePlanBean.getVisitDate())) {
                        mtpRoutePlanBean.setDay(dayShortName);
                        mtpRoutePlanBean.setDate(String.valueOf(currentCal.get(Calendar.DAY_OF_MONTH)));
                        mtpRoutePlanList.add(ConstantsUtils.parseMTPItems(mtpRoutePlanBean, propertiesItem, isAsmLogin));

                    }*/
                }
/*
                if (property != null) {

                    mtpRoutePlanBean.setVisitDate(ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue()));
                    if (ConstantsUtils.convertCalenderToDisplayDateFormat(currentCal, "dd-MMM-yyyy").equalsIgnoreCase(mtpRoutePlanBean.getVisitDate())) {
                        property = properties.get(Constants.CustomerNo);
                        mtpRoutePlanBean.setCustomerNo(property.getValue().toString());
//                    property = properties.get(Constants.CustomerName);
                        if (!TextUtils.isEmpty(mtpRoutePlanBean.getCustomerNo())) {
                            ArrayList<CustomerBean> customerList = getCustomerList(Constants.Customers + "?$filter=" + Constants.CustomerNo + " eq '" + mtpRoutePlanBean.getCustomerNo() + "' ");
                            if (!customerList.isEmpty()) {
                                CustomerBean customerBean = customerList.get(0);
                                mtpRoutePlanBean.setCustomerName(customerBean.getCustomerName());
                                mtpRoutePlanBean.setAddress(customerBean.getAddress1());
                                mtpRoutePlanBean.setPostalCode(customerBean.getPostalCode());
                                mtpRoutePlanBean.setMobile1(customerBean.getMobile1());
                                mtpRoutePlanBean.setDay(dayShortName);
                                mtpRoutePlanBean.setRemarks("going for field work");
                                mtpRoutePlanBean.setActivityDec("Field work");
                                mtpRoutePlanBean.setDate(String.valueOf(currentCal.get(Calendar.DAY_OF_MONTH)));
                            }
                        }
                        mtpRoutePlanList.add(mtpRoutePlanBean);
                        tempList.add(oDataEntity);
                    }
                }*/
            }
        }
        if (!tempList.isEmpty())
            entities.removeAll(tempList);
        return mtpRoutePlanList;
    }

    /**
     * Returns Monthly target sum for sales person based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getTotalSumByCondition(String monthTargetQry, String columnValue) throws OfflineODataStoreException {

        BigDecimal monthTargetVal = null;
        double mDoubleTargetVal = 0.0;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(monthTargetQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(columnValue);
                        Double mDobAmount = 0.0;
                        if (property != null) {
                            try {
                                monthTargetVal = (BigDecimal) property.getValue();

                                mDobAmount = monthTargetVal.doubleValue();
                            } catch (Exception e) {
                                mDobAmount = 0.0;
                                e.printStackTrace();
                            }

                        }
                        if (mDobAmount.isNaN() || mDobAmount.isInfinite()) {
                            mDobAmount = 0.0;
                        }

                        mDoubleTargetVal = mDoubleTargetVal + mDobAmount;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                e.printStackTrace();
                throw new OfflineODataStoreException(e);
            }
        }

        return mDoubleTargetVal + "";

    }

    /**
     * Create a new entity for VisitActivities in the local database
     *
     * @throws OfflineODataStoreException
     */
    public static void createVisitActivity(Hashtable<String, String> hashtable) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createVisitActivityEntity(hashtable);

            offlineStore.executeCreateEntity(newEntity, Constants.VisitActivities, null);

        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /**
     * Creates a entity to start new visit in the local database
     *
     * @throws OfflineODataStoreException
     */
    private static ODataEntity createVisitActivityEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.VISITACTIVITYENTITY);

                newEntity.getProperties().put(Constants.VisitActivityGUID,
                        new ODataPropertyDefaultImpl(Constants.VisitActivityGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VisitActivityGUID))));
                newEntity.getProperties().put(Constants.ActivityType,
                        new ODataPropertyDefaultImpl(Constants.ActivityType, hashtable.get(Constants.ActivityType)));
                newEntity.getProperties().put(Constants.ActivityTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.ActivityTypeDesc, hashtable.get(Constants.ActivityTypeDesc)));
//                newEntity.getProperties().put(Constants.LOGINID,
//                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));
                if (hashtable.get(Constants.Latitude) != null) {
                    newEntity.getProperties().put(Constants.Latitude,
                            new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));
                }
                if (hashtable.get(Constants.Longitude) != null) {
                    newEntity.getProperties().put(Constants.Longitude,
                            new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));
                }
                if (hashtable.get(Constants.StartTime) != null) {
                    newEntity.getProperties().put(Constants.StartTime,
                            new ODataPropertyDefaultImpl(Constants.StartTime, hashtable.get(Constants.StartTime)));
                }
                if (hashtable.get(Constants.EndTime) != null) {
                    newEntity.getProperties().put(Constants.EndTime,
                            new ODataPropertyDefaultImpl(Constants.EndTime, hashtable.get(Constants.EndTime)));
                }
                newEntity.getProperties().put(Constants.VisitGUID,
                        new ODataPropertyDefaultImpl(Constants.VisitGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VisitGUID))));
                newEntity.getProperties().put(Constants.ActivityRefID,
                        new ODataPropertyDefaultImpl(Constants.ActivityRefID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.ActivityRefID))));


                if (!TextUtils.isEmpty(hashtable.get(Constants.VisitActivityGUID))) {
                    newEntity.setResourcePath(Constants.VisitActivities + "(guid'" + hashtable.get(Constants.VisitActivityGUID) + "')", Constants.VisitActivities + "(guid'" + hashtable.get(Constants.VisitActivityGUID) + "')");
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static String[][] getDistributorListByCPGUID(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    distVal = new String[11][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.PartnerMgrGUID);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            distVal[0][incVal] = mInvoiceGUID.guidAsString36();
                            distVal[1][incVal] = mInvoiceGUID.guidAsString32().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.PartnerMgrNo);
                        distVal[2][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.PartnerMgrName);
                        distVal[3][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.ParentID);
                        distVal[4][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.ParentTypeID);
                        distVal[5][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.ParentTypDesc);
                        distVal[6][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.ParentName);
                        distVal[7][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.CPTypeID);
                        distVal[8][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.CPTypeDesc);
                        distVal[9][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.Currency);
                        distVal[10][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

    public static String[][] getSPValuesByCPGUIDAndDMSDivision(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    distVal = new String[12][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        try {
                            property = properties.get(Constants.CPTypeDesc);
                            distVal[0][incVal] = (String) property.getValue();
                        } catch (Exception e) {
                            distVal[0][incVal] = "";
                        }
                        property = properties.get(Constants.ParentID);
                        distVal[1][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ParentName);
                        distVal[2][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ParentTypeID);
                        distVal[3][incVal] = (String) property.getValue();

                        property = properties.get(Constants.PartnerMgrGUID);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            distVal[4][incVal] = mInvoiceGUID.guidAsString36().toUpperCase();
                            distVal[5][incVal] = mInvoiceGUID.guidAsString32().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.PartnerMgrNo);
                        distVal[6][incVal] = (String) property.getValue();
                        property = properties.get(Constants.PartnerMgrName);
                        distVal[7][incVal] = (String) property.getValue();

                        property = properties.get(Constants.CPTypeID);
                        distVal[9][incVal] = (String) property.getValue();
                        property = properties.get(Constants.Currency);
                        distVal[10][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ParentTypDesc);
                        distVal[11][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

    public static void refreshRequests(Context context, String collName, UIListener uiListener) throws
            OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //used to get progress updates of a refresh operation
            OfflineRefreshListener refreshListener = new OfflineRefreshListener(context, Constants.Fresh, collName, uiListener);
            //Asynchronously starts sending pending modification request to the server
            offlineStore.scheduleRefresh(collName, refreshListener);
        } catch (ODataException e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    public static boolean checkNoUOMZero(String UOM) throws OfflineODataStoreException {
        boolean isNoUOMZero = false;
        String qry = Constants.ConfigTypesetTypes + "?$filter=" + Constants.Typeset + " eq '" + Constants.UOMNO0 + "' and " +
                Constants.Types + " eq '" + UOM + "'";

        if (UOM != null && !UOM.equalsIgnoreCase("")) {
            if (offlineStore != null) {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
                if (entities != null && entities.size() > 0) {
                    isNoUOMZero = true;
                }

            }
        }
        return isNoUOMZero;
    }

    public static SOListBean getSODetails(String qry) {
        SOListBean soListBean = null;
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntitySet feed;
                    soListBean = new SOListBean();
                  /*  ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();*/
                    ODataEntity entity = (ODataEntity) response.getPayload();
                    //Retrieve the data from the response
                    properties = entity.getProperties();

                    property = properties.get(Constants.SONo);
                    if (property != null)
                        soListBean.setSONo(property.getValue().toString());

                    try {
                        property = properties.get(Constants.TotalAmount);
                        if (property != null)
                            soListBean.setTotalAmt(property.getValue().toString());

                        property = properties.get(Constants.Currency);
                        if (property != null)
                            soListBean.setCurrency(property.getValue().toString());

                        property = properties.get(Constants.NetPrice);
                        if (property != null)
                            soListBean.setNetPrice(property.getValue().toString());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.OrderNo);
                    if (property != null)
                        soListBean.setOrderNo(property.getValue().toString());
                    property = properties.get(Constants.SalesAreaDesc);
                    if (property != null)
                        soListBean.setSalesAreaDesc(property.getValue().toString());
                    property = properties.get(Constants.SalesArea);
                    if (property != null)
                        soListBean.setSalesArea(property.getValue().toString());
                    property = properties.get(Constants.OrderTypeDesc);
                    if (property != null)
                        soListBean.setOrderTypeDesc(property.getValue().toString());
                    property = properties.get(Constants.OrderType);
                    if (property != null)
                        soListBean.setOrderType(property.getValue().toString());

                    property = properties.get(Constants.ShipToPartyName);
                    if (property != null)
                        soListBean.setShipToName(property.getValue().toString());

                    property = properties.get(Constants.ShipToParty);
                    if (property != null)
                        soListBean.setShipTo(property.getValue().toString());

                    property = properties.get(Constants.TransporterName);
                    if (property != null)
                        soListBean.setTransportName(property.getValue().toString());
                    property = properties.get(Constants.TransporterID);
                    if (property != null)
                        soListBean.setTransportNameID(property.getValue().toString());

                    property = properties.get(Constants.Plant);
                    if (property != null) {
                        soListBean.setPlant((String) property.getValue());
                    }

                    property = properties.get(Constants.UnloadingPoint);
                    if (property != null) {
                        soListBean.setUnloadingPointDesc((String) property.getValue());
                    }

                    property = properties.get(Constants.ReceivingPoint);
                    if (property != null) {
                        soListBean.setReceivingPointDesc((String) property.getValue());
                    }
                    property = properties.get(Constants.PaytermDesc);
                    if (property != null) {
                        soListBean.setPaymentTermDesc(property.getValue().toString());
                    }
                    property = properties.get(Constants.Payterm);
                    if (property != null) {
                        soListBean.setPaymentTerm(property.getValue().toString());
                    }
                    property = properties.get(Constants.Incoterm1Desc);
                    if (property != null) {
                        soListBean.setIncoterm1Desc(property.getValue().toString());
                    }
                    property = properties.get(Constants.Incoterm1);
                    if (property != null) {
                        soListBean.setIncoTerm1(property.getValue().toString());
                    }
                    property = properties.get(Constants.Incoterm2);
                    if (property != null) {
                        soListBean.setIncoterm2(property.getValue().toString());
                    }
                    property = properties.get(Constants.ShippingTypeID);
                    if (property != null) {
                        soListBean.setShippingPoint(property.getValue().toString());
                    }
                    property = properties.get(Constants.ShippingTypeDesc);
                    if (property != null) {
                        soListBean.setShippingPointDesc(property.getValue().toString());
                    }
                    property = properties.get(Constants.SalesOffice);
                    if (property != null) {
                        soListBean.setSalesOfficeId(property.getValue().toString());
                    }
                    property = properties.get(Constants.SaleOffDesc);
                    if (property != null) {
                        soListBean.setSaleOffDesc(property.getValue().toString());
                    }

                    property = properties.get(Constants.SalesGroup);
                    if (property != null) {
                        soListBean.setSalesGroup(property.getValue().toString());
                    }
                    property = properties.get(Constants.SaleGrpDesc);
                    if (property != null) {
                        soListBean.setSaleGrpDesc(property.getValue().toString());
                    }
                    soListBean.setAddress(SOUtils.getAddressValue(properties));

                    property = properties.get(Constants.CustomerPO);
                    if (property != null) {
                        soListBean.setPONo(property.getValue().toString());
                    }
                    property = properties.get(Constants.CustomerNo);
                    if (property != null) {
                        soListBean.setSoldTo(property.getValue().toString());
                    }
                    property = properties.get(Constants.CustomerName);
                    if (property != null) {
                        soListBean.setSoldToName(property.getValue().toString());
                    }
                    property = properties.get(Constants.Status);
                    if (property != null) {
                        soListBean.setStatus(property.getValue().toString());
                    }
                    property = properties.get(Constants.ApprovalStatus);
                    if (property != null) {
                        soListBean.setDelvStatus(property.getValue().toString());
                    }
                    property = properties.get(Constants.MeansOfTranstyp);
                    if (property != null) {
                        soListBean.setMeansOfTranstyp(property.getValue().toString());
                    }
                    property = properties.get(Constants.MeansOfTranstypDesc);
                    if (property != null) {
                        soListBean.setMeansOfTranstypDesc(property.getValue().toString());
                    }

                    property = properties.get(Constants.DmsDivision);
                    if (property != null)
                        soListBean.setDmsDivision(property.getValue().toString());

                    property = properties.get(Constants.DmsDivisionDesc);
                    if (property != null)
                        soListBean.setDMSDivisionDesc(property.getValue().toString());

                    property = properties.get(Constants.SalesDist);
                    if (property != null)
                        soListBean.setSalesDist(property.getValue().toString());
                    property = properties.get(Constants.SalesDistDesc);
                    if (property != null)
                        soListBean.setSalesDistDesc(property.getValue().toString());
                    property = properties.get(Constants.OrderDate);
                    if (property != null) {
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        soListBean.setOrderDate(convertDateFormat);
                    }
                    property = properties.get(Constants.CustomerPODate);
                    if (property != null) {
                        String customerPoDate = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        soListBean.setPODate(customerPoDate);
                    }

                    ODataNavigationProperty soItemDetailsProp = entity.getNavigationProperty(Constants.SSSoItemDetails);
                    feed = (ODataEntitySet) soItemDetailsProp.getNavigationContent();
                    List<ODataEntity> feedEntities = feed.getEntities();
                    ArrayList<SOItemBean> soItemBeanArrayList = new ArrayList<>();
                    SOItemBean soItemBean;

                    for (ODataEntity soItemEntity : feedEntities) {
                        soItemBean = new SOItemBean();
                        properties = soItemEntity.getProperties();
                        property = properties.get(Constants.MaterialNo);
                        if (property != null)
                            soItemBean.setMatCode(property.getValue().toString());
                        property = properties.get(Constants.MaterialDesc);
                        if (property != null)
                            soItemBean.setMatDesc(property.getValue().toString());

                        property = properties.get(Constants.HigherLevelItemno);
                        if (property != null)
                            soItemBean.setHigherLevelItemno(property.getValue().toString());
                        property = properties.get(Constants.IsfreeGoodsItem);
                        if (property != null)
                            soItemBean.setIsfreeGoodsItem(property.getValue().toString());
                        property = properties.get(Constants.Uom);
                        if (property != null)
                            soItemBean.setUom(property.getValue().toString());
                        property = properties.get(Constants.Quantity);
                        if (property != null) {
                            if (checkNoUOMZero(String.valueOf(soItemBean.getUom()))) {
                                soItemBean.setSoQty(trimQtyDecimalPlace(property.getValue().toString()));
                            } else {
                                soItemBean.setSoQty(property.getValue().toString());
                            }
                        }
                        property = properties.get(Constants.UnitPrice);
                        if (property != null)
                            soItemBean.setUnitPrice(property.getValue().toString());
                        property = properties.get(Constants.NetPrice);
                        if (property != null)
                            soItemBean.setNetAmount(property.getValue().toString());
                        property = properties.get(Constants.Plant);
                        if (property != null)
                            soItemBean.setPlantId(property.getValue().toString());
                        property = properties.get(Constants.PlantDesc);
                        if (property != null)
                            soItemBean.setPlantDesc(property.getValue().toString());
                        property = properties.get(Constants.Currency);
                        if (property != null)
                            soItemBean.setCurrency(property.getValue().toString());
                        property = properties.get(Constants.ItemNo);
                        if (property != null)
                            soItemBean.setItemNo(property.getValue().toString());
                        property = properties.get(Constants.SONo);
                        if (property != null)
                            soItemBean.setSetSONo(property.getValue().toString());
                        property = properties.get(Constants.Status);
                        if (property != null)
                            soItemBean.setStatus(property.getValue().toString());

                        property = properties.get(Constants.DelvQty);
                        if (property != null)
                            soItemBean.setDelvQty(property.getValue().toString());

                        property = properties.get(Constants.OpenQty);
                        if (property != null)
                            soItemBean.setOpenQty(property.getValue().toString());

                        property = properties.get(Constants.Quantity);
                        if (property != null)
                            soItemBean.setQuantity(property.getValue().toString());

                        soItemBeanArrayList.add(soItemBean);
                    }
                    Collections.sort(soItemBeanArrayList, new Comparator<SOItemBean>() {
                        @Override
                        public int compare(SOItemBean arg0, SOItemBean arg1) {

                            return arg0.getItemNo().compareTo(arg1.getItemNo());
                        }
                    });
                    soListBean.setSoItemBeanArrayList(soItemBeanArrayList);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return soListBean;
    }

    private static CustomerPartnerFunctionBean getCustomerPartnerFunction(ODataPropMap properties, CustomerPartnerFunctionBean partnerFunctions) {
        ODataProperty property;
        property = properties.get(Constants.PartnerFunctionDesc);
        partnerFunctions.setPartnerFunctionDesc(property.getValue().toString());
        property = properties.get(Constants.CustomerNo);
        partnerFunctions.setPartnerCustomerNo(property.getValue().toString());
        property = properties.get(Constants.CustomerName);
        if (property != null)
            partnerFunctions.setPartnerCustomerName(property.getValue().toString());
        property = properties.get(Constants.VendorNo);
        if (property != null)
            partnerFunctions.setPartnerVendorNo(property.getValue().toString());
        property = properties.get(Constants.VendorName);
        if (property != null)
            partnerFunctions.setPartnerVendorName(property.getValue().toString());
        property = properties.get(Constants.PersonnelNo);
        if (property != null)
            partnerFunctions.setPersonnelNo(property.getValue().toString());
        property = properties.get(Constants.PersonnelName);
        if (property != null)
            partnerFunctions.setPersonnelName(property.getValue().toString());
        property = properties.get(Constants.Address1);
        if (property != null)
            partnerFunctions.setAddress1(property.getValue().toString());
        property = properties.get(Constants.Address2);
        if (property != null)
            partnerFunctions.setAddress2(property.getValue().toString());
        property = properties.get(Constants.Address3);
        if (property != null)
            partnerFunctions.setAddress3(property.getValue().toString());
        property = properties.get(Constants.Address4);
        if (property != null)
            partnerFunctions.setAddress4(property.getValue().toString());
        property = properties.get(Constants.District);
        if (property != null)
            partnerFunctions.setDistrict(property.getValue().toString());
        property = properties.get(Constants.CityID);
        if (property != null)
            partnerFunctions.setCityID(property.getValue().toString());
        property = properties.get(Constants.RegionIDRegionID);
        if (property != null)
            partnerFunctions.setRegionID(property.getValue().toString());
        property = properties.get(Constants.RegionDesc);
        if (property != null)
            partnerFunctions.setRegionDesc(property.getValue().toString());
        property = properties.get(Constants.CountryID);
        if (property != null)
            partnerFunctions.setCountryID(property.getValue().toString());
        property = properties.get(Constants.CountryDesc);
        if (property != null)
            partnerFunctions.setCountryDesc(property.getValue().toString());
        property = properties.get(Constants.PostalCode);
        if (property != null)
            partnerFunctions.setPostalCode(property.getValue().toString());
        property = properties.get(Constants.Mobile1);
        if (property != null)
            partnerFunctions.setMobile1(property.getValue().toString());
        property = properties.get(Constants.Mobile2);

        if (property != null)
            partnerFunctions.setMobile2(property.getValue().toString());
        property = properties.get(Constants.EmailID);
        if (property != null)
            partnerFunctions.setEmailID(property.getValue().toString());
        return partnerFunctions;
    }

    /*so condition*/
    public static SOConditionItemDetaiBean getCondition(ODataEntity entityCondition) {
        ODataProperty property;
        ODataPropMap properties;
        properties = entityCondition.getProperties();
        SOConditionItemDetaiBean soConditionItemDetaiBean = null;
        String condCurrency = "";
        property = properties.get(Constants.CondCurrency);
        if (property != null) {
            condCurrency = property.getValue().toString();
        }

//        if (comingFrom!=ConstantsUtils.SO_MULTIPLE_MATERIAL || !TextUtils.isEmpty(condCurrency))
        soConditionItemDetaiBean = new SOConditionItemDetaiBean();
        soConditionItemDetaiBean.setViewType("S");
        if (!TextUtils.isEmpty(condCurrency)) {
            property = properties.get(Constants.ConditionAmount);
            if (property != null) {
//            totalNormalAmt=totalNormalAmt.add((BigDecimal)property.getValue());
                soConditionItemDetaiBean.setAmount(property.getValue().toString());
            }
        }
        property = properties.get(Constants.Name);
        if (property != null) {
            soConditionItemDetaiBean.setName(property.getValue().toString());
        }
        property = properties.get(Constants.ConditionAmtPer);
        if (property != null) {
            soConditionItemDetaiBean.setConditionAmtPer(property.getValue().toString());
        }
        property = properties.get(Constants.ConditionValue);
        if (property != null) {
//            subTotalAmt=subTotalAmt.add((BigDecimal)property.getValue());
            soConditionItemDetaiBean.setConditionValue(property.getValue().toString());
        }
        property = properties.get(Constants.Currency);
        if (property != null) {
            soConditionItemDetaiBean.setCurrency(property.getValue().toString());
        }
        property = properties.get(Constants.CondCurrency);
        if (property != null) {
            soConditionItemDetaiBean.setCondCurrency(property.getValue().toString());
        }
        property = properties.get(Constants.SequenceNo);
        if (property != null) {
            soConditionItemDetaiBean.setSequenceNo(property.getValue().toString());
        }
        return soConditionItemDetaiBean;
    }

    public static List<SalesOrderBean> getSODetailsListFromDataValt(String mDeviceNo,Context context) throws OfflineODataStoreException {
        List<SalesOrderBean> salesOrderBeanList = new ArrayList<>();
        SalesOrderBean salesOrderItemsBean;
        String store = "";
        ArrayList<HashMap<String, String>> arrtable;
        try {
            store = ConstantsUtils.getFromDataVault(mDeviceNo,context);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        try {
            JSONObject fetchJsonHeaderObject = new JSONObject(store);
            String itemsString = fetchJsonHeaderObject.getString(Constants.ITEM_TXT);
            arrtable = UtilConstants.convertToArrayListMap(itemsString);
            for (int i = 0; i < arrtable.size(); i++) {
                HashMap<String, String> singleRow = arrtable.get(i);
                salesOrderItemsBean = new SalesOrderBean();
                salesOrderItemsBean.setMaterialNo(singleRow.get(Constants.Material));
                salesOrderItemsBean.setMaterialDesc(singleRow.get(Constants.MaterialDesc));
                salesOrderItemsBean.setsItemNo(singleRow.get(Constants.ItemNo));
                salesOrderItemsBean.setQAQty(singleRow.get(Constants.Quantity));
                salesOrderItemsBean.setNetAmount(singleRow.get(Constants.NetAmount));
                salesOrderItemsBean.setCurrency(singleRow.get(Constants.Currency));
                salesOrderItemsBean.setUom(singleRow.get(Constants.UOM));


                salesOrderItemsBean.setPlant(singleRow.get(Constants.Plant));
                salesOrderItemsBean.setPlantDesc(singleRow.get(Constants.PlantDesc));
                salesOrderItemsBean.setMatFrgtGrp(singleRow.get(Constants.MatFrgtGrp));
                salesOrderItemsBean.setMatFrgtGrpDesc(singleRow.get(Constants.MatFrgtGrpDesc));
                salesOrderItemsBean.setStorLoc(singleRow.get(Constants.StorLoc));
                salesOrderItemsBean.setStorLocDesc(singleRow.get(Constants.StorLocDesc));
                salesOrderBeanList.add(salesOrderItemsBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return salesOrderBeanList;

    }

    public static List<SalesOrderBean> getSecondarySalesOrderDetailsList(String retailerStockQry) throws OfflineODataStoreException {

        List<SalesOrderBean> soDetailList = new ArrayList<>();
        if (offlineStore != null) {
            SalesOrderBean soBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        soBean = new SalesOrderBean();


                        property = properties.get(Constants.Material);
                        soBean.setMaterialNo((String) property.getValue());

                        property = properties.get(Constants.MaterialDesc);
                        soBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        soBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.MaterialGroup);
                        soBean.setOrderMaterialGroupID((String) property.getValue());

                        property = properties.get(Constants.ItemNo);
                        soBean.setsItemNo((String) property.getValue());

                        property = properties.get(Constants.MatGroupDesc);
                        soBean.setOrderMaterialGroupDesc((String) property.getValue());

                        property = properties.get(Constants.ItemCategory);
                        soBean.setItemCat((String) property.getValue());
                        property = properties.get(Constants.ItemCatDesc);
                        soBean.setItemCatDesc((String) property.getValue());

                        property = properties.get(Constants.Quantity);

                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }

                        property = properties.get(Constants.UOM);
                        soBean.setUom((String) property.getValue());

                        if (checkNoUOMZero(soBean.getUom()))
                            soBean.setQAQty(trimQtyDecimalPlace(qty));
                        else
                            soBean.setQAQty(qty);

                        property = properties.get(Constants.DelvQty);
                        String DelvQty = "0.000";
                        if (property != null) {
                            DelvQty = property.getValue().toString();
                        }

                        if (checkNoUOMZero(soBean.getUom()))
                            soBean.setDelvQty(trimQtyDecimalPlace(DelvQty));
                        else
                            soBean.setDelvQty(DelvQty);

                        property = properties.get(Constants.OpenQty);
                        String OpenQty = "0.000";
                        if (property != null) {
                            OpenQty = property.getValue().toString();
                        }

                        if (checkNoUOMZero(soBean.getUom()))
                            soBean.setOpenQty(trimQtyDecimalPlace(OpenQty));
                        else
                            soBean.setOpenQty(OpenQty);

                        property = properties.get(Constants.DepotStock);
                        String DepotStock = "0.000";
                        if (property != null) {
                            DepotStock = property.getValue().toString();
                        }

                        soBean.setDepotStock(DepotStock);

                        property = properties.get(Constants.OwnStock);
                        String OwnStock = "0.000";
                        if (property != null) {
                            OwnStock = property.getValue().toString();
                        }

                        soBean.setOwnStock(OwnStock);

                        property = properties.get(Constants.NetAmount);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        soBean.setNetAmount(netAmount.doubleValue() + "");

                        property = properties.get(Constants.MRP);
                        BigDecimal mrpAmount = (BigDecimal) property.getValue();
                        soBean.setMRP(mrpAmount.doubleValue() + "");


                        property = properties.get(Constants.GrossAmount);
                        BigDecimal grossAmount = (BigDecimal) property.getValue();
                        soBean.setTotalAmt(grossAmount.doubleValue() + "");

                        property = properties.get(Constants.Tax);
                        BigDecimal taxAmount = (BigDecimal) property.getValue();
                        soBean.setTaxAmt(taxAmount.doubleValue() + "");

                        soBean.setTotalAmt(Double.parseDouble(netAmount.toString()) + Double.parseDouble(taxAmount.toString()) + "");

                        property = properties.get(Constants.Freight);
                        BigDecimal freightAmount = (BigDecimal) property.getValue();
                        soBean.setFreightAmt(freightAmount.doubleValue() + "");

                        property = properties.get(Constants.Discount);
                        BigDecimal discountAmount = (BigDecimal) property.getValue();
                        soBean.setDiscountAmt(discountAmount.doubleValue() + "");

                        property = properties.get(Constants.DiscountPer);
                        BigDecimal discountPer = (BigDecimal) property.getValue();
                        soBean.setDiscountPer(discountPer.doubleValue() + "");

                        property = properties.get(Constants.UnitPrice);
                        if (property != null)
                            soBean.setUnitPrice(property.getValue().toString());
                        property = properties.get(Constants.SONo);
                        String soNo = property.getValue().toString();
                        soBean.setOrderNo(soNo);
                        property = properties.get(Constants.Plant);
                        soBean.setPlant(property.getValue().toString());
                        property = properties.get(Constants.PlantDesc);
                        soBean.setPlantDesc(property.getValue().toString());

                        property = properties.get(Constants.StatusID);
                        soBean.setStatusID(property.getValue().toString());
                        property = properties.get(Constants.StatusDesc);
                        soBean.setStatusDesc(property.getValue().toString());

                        property = properties.get(Constants.DelvStatusID);
                        soBean.setDelvStatus(property.getValue().toString());
                        property = properties.get(Constants.DelvStatusDesc);
                        soBean.setDelvStatusDesc(property.getValue().toString());

                        property = properties.get(Constants.StorLoc);
                        soBean.setStorLoc(property.getValue().toString());
                        property = properties.get(Constants.StorLocDesc);
                        soBean.setStorLocDesc(property.getValue().toString());

                        soDetailList.add(soBean);
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return soDetailList;

    }

    public static ArrayList<SalesOrderConditionsBean> getSOConditionsList(String query) throws OfflineODataStoreException {
        ArrayList<SalesOrderConditionsBean> salesOrderConditionsBeanArrayList = new ArrayList<>();
        if (offlineStore != null) {
            SalesOrderConditionsBean salesOrderConditionsBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        salesOrderConditionsBean = new SalesOrderConditionsBean();
                        property = properties.get(Constants.SONo);
                        salesOrderConditionsBean.setSoNo((String) property.getValue());
                        property = properties.get(Constants.ConditionTypeID);
                        salesOrderConditionsBean.setSoNo((String) property.getValue());
                        property = properties.get(Constants.Name);
                        salesOrderConditionsBean.setName((String) property.getValue());
                        property = properties.get(Constants.Currency);
                        salesOrderConditionsBean.setCurrency((String) property.getValue());
                        property = properties.get(Constants.ConditionTypeDesc);
                        salesOrderConditionsBean.setconditionTypeDescription((String) property.getValue());
                        property = properties.get(Constants.CondCurrency);
                        salesOrderConditionsBean.setCondCurrency((String) property.getValue());
                        property = properties.get(Constants.ConditionAmount);
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        salesOrderConditionsBean.setconditionAmount(mStrAmount.toString());
                        property = properties.get(Constants.ConditionValue);
                        BigDecimal value = (BigDecimal) property.getValue();
                        salesOrderConditionsBean.setconditionValue(value.toString());
                        property = properties.get(Constants.ConditionPricingDate);
                        salesOrderConditionsBean.setconditionPricingDate(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));
                        salesOrderConditionsBeanArrayList.add(salesOrderConditionsBean);
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return salesOrderConditionsBeanArrayList;

    }

    /**
     * get secondary sales order list
     *
     * @param retailerStockQry
     * @return
     * @throws OfflineODataStoreException
     */
    public static SalesOrderBean getSalesOrder(String retailerStockQry) throws OfflineODataStoreException {

        SalesOrderBean soBean = new SalesOrderBean();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        soBean = new SalesOrderBean();

                        property = properties.get(Constants.SONo);
                        soBean.setOrderNo((String) property.getValue());

                        property = properties.get(Constants.LoginID);
                        soBean.setLoginID((String) property.getValue());

//                        property = properties.get(Constants.DelvStatus);
//                        soBean.setStatusID((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        soBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.NetPrice);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        soBean.setNetAmount(netAmount.doubleValue() + "");

                        property = properties.get(Constants.TotalAmount);
                        BigDecimal totalAmount = (BigDecimal) property.getValue();
                        soBean.setTotalAmt(totalAmount.doubleValue() + "");

                        property = properties.get(Constants.TaxAmount);
                        BigDecimal taxAmount = (BigDecimal) property.getValue();
                        soBean.setTotalAmt(taxAmount.doubleValue() + "");

                        property = properties.get(Constants.OrderDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        soBean.setOrderDate(convertDateFormat);

                        property = properties.get(Constants.CustomerPODate);
                        String PODate = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        soBean.setPODate(PODate);

                        property = properties.get(Constants.ShippingTypeDesc);
                        soBean.setShippingTypeDesc((String) property.getValue());
                        property = properties.get(Constants.ShippingTypeID);
                        soBean.setShippingPoint((String) property.getValue());
                        property = properties.get(Constants.ShipToParty);
                        soBean.setShipTo((String) property.getValue());
                        property = properties.get(Constants.ShipToPartyName);
                        soBean.setShipToName((String) property.getValue());
                        property = properties.get(Constants.Payterm);
                        soBean.setPaymentTerm((String) property.getValue());
                        property = properties.get(Constants.PaytermDesc);
                        soBean.setPaymentTermDesc((String) property.getValue());
                        property = properties.get(Constants.Incoterm2);
                        soBean.setIncoterm2((String) property.getValue());
                        property = properties.get(Constants.Incoterm1);
                        soBean.setIncoTerm1((String) property.getValue());
                        property = properties.get(Constants.Incoterm1Desc);
                        soBean.setIncoterm1Desc((String) property.getValue());
                        property = properties.get(Constants.Incoterm2);
                        soBean.setIncoterm2((String) property.getValue());
                        property = properties.get(Constants.Plant);
                        soBean.setPlant((String) property.getValue());
                        property = properties.get(Constants.PlantDesc);
                        soBean.setPlantDesc((String) property.getValue());
                        property = properties.get(Constants.CustomerNo);
                        soBean.setSoldTo((String) property.getValue());
                        property = properties.get(Constants.CustomerName);
                        soBean.setSoldToName((String) property.getValue());
                        property = properties.get(Constants.SalesAreaDesc);
                        if (property != null) {
                            soBean.setSalesAreaDesc((String) property.getValue());
                        }
                        property = properties.get(Constants.SalesArea);
                        if (property != null) {
                            soBean.setSalesArea((String) property.getValue());
                        }
                        property = properties.get(Constants.CustomerPO);
                        soBean.setPONo((String) property.getValue());
                        property = properties.get(Constants.SalesOffice);
                        soBean.setSalesOfficeId(property.getValue().toString());
                        property = properties.get(Constants.SaleOffDesc);
                        soBean.setSaleOffDesc(property.getValue().toString());

                        property = properties.get(Constants.OrderType);
                        soBean.setOrderType((String) property.getValue());
                        property = properties.get(Constants.OrderTypeDesc);
                        soBean.setOrderTypeDesc((String) property.getValue());

                        property = properties.get(Constants.Status);
                        soBean.setStatusID((String) property.getValue());
                        property = properties.get(Constants.StatusDesc);
                        soBean.setStatusDesc((String) property.getValue());
                        property = properties.get(Constants.DelvStatus);
                        soBean.setDelvStatus((String) property.getValue());
                        property = properties.get(Constants.DelvStatusDesc);
                        soBean.setDelvStatusDesc((String) property.getValue());

                        String soTxtQry = Constants.SOTexts + "?$select=" + Constants.Text + " &$filter=SONo eq '" + soBean.getOrderNo() + "'";
                        String soTxt = UtilOfflineManager.getColumnVal(offlineStore, soTxtQry, Constants.Text);
                        soBean.setRemarks(soTxt != null ? soTxt : "");
                        break;
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return soBean;

    }

    /**
     * returns Configurations from value help(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getConfigTysetTypesValues(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.TypesName);
                        configVal[1][incVal] = (String) property.getValue();
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;
    }

    public static ArrayList<DBStockBean> getDBStockList(String retailerStockQry,
                                                        String mStrSelDMSDIVID, String stockOwner, String mStrMatType, String distributorGUID) throws OfflineODataStoreException {

        ArrayList<DBStockBean> retailerStockList = new ArrayList<DBStockBean>();
        ArrayList<String> tempArrList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            DBStockBean retailerStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        retailerStockBean = new DBStockBean();
                        property = properties.get(Constants.CPStockItemGUID);
                        try {
                            ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                            retailerStockBean.setCPStockItemGUID(mSpItemGuid.guidAsString36());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.Material_No);

                        String MatNo = (String) property.getValue();
                        retailerStockBean.setMaterialNo((String) property.getValue());

                        property = properties.get(Constants.DbBatch);
                        retailerStockBean.setBatch((String) property.getValue());


                        property = properties.get(Constants.Material_Desc);
                        retailerStockBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.StockValue);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            retailerStockBean.setStockValue(mStrAmount.toString());
                        }

                        retailerStockBean.setMRP("");
                        retailerStockBean.setRLPrice("");
                        property = properties.get(Constants.Currency);
                        retailerStockBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.MRP);
                        if (property != null) {
                            BigDecimal mStrMrp = (BigDecimal) property.getValue();
                            retailerStockBean.setMRP(mStrMrp.toString());
                        }
                        property = properties.get(Constants.LandingPrice);
                        if (property != null) {
                            BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                            retailerStockBean.setLandingPrice(mStrLandingPrice.toString());
                        }
                        property = properties.get(Constants.OrderMaterialGroupID);
                        String orderMatGroup = (String) property.getValue();
                        retailerStockBean.setOrderMaterialGroupID(orderMatGroup);
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());
                        property = properties.get(Constants.Batch);
                        retailerStockBean.setBatch((String) property.getValue());
                        property = properties.get(Constants.ManufacturingDate);
                        String convertDateFormat = "";
                        if (property != null) {
                            convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        }
                        retailerStockBean.setMFD(convertDateFormat);
                        String unrestrictedQty = "";
                        if (mStrMatType.equalsIgnoreCase(Constants.str_01)) {
                            orderMatGroup = MatNo;
                            unrestrictedQty = getDBStk(Constants.CPStockItems
                                    + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.Material_No + " eq '" + MatNo + "'" +
                                    " and " + Constants.StockOwner + " eq '" + stockOwner + "' and (" + mStrSelDMSDIVID + ")");
                        } else {
                            unrestrictedQty = getDBStk(Constants.CPStockItems
                                    + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.OrderMaterialGroupID + " eq '" + orderMatGroup + "'" +
                                    " and " + Constants.StockOwner + " eq '" + stockOwner + "' and (" + mStrSelDMSDIVID + ")");
                        }


                        property = properties.get(Constants.UOM);
                        retailerStockBean.setUom((String) property.getValue());

                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            retailerStockBean.setQAQty(trimQtyDecimalPlace(unrestrictedQty));
                        else
                            retailerStockBean.setQAQty(unrestrictedQty);
                        //New
                        if (unrestrictedQty != null && Double.parseDouble(unrestrictedQty) > 0) {
                            if (tempArrList.size() == 0) {
                                retailerStockList.add(retailerStockBean);
                                tempArrList.add(orderMatGroup);
                            } else if (!tempArrList.contains(orderMatGroup)) {
                                retailerStockList.add(retailerStockBean);
                                tempArrList.add(orderMatGroup);
                            }
                        }


                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerStockList;

    }

    public static String getDBStk(String dbStkQry) throws OfflineODataStoreException {
        double doubleDBStk = 0.0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, dbStkQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.UnrestrictedQty);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        if (mStrQty != null) {
                            doubleDBStk = doubleDBStk + mStrQty.doubleValue();
                        } else {
                            doubleDBStk = doubleDBStk + 0.0;
                        }

                    }
                }
            }

        }
        return String.format("%.3f", doubleDBStk);
    }

    public static ArrayList<DMSDivisionBean> getDistributorsDms(String distQry) throws OfflineODataStoreException {

        String[][] distList = null;
        HashMap<String, DMSDivisionBean> distMap = new HashMap<>();
        ArrayList<DMSDivisionBean> alDist = new ArrayList<>();
        //  ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, distQry);

            if (entities != null && entities.size() > 0) {

                ArrayList<String> alDMSList = null;
                for (ODataEntity entity : entities) {
                    DMSDivisionBean dmsbean = new DMSDivisionBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.CPNo);

                    String distributorId = (String) property.getValue();
                    if (distMap.containsKey(distributorId)) {

                        property = properties.get(Constants.DMSDivisionID);
                        dmsbean = distMap.get(distributorId);
                        String dmsDiv = dmsbean.getDMSDivisionQuery();
                        dmsbean.setDMSDivisionQuery(dmsDiv + " or startswith(" + Constants.DMSDivision + ",'" + (String) property.getValue() + "')");
                        try {
                            alDMSList = dmsbean.getDmsDIVList();
                            alDMSList.add((String) property.getValue());
                            dmsbean.setDmsDIVList(alDMSList);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        distMap.put(distributorId, dmsbean);
                        // dmsbean.setDMSDivisionQuery((String) property.getValue());
                    } else {
                        dmsbean.setDistributorId(distributorId);
                        property = properties.get(Constants.CPGUID);
                        dmsbean.setDistributorGuid((String) property.getValue());
                        property = properties.get(Constants.CPName);
                        dmsbean.setDistributorName((String) property.getValue());
                        property = properties.get(Constants.DMSDivisionID);
                        dmsbean.setDMSDivisionQuery("startswith(" + Constants.DMSDivision + ",'" + (String) property.getValue() + "')");

                        try {
                            alDMSList = new ArrayList<>();
                            alDMSList.add((String) property.getValue());
                            dmsbean.setDmsDIVList(alDMSList);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.CPTypeID);
                        dmsbean.setStockOwner((String) property.getValue());


                        distMap.put(distributorId, dmsbean);
                    }


                }
            }
            Set keys = distMap.keySet();
            Iterator itr = keys.iterator();

            String key;
            DMSDivisionBean value;
            while (itr.hasNext()) {
                key = (String) itr.next();
                value = (DMSDivisionBean) distMap.get(key);
                alDist.add(value);
            }
        }
        return alDist;

    }

    public static MyTargetsBean getSpecificKpi(String kpiQry, String mStrCPDMSDIVKPIQry) throws OfflineODataStoreException {

        MyTargetsBean kpiBean = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, kpiQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {

                    try {
                        properties = entity.getProperties();
                        String mStrRollUp = "";
                        property = properties.get(Constants.KPIGUID);
                        ODataGuid kpiGuid = null;
                        try {
                            kpiGuid = (ODataGuid) property.getValue();
                            mStrRollUp = getValueByColumnName(Constants.KPIItems + "?$select=" + Constants.RollUpTo + " &$filter = "
                                    + Constants.KPIGUID + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "'", Constants.RollUpTo);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        String activityStatusForVisitQry = Constants.KPIItems + "?$top=1 &$filter=" + Constants.KPIGUID
                                + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "' and " + mStrCPDMSDIVKPIQry + " ";
                        if (getVisitActivityStatusForVisit(activityStatusForVisitQry)) {
                            kpiBean = new MyTargetsBean();
                            kpiBean.setKpiGuid(kpiGuid.guidAsString36().toUpperCase());
                            kpiBean.setRollUpTo(mStrRollUp);

                            property = properties.get(Constants.KPIName);
                            kpiBean.setKPIName((String) property.getValue());


                            property = properties.get(Constants.KPICode);
                            kpiBean.setKPICode((String) property.getValue());

                            property = properties.get(Constants.KPIFor);
                            kpiBean.setKPIFor((String) property.getValue());

                            property = properties.get(Constants.CalculationSource);
                            kpiBean.setCalculationSource((String) property.getValue());

                            property = properties.get(Constants.CalculationBase);
                            kpiBean.setCalculationBase((String) property.getValue());

                            property = properties.get(Constants.KPICategory);
                            kpiBean.setKPICategory((String) property.getValue());
                        }
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }


                }
            }


        }

        return kpiBean;


    }

    public static ArrayList<HashMap<String, String>> getDBStockList(String cpStkQry, Set<String> mSetCpStockItemGuid) throws OfflineODataStoreException {
        ArrayList<HashMap<String, String>> alCRSSKU = new ArrayList<>();
        HashMap<String, String> hashMapDBSTK = new HashMap<>();
        HashMap<String, String> hashMapUOMISDecimal = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            double doubleDBStk = 0.0;
            int count = 0;
            String prevOrdMatGroup = "", currOrdMatGroup = "";
            String prevOrdMatGroupUOM = "", currOrdMatGroupUOM = "";
            BigDecimal mQty = new BigDecimal("0");
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStkQry);
            if (entities != null && entities.size() > 0) {
                try {
                    prevOrdMatGroup = entities.get(0).getProperties().get(Constants.OrderMaterialGroupID).getValue().toString();
                    prevOrdMatGroupUOM = entities.get(0).getProperties().get(Constants.UOM).getValue().toString();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.OrderMaterialGroupID);
                        currOrdMatGroup = (String) property.getValue();


                        property = properties.get(Constants.UOM);
                        currOrdMatGroupUOM = (String) property.getValue();

                        if (!currOrdMatGroup.equals(prevOrdMatGroup)) {

                            hashMapUOMISDecimal.put(prevOrdMatGroup, checkNoUOMZero(prevOrdMatGroupUOM) + "");
                            prevOrdMatGroupUOM = currOrdMatGroupUOM;

                            hashMapDBSTK.put(prevOrdMatGroup, String.valueOf(doubleDBStk));
                            prevOrdMatGroup = currOrdMatGroup;
                            doubleDBStk = 0.0;
                        }
                        property = properties.get(Constants.UnrestrictedQty);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                doubleDBStk = doubleDBStk + mQty.doubleValue();
                            } else {
                                doubleDBStk = doubleDBStk + 0.0;
                            }

                        }

                        if (entities.size() == count + 1) {
                            hashMapUOMISDecimal.put(currOrdMatGroup, checkNoUOMZero(currOrdMatGroupUOM) + "");

                            hashMapDBSTK.put(currOrdMatGroup, String.valueOf(doubleDBStk));

                        }
                        count++;
                    }
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
            }

        }

        alCRSSKU.add(hashMapDBSTK);
        alCRSSKU.add(hashMapUOMISDecimal);
        return alCRSSKU;

    }

    public static ArrayList<HashMap<String, String>> getDBStockListMaterial(String cpStkQry) throws OfflineODataStoreException {
        ArrayList<HashMap<String, String>> alCRSSKU = new ArrayList<>();
        HashMap<String, String> hashMapDBSTKMaterial = new HashMap<>();
        HashMap<String, String> hashMapUOMISDecimalMat = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            double doubleDBStk = 0.0;
            double doubleDBStkMaterial = 0.0;
            int count = 0;
            String prevMaterial = "", currMaterial = "";
            String prevMaterialUOM = "", currMaterialUOM = "";
            BigDecimal mQty = new BigDecimal("0");
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStkQry);
            if (entities != null && entities.size() > 0) {
                try {
                    prevMaterial = entities.get(0).getProperties().get(Constants.MaterialNo).getValue().toString();
                    prevMaterialUOM = entities.get(0).getProperties().get(Constants.UOM).getValue().toString();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialNo);
                        currMaterial = (String) property.getValue();

                        property = properties.get(Constants.UOM);
                        currMaterialUOM = (String) property.getValue();

                        if (!currMaterial.equals(prevMaterial)) {


                            hashMapUOMISDecimalMat.put(prevMaterial, checkNoUOMZero(prevMaterialUOM) + "");
                            prevMaterialUOM = currMaterialUOM;

                            hashMapDBSTKMaterial.put(prevMaterial, String.valueOf(doubleDBStkMaterial));
                            prevMaterial = currMaterial;
                            doubleDBStkMaterial = 0.0;
                        }

                        property = properties.get(Constants.UnrestrictedQty);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                doubleDBStkMaterial = doubleDBStkMaterial + mQty.doubleValue();
                            } else {
                                doubleDBStkMaterial = doubleDBStkMaterial + 0.0;
                            }

                        }


                        if (entities.size() == count + 1) {
                            hashMapUOMISDecimalMat.put(currMaterial, checkNoUOMZero(currMaterialUOM) + "");

                            hashMapDBSTKMaterial.put(currMaterial, String.valueOf(doubleDBStkMaterial));
                        }
                        count++;
                    }
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
            }

        }

        alCRSSKU.add(hashMapDBSTKMaterial);
        alCRSSKU.add(hashMapUOMISDecimalMat);
        return alCRSSKU;

    }

    public static HashMap<String, String> getSegmentedMaterialsList(String segMatqry) throws OfflineODataStoreException {
        HashMap<String, String> hashMapSegMat = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            double doubleRetailerStk = 0.0;
            int count = 0;
            String segID = "", cSegMat = "";
            BigDecimal mQty = new BigDecimal("0");
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, segMatqry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    try {
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialNo);
                        cSegMat = (String) property.getValue();
                        property = properties.get(Constants.SegmentId);
                        segID = (String) property.getValue();
                        hashMapSegMat.put(cSegMat, segID);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }
        return hashMapSegMat;

    }

    public static HashMap<String, String> getTargetByOrderMatGrp(HashMap<String, String> mMapOrderMatGrp, String mCPGuid, String mTargetQry) throws OfflineODataStoreException {
        HashMap<String, String> hashMapTargetQty = new HashMap<>();

        if (getVisitStatusForCustomer("" + Constants.TargetItems +
                "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' ")) {
            if (mTargetQry != null && !mTargetQry.equalsIgnoreCase("")) {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, Constants.TargetItems
                        + "?$select=" + Constants.TargetQty + "," + Constants.OrderMaterialGroupID + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' and " + mTargetQry + "" +
                        "  ");
                ODataProperty property;
                ODataPropMap properties;
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        try {
                            properties = entity.getProperties();

                            Double mDobTargetQty = 0.0;

                            property = properties.get(Constants.TargetQty);
                            try {
                                BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                                mDobTargetQty = monthTargetVal.doubleValue();
                            } catch (Exception e) {
                                mDobTargetQty = 0.0;
                                e.printStackTrace();
                            }

                            if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                                mDobTargetQty = 0.0;
                            }

                            property = properties.get(Constants.OrderMaterialGroupID);
                            hashMapTargetQty.put((String) property.getValue(), String.valueOf(mDobTargetQty));
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }


                }
            }
        }
        return hashMapTargetQty;
    }

    public static HashMap<String, String> getSSInvItmQtyByOrderMatGrp(HashMap<String, String> mMapOrderMatGrp, String mCPGuid, String mTargetQry) throws OfflineODataStoreException {
        HashMap<String, String> hashMaPSSInvItemQty = new HashMap<>();

        double doubleInvQty = 0.0;
        int count = 0;
        String prevOrdMatGroup = "", currOrdMatGroup = "";
        BigDecimal mQty = new BigDecimal("0");

        String getInvoiceGuid = getInvoiceGuid(mCPGuid);
        if (!TextUtils.isEmpty(getInvoiceGuid)) {
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, Constants.SSInvoiceItemDetails
                    + "?$select=" + Constants.OrderMaterialGroup + "," + Constants.Quantity + " &$filter=" + mTargetQry + " and " + getInvoiceGuid + " &$orderby=" + Constants.OrderMaterialGroup + " ");
            ODataProperty property;
            ODataPropMap properties;
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    try {
                        properties = entity.getProperties();

                        property = properties.get(Constants.OrderMaterialGroup);
                        currOrdMatGroup = (String) property.getValue();
                        if (!currOrdMatGroup.equals(prevOrdMatGroup)) {
                            hashMaPSSInvItemQty.put(prevOrdMatGroup, String.valueOf(doubleInvQty));
                            prevOrdMatGroup = currOrdMatGroup;
                            doubleInvQty = 0.0;
                        }
                        property = properties.get(Constants.Quantity);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                doubleInvQty = doubleInvQty + mQty.doubleValue();
                            } else {
                                doubleInvQty = doubleInvQty + 0.0;
                            }

                        }
                        if (entities.size() == count + 1) {
                            hashMaPSSInvItemQty.put(currOrdMatGroup, String.valueOf(doubleInvQty));
                        }
                        count++;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return hashMaPSSInvItemQty;
    }

    private static String getInvoiceGuid(String mCPGuid) throws OfflineODataStoreException {
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, Constants.SSINVOICES + "?$select=" + Constants.InvoiceGUID + " &$filter=" + Constants.SoldToCPGUID + " eq guid'" + Constants.convertStrGUID32to36(mCPGuid) + "' and " + Constants.InvoiceDate +
                " ge datetime'" + Constants.getFirstDateOfCurrentMonth() + "' and " + Constants.InvoiceDate + " lt datetime'" + UtilConstants.getNewDate() + "'");
        ODataProperty property;
        ODataPropMap properties;
        String invoiceGuid = "";
        if (entities != null && entities.size() > 0) {
            int i = 0;
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.InvoiceGUID);
                try {
                    ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                    String invoiceGuid32 = mInvoiceGUID.guidAsString32().toUpperCase();
                    if (i == 0 && i == entities.size() - 1) {
                        invoiceGuid = invoiceGuid
                                + "(" + Constants.InvoiceGUID + " eq guid'"
                                + Constants.convertStrGUID32to36(invoiceGuid32).toUpperCase() + "')";

                    } else if (i == 0) {
                        invoiceGuid = invoiceGuid
                                + "(" + Constants.InvoiceGUID + " eq guid'"
                                + Constants.convertStrGUID32to36(invoiceGuid32).toUpperCase() + "'";

                    } else if (i == entities.size() - 1) {
                        invoiceGuid = invoiceGuid
                                + " or " + Constants.InvoiceGUID + " eq guid'"
                                + Constants.convertStrGUID32to36(invoiceGuid32).toUpperCase() + "')";
                    } else {
                        invoiceGuid = invoiceGuid
                                + " or " + Constants.InvoiceGUID + " eq guid'"
                                + Constants.convertStrGUID32to36(invoiceGuid32).toUpperCase() + "'";
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                i++;
            }
        }
        return invoiceGuid;
    }

    public static ArrayList<MyTargetsBean> getMyTargetsByKPI(MyTargetsBean arrayList, String mStrSPGuid) throws OfflineODataStoreException {
        ArrayList<MyTargetsBean> myTargetList = new ArrayList<>();


        String qryTargets = Constants.Targets + "?$filter=" + Constants.KPIGUID + " eq guid'"
                + arrayList.getKpiGuid() + "'";
        ArrayList<MyTargetsBean> myTargetsBeanArrayList = OfflineManager.getMyTargetsListByTodayRouteRetailer(qryTargets, mStrSPGuid,
                arrayList.getKPIName(), arrayList.getKPICode(), arrayList.getKpiGuid(),
                arrayList.getCalculationBase(), arrayList.getKPIFor(),
                arrayList.getCalculationSource(), arrayList.getRollUpTo(), arrayList.getKPICategory());
        if (myTargetsBeanArrayList != null && myTargetsBeanArrayList.size() > 0) {
            if (myTargetList != null && myTargetList.size() > 0) {
                myTargetList.addAll(myTargetList.size(), myTargetsBeanArrayList);
            } else {
                myTargetList.addAll(myTargetsBeanArrayList);
            }
        } else {
            MyTargetsBean targetsBean = new MyTargetsBean();
            targetsBean.setKPICode(arrayList.getKPICode());
            targetsBean.setKPIName(arrayList.getKPIName());
            targetsBean.setKpiGuid(arrayList.getKpiGuid());
            targetsBean.setCalculationBase(arrayList.getCalculationBase());
            targetsBean.setCalculationSource(arrayList.getCalculationBase());
            targetsBean.setKPIFor(arrayList.getKPIFor());
            targetsBean.setKPICategory(arrayList.getKPICategory());
            targetsBean.setMonthTarget("0");
            targetsBean.setMTDA("0");
            targetsBean.setAchivedPercentage("0");
            targetsBean.setBTD("0");
            myTargetList.add(targetsBean);


        }

        return myTargetList;
    }

    public static Map<String, MyTargetsBean> getALMyTargetList(ArrayList<MyTargetsBean> alMyTargets) {
        Map<String, MyTargetsBean> mapMyTargetBean = new HashMap<>();
        Map<String, Double> mapMonthTarget = new HashMap<>();
        Map<String, Double> mapMonthAchived = new HashMap<>();
        if (alMyTargets != null && alMyTargets.size() > 0) {
            for (MyTargetsBean bean : alMyTargets)
                if (mapMonthTarget.containsKey(UtilConstants.removeLeadingZeros(bean.getKPICode()))) {
                    double mDoubMonthTarget = Double.parseDouble(bean.getMonthTarget()) + mapMonthTarget.get(UtilConstants.removeLeadingZeros(bean.getKPICode()));
                    double mDoubMonthAchived = Double.parseDouble(bean.getMTDA()) + mapMonthAchived.get(UtilConstants.removeLeadingZeros(bean.getKPICode()));

                    mapMonthTarget.put(UtilConstants.removeLeadingZeros(bean.getKPICode()), mDoubMonthTarget);
                    mapMonthAchived.put(UtilConstants.removeLeadingZeros(bean.getKPICode()), mDoubMonthAchived);

                    bean.setMonthTarget(mDoubMonthTarget + "");
                    bean.setMTDA(mDoubMonthAchived + "");
                    mapMyTargetBean.put(UtilConstants.removeLeadingZeros(bean.getKPICode()), bean);
                } else {
                    double mDoubMonthTarget = Double.parseDouble(bean.getMonthTarget());
                    double mDoubMonthAchived = Double.parseDouble(bean.getMTDA());

                    mapMonthTarget.put(UtilConstants.removeLeadingZeros(bean.getKPICode()), mDoubMonthTarget);
                    mapMonthAchived.put(UtilConstants.removeLeadingZeros(bean.getKPICode()), mDoubMonthAchived);

                    mapMyTargetBean.put(UtilConstants.removeLeadingZeros(bean.getKPICode()), bean);
                }
        }
        return mapMyTargetBean;
    }

    public static double getDeviceTotalOrderQtyByRetailer(String createType, Context context, String mStrCurrentDate, String alTodayRetailer, String mGetColumnName) {

        double mDoubleDevOrdeQty = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SSSOs)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRetailer.equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SoldToId))) {
                            mDoubleDevOrdeQty = mDoubleDevOrdeQty + Double.parseDouble(fetchJsonHeaderObject.getString(mGetColumnName));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrdeQty;
    }

    public static ArrayList<MyTargetsBean> getMyTargetsListByTodayRouteRetailer(String myTargetQry, String mStrSPGuid,
                                                                                String mStrKpiName, String mStrKpiCode, String mStrKpiGuid,
                                                                                String mStrCalBase, String mStrKpiFor, String mStrCalSource
            , String mStrRollUPto, String mStrKPICAT) throws OfflineODataStoreException {

        ArrayList<MyTargetsBean> myTargetList = new ArrayList<>();


        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MyTargetsBean myTargetBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, myTargetQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {

                    properties = entity.getProperties();

                    property = properties.get(Constants.TargetGUID);
                    ODataGuid mTargetGuid = null;
                    try {
                        mTargetGuid = (ODataGuid) property.getValue();

                    } catch (Exception e) {
                        e.printStackTrace();
                    }


                    ArrayList<MyTargetsBean> arrayList = getMyTargetItemsListByTodayRetailer(mTargetGuid.guidAsString36(), mStrSPGuid,
                            mStrCalBase, mStrRollUPto, mStrKpiName, mStrKpiGuid, mStrKPICAT);

                    if (myTargetList != null && myTargetList.size() > 0) {
                        if (arrayList != null && arrayList.size() > 0) {
                            myTargetList.addAll(myTargetList.size(), arrayList);
                        }
                    } else {
                        if (arrayList != null && arrayList.size() > 0) {
                            myTargetList.addAll(arrayList);
                        }
                    }
                }
            }
        }

        return myTargetList;

    }

    public static ArrayList<MyTargetsBean> getMyTargetItemsListByTodayRetailer(String targetGuid, String mCPGuid,
                                                                               String mStrCalBase, String mStrRollUp,
                                                                               String mStrKpiName, String mStrKpiGuid, String mStrKPICAT) {
        ArrayList<MyTargetsBean> arrayList = new ArrayList<>();
        List<ODataEntity> entities = null;

        String mStrTargetQry = "", mSelectQry = "";

        try {

            if (getVisitStatusForCustomer("" + Constants.TargetItems +
                    "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' and "
                    + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase() + "' ")) {

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc + "," + Constants.UOM;
                } else {

                    mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc;
                }


                mStrTargetQry = Constants.TargetItems +
                        "?$select=" + mSelectQry + " &$filter=" + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase()
                        + "' and " + Constants.PartnerGUID + " eq '" + mCPGuid + "'";

            }
        } catch (Exception e) {
            e.printStackTrace();
        }


        if (!mStrTargetQry.equalsIgnoreCase("")) {
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrTargetQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();


                MyTargetsBean myTargetBean = new MyTargetsBean();

                String monthTarget = "", actualTarget = "";
                Double mDobTargetQty = 0.0, mDobActQty = 0.0;
                if (mStrCalBase.equalsIgnoreCase("01")) {


                    property = properties.get(Constants.TargetQty);
                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobTargetQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobTargetQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                        mDobTargetQty = 0.0;
                    }
//                    monthTarget = mDobTargetQty + "";
                    monthTarget = String.format("%.3f", mDobTargetQty);
                    property = properties.get(Constants.UOM);
                    try {
                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            monthTarget = trimQtyDecimalPlace(monthTarget);
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }

                    property = properties.get(Constants.ActualQty);

                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobActQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobActQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                        mDobActQty = 0.0;
                    }
//                    actualTarget = mDobActQty + "";
                    actualTarget = String.format("%.3f", mDobActQty);
                    property = properties.get(Constants.UOM);
                    try {
                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            actualTarget = trimQtyDecimalPlace(actualTarget);
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }
                } else {

                    property = properties.get(Constants.TargetValue);
                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobTargetQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobTargetQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                        mDobTargetQty = 0.0;
                    }
                    monthTarget = mDobTargetQty + "";

                    property = properties.get(Constants.ActualValue);

                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobActQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobActQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                        mDobActQty = 0.0;
                    }
                    actualTarget = mDobActQty + "";
                }

                if (monthTarget != null) {
                    myTargetBean.setMonthTarget(!monthTarget.toString().equalsIgnoreCase("") ? monthTarget.toString() : "0");
                } else {
                    myTargetBean.setMonthTarget("0");
                }

                if (actualTarget != null) {
                    myTargetBean.setMTDA(!actualTarget.toString().equalsIgnoreCase("") ? actualTarget.toString() : "0");
                } else {
                    myTargetBean.setMTDA("0");
                }

                double mDouAchivedPercentage = getAchivedPer(monthTarget, actualTarget);

                double mDoubBTD = getBTD(monthTarget, actualTarget);

                myTargetBean.setAchivedPercentage(mDouAchivedPercentage + "");
                myTargetBean.setBTD(mDoubBTD + "");

                property = properties.get(Constants.MaterialNo);
                myTargetBean.setMaterialNo((String) property.getValue());

                property = properties.get(Constants.MaterialDesc);
                myTargetBean.setMaterialDesc((String) property.getValue());

                property = properties.get(Constants.MaterialGroup);
                myTargetBean.setMaterialGroup((String) property.getValue());

                property = properties.get(Constants.MaterialGrpDesc);
                myTargetBean.setMaterialGrpDesc((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupID);
                myTargetBean.setOrderMaterialGroupID((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupDesc);
                myTargetBean.setOrderMaterialGroupDesc((String) property.getValue());

                myTargetBean.setKPIName(mStrKpiName);

                property = properties.get(Constants.KPICode);
                String mStrKpiCodeVal = (String) property.getValue();

                myTargetBean.setKPICode(mStrKpiCodeVal);

                myTargetBean.setKpiGuid(mStrKpiGuid);

                myTargetBean.setKPICategory(mStrKPICAT);

                myTargetBean.setCalculationBase(mStrCalBase);

                arrayList.add(myTargetBean);
            }
        }
        return arrayList;
    }

    public static ArrayList<HashMap<String, String>> getRetStockList(String cpStkQry) throws OfflineODataStoreException {
        ArrayList<HashMap<String, String>> alCRSSKU = new ArrayList<>();
        HashMap<String, String> hashMapRetilerSTK = new HashMap<>();
        HashMap<String, String> hashMapUOMISDecimal = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            double doubleRetailerStk = 0.0;
//            int count = 0;
            String /*prevOrdMatGroup = "",*/ currOrdMatGroup = "", currentUOM = "";
            BigDecimal mQty = new BigDecimal("0");
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStkQry);
            if (entities != null && entities.size() > 0) {
                try {
//                    prevOrdMatGroup = entities.get(0).getProperties().get(Constants.OrderMaterialGroupID).getValue().toString();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.OrderMaterialGroupID);
                        currOrdMatGroup = (String) property.getValue();

                        property = properties.get(Constants.UOM);
                        currentUOM = (String) property.getValue();

                        doubleRetailerStk = 0.0;
                        property = properties.get(Constants.UnrestrictedQty);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                doubleRetailerStk = mQty.doubleValue();
                            } else {
                                doubleRetailerStk = 0.0;
                            }

                        }

                        if (!hashMapRetilerSTK.containsKey(currOrdMatGroup)) {
                            hashMapRetilerSTK.put(currOrdMatGroup, String.valueOf(doubleRetailerStk));
                            hashMapUOMISDecimal.put(currOrdMatGroup, currentUOM);
//                            doubleRetailerStk = 0.0;
                        }
                       /* property = properties.get(Constants.UnrestrictedQty);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                doubleRetailerStk = doubleRetailerStk + mQty.doubleValue();
                            } else {
                                doubleRetailerStk = doubleRetailerStk + 0.0;
                            }

                        }*/

//                        if (entities.size() == count + 1) {
//                            hashMapRetilerSTK.put(currOrdMatGroup, String.valueOf(doubleRetailerStk));
//                        }
//                        count++;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }
//        return hashMapRetilerSTK;
        alCRSSKU.add(hashMapRetilerSTK);
        alCRSSKU.add(hashMapUOMISDecimal);
        return alCRSSKU;

    }

    public static HashMap<String, String> getMaterialRetStockList(String cpStkQry) throws OfflineODataStoreException {
        HashMap<String, String> hashMapRetilerSTK = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            double doubleRetailerStk = 0.0;
//            int count = 0;
            String /*preMaterial = "",*/ currMaterial = "";
            BigDecimal mQty = new BigDecimal("0");
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStkQry);
            if (entities != null && entities.size() > 0) {
                try {
//                    if(entities.get(0).getProperties().get(Constants.MaterialNo).getValue()!=null){
//                        preMaterial = entities.get(0).getProperties().get(Constants.MaterialNo).getValue().toString();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialNo);
                        currMaterial = (String) property.getValue();
                        doubleRetailerStk = 0.0;
                        property = properties.get(Constants.UnrestrictedQty);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                doubleRetailerStk = mQty.doubleValue();
                            } else {
                                doubleRetailerStk = 0.0;
                            }

                        }
                        if (!hashMapRetilerSTK.containsKey(currMaterial)) {
                            hashMapRetilerSTK.put(currMaterial, String.valueOf(doubleRetailerStk));
//                                doubleRetailerStk = 0.0;
                        }
                           /* property = properties.get(Constants.UnrestrictedQty);
                            if (property != null) {
                                mQty = (BigDecimal) property.getValue();
                                if (mQty != null) {
                                    doubleRetailerStk =  mQty.doubleValue();
                                } else {
                                    doubleRetailerStk =  0.0;
                                }

                            }*/


                    }
//                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }

        }
        return hashMapRetilerSTK;

    }

    public static ArrayList<CPDMSDivisionBean> getCPDMSDivisionList(String query) {
        ArrayList<CPDMSDivisionBean> cpDMSDivisionList = new ArrayList<>();
        if (offlineStore != null) {
            CPDMSDivisionBean cpdmsDivisionBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, query);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        cpdmsDivisionBean = new CPDMSDivisionBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.DMSDivision);
                        cpdmsDivisionBean.setdMSDivision((String) property.getValue());
                        property = properties.get(Constants.Group1);
                        cpdmsDivisionBean.setGroup1((String) property.getValue());
                        property = properties.get(Constants.Group2);
                        cpdmsDivisionBean.setGroup2((String) property.getValue());
                        property = properties.get(Constants.Group3);
                        cpdmsDivisionBean.setGroup3((String) property.getValue());
                        property = properties.get(Constants.Group4);
                        cpdmsDivisionBean.setGroup4((String) property.getValue());
                        cpDMSDivisionList.add(cpdmsDivisionBean);
                    }
                }

            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }
        return cpDMSDivisionList;
    }

    public static HashMap<String, ArrayList<String>> getSchemeGuidByMaterial(String schemeQry, HashMap<String, ArrayList<String>> hashMapSchemeMatByMaterial) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.SchemeGUID);
                    String mStrSchemeGuid = "";
                    try {
                        ODataGuid mSchmeGUID = (ODataGuid) property.getValue();
                        mStrSchemeGuid = mSchmeGUID.guidAsString36().toUpperCase();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.MaterialNo);
                    String matNo = (String) property.getValue();
                    ArrayList<String> schemeGuidArrayList = hashMapSchemeMatByMaterial.get(matNo);
                    if (schemeGuidArrayList == null) {
                        schemeGuidArrayList = new ArrayList<>();
                        schemeGuidArrayList.add(mStrSchemeGuid);
                        hashMapSchemeMatByMaterial.put(matNo, schemeGuidArrayList);
                    } else {
                        schemeGuidArrayList.add(mStrSchemeGuid);
                        hashMapSchemeMatByMaterial.put(matNo, schemeGuidArrayList);
                    }
                }
            }
        }

        return hashMapSchemeMatByMaterial;
    }

    @SuppressLint("LongLogTag")
    public static ArrayList<SKUGroupBean> getCRSSKUGroup(String cpStkQry, String cpDmsDivQry,
                                                         HashMap<String, String> hashMAPDBStk, HashMap<String, String> hashMapRetailerStk,
                                                         HashMap<String, String> hashMapRetailerStkUOM,
                                                         HashMap<String, String> hashMapInvQtyByCrsskugrp, HashMap<String, String> hashMapUOMByCrsskugrp,
                                                         ArrayList<HashMap<String, String>> alMapMaterialDBStkUOM,
                                                         HashMap<String, String> hashMapRetStockByMat, String stockOwner, String mStrParentId,
                                                         HashMap<String, MustSellBean> mapMustSell,
                                                         ArrayList<SchemeIDBean> orderMaterialGrpSchemeId,
                                                         HashMap<String, ArrayList<String>> hashMapSchemeGuidMatByMaterial, HashMap<String, String> hashMapSegmentedMat) throws OfflineODataStoreException {

        String strDefaultUOM = Constants.getName(Constants.ConfigTypsetTypeValues, Constants.TypeValue, Constants.Types, Constants.CPSTKAUOM1);
        ArrayList<String> schemeGuidList;
        String qpsSchemeGUID = "";
        ArrayList<SKUGroupItemBean> skuGroupItemBeanArrayList = null;
        ArrayList<SKUGroupBean> alCRSSKUGrpList = new ArrayList<>();
        ArrayList<SKUGroupBean> alCRSSKUGrpListTemp = new ArrayList<>();
        ArrayList<String> tempArrList = new ArrayList<>();
        String mCRSSKUQry = "";
        Log.d("Time getSchemeGuidByMaterial", UtilConstants.getSyncHistoryddmmyyyyTime());
        SKUGroupBean skuGrpBean = null;
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStkQry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                skuGrpBean = new SKUGroupBean();
                properties = entity.getProperties();
                property = properties.get(Constants.OrderMaterialGroupID);
                String orderMatGrpId = (String) property.getValue();
                skuGrpBean.setSKUGroup(orderMatGrpId);
                property = properties.get(Constants.OrderMaterialGroupDesc);
                skuGrpBean.setSKUGroupDesc((String) property.getValue());
                property = properties.get(Constants.MaterialNo);
                String matNo = (String) property.getValue();
                property = properties.get(Constants.MaterialDesc);
                String matSkuDesc = (String) property.getValue();
                skuGrpBean.setMaterialNo(matNo);
                skuGrpBean.setMaterialDesc(matSkuDesc);
                boolean isCrsSkuAval = false;
                if (tempArrList.size() == 0) {
                    isCrsSkuAval = true;
                } else if (!tempArrList.contains(orderMatGrpId)) {
                    isCrsSkuAval = true;
                }
                if (isCrsSkuAval) {
                    ArrayList<String> alUomValues = new ArrayList<>();
                    property = properties.get(Constants.CPStockItemGUID);
                    ODataGuid mCpStockItemGuid = null;
                    try {
                        mCpStockItemGuid = (ODataGuid) property.getValue();
                        skuGrpBean.setCPStockItemGUID(mCpStockItemGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.UOM);
                    String UOM = (String) property.getValue();
                    if (!alUomValues.contains(UOM))
                        alUomValues.add(UOM);
                    skuGrpBean.setUOM(UOM);
                    String qty = "0";

                    try {
                        if (hashMapUOMByCrsskugrp.get(orderMatGrpId).equalsIgnoreCase(Constants.IS_TRUE))
                            skuGrpBean.setDBSTK(trimQtyDecimalPlace(hashMAPDBStk.get(orderMatGrpId)));
                        else
                            skuGrpBean.setDBSTK(hashMAPDBStk.get(orderMatGrpId));
                    } catch (Exception e) {
                        skuGrpBean.setDBSTK(hashMAPDBStk.get(orderMatGrpId));
                    }


                    double mCalActQty = 0.0;
                    try {
                        mCalActQty = Double.parseDouble(hashMapInvQtyByCrsskugrp.get(orderMatGrpId) != null ? hashMapInvQtyByCrsskugrp.get(orderMatGrpId) : "0");
                    } catch (NumberFormatException e) {
                        mCalActQty = 0.0;
                        e.printStackTrace();
                    }
                    // TODO if must sell is done disable below code
                    // suggestion order qty Start
                        /*String soqQty = getSOQ(hashMapTargetByCrsskugrp.get(orderMatGrpId) != null ? hashMapTargetByCrsskugrp.get(orderMatGrpId) : "0",
                                String.valueOf(mCalActQty), mIntBalVisitRet);

                        try {
                            if (hashMapUOMByCrsskugrp.get(orderMatGrpId).equalsIgnoreCase(Constants.IS_TRUE))
                                skuGrpBean.setSOQ(trimQtyDecimalUpvalue(soqQty));
                            else
                                skuGrpBean.setSOQ(trimQtyDecimalUpvalue(soqQty));
                        } catch (Exception e) {
                            skuGrpBean.setSOQ(trimQtyDecimalUpvalue(soqQty));
                        }*/
                    // suggestion order qty End

                    // TODO if must sell is done enable below code
                    // mustsell start code

                    // Check material is focused and new product
                    try {
                        if (skuGrpBean.getMatTypeVal().equalsIgnoreCase("")) {
                            if (hashMapSegmentedMat.containsKey(matNo)) {
                                skuGrpBean.setMatTypeVal(hashMapSegmentedMat.get(matNo));
                            } else {
                                skuGrpBean.setMatTypeVal("");
                            }
                        }
                    } catch (Exception e) {
                        skuGrpBean.setMatTypeVal("");
                        e.printStackTrace();
                    }

                    String mStrSOQQTY = "0";
                    try {
                        mStrSOQQTY = mapMustSell.get(orderMatGrpId) != null ? mapMustSell.get(orderMatGrpId).getSOQ() : "0";
                    } catch (Exception e) {
                        mStrSOQQTY = "0";
                        e.printStackTrace();
                    }

                    String calSOQQty = "0";
                    try {
                        calSOQQty = getSOQNew(mStrSOQQTY,
                                String.valueOf(mCalActQty));
                    } catch (Exception e) {
                        calSOQQty = "0";
                        e.printStackTrace();
                    }

                    try {
                        skuGrpBean.setSOQ(Constants.trimQtyDecimalUpvalue(calSOQQty));
                    } catch (Exception e) {
                        skuGrpBean.setSOQ("0");
                        e.printStackTrace();
                    }
                    // mustsell end code
                    skuGrpBean.setMRP("0.00");

                    try {
                        if (UOM.equals("PC")) {
                            skuGrpBean.setRETSTK(hashMapRetailerStk.get(orderMatGrpId) != null ? trimQtyDecimalPlace(hashMapRetailerStk.get(orderMatGrpId)) : "0");
                        } else {
                            skuGrpBean.setRETSTK(hashMapRetailerStk.get(orderMatGrpId) != null ? hashMapRetailerStk.get(orderMatGrpId) : "0");
                        }
                    } catch (Exception e) {
                        skuGrpBean.setRETSTK("0");
                        e.printStackTrace();
                    }
                    try {
                        skuGrpBean.setRETSTKUOM(hashMapRetailerStkUOM.get(orderMatGrpId) != null ? trimQtyDecimalPlace(hashMapRetailerStkUOM.get(orderMatGrpId)) : "");
                    } catch (Exception e) {
                        skuGrpBean.setRETSTKUOM("");
                        e.printStackTrace();
                    }

                    // TODO if must sell is done disable below code
                    // Start Code
                    // Check material is must sell or not and check un billed status

                       /* if (hashMapMustSellMatAvgContribution.containsKey(orderMatGrpId)) {
                            if (mDouMustSellAvgContribution < 80) {
                                Constants.Map_Must_Sell_Mat.put(orderMatGrpId, "");
                                mDouMustSellAvgContribution = mDouMustSellAvgContribution + Double.parseDouble(hashMapMustSellMatAvgContribution.get(orderMatGrpId));
                                skuGrpBean.setMatTypeVal(Constants.MustSellId);
                            }
                            skuGrpBean.setUnBilledStatus(Constants.X);
                        } else {
                            skuGrpBean.setUnBilledStatus("");
                        }

                        // Check material is focused and new product
                        if (skuGrpBean.getMatTypeVal().equalsIgnoreCase("")) {
                            if (hashMapSegMat.containsKey(matNo)) {
                                Constants.Map_Must_Sell_Mat.put(orderMatGrpId, "");
                                skuGrpBean.setMatTypeVal(hashMapSegMat.get(matNo));
                            } else {
                                skuGrpBean.setMatTypeVal("");
                            }
                        }*/
                    // End Code

                    // TODO if must sell is done enable below code
                    // mustsell start code
                   /* try {
                        skuGrpBean.setMatTypeVal(mapMustSell.get(orderMatGrpId).getSellIndicator() != null ? mapMustSell.get(orderMatGrpId).getSellIndicator() : "");
                    } catch (Exception e) {
                        skuGrpBean.setMatTypeVal("");
                        e.printStackTrace();
                    }*/
                    // mustsell end code

                    property = properties.get(Constants.Currency);
                    skuGrpBean.setCurrency((String) property.getValue());

                    property = properties.get(ConstantsUtils.AlternativeUOM1);
                    try {
                        if (property != null) {
                            UOM = (String) property.getValue();
                            if (UOM != null && !UOM.equalsIgnoreCase("")) {
                                skuGrpBean.setAlternativeUOM1((String) property.getValue());
                                if (!alUomValues.contains(UOM))
                                    alUomValues.add(UOM);
                            } else {
                                skuGrpBean.setAlternativeUOM1("");
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    property = properties.get(ConstantsUtils.AlternativeUOM2);
                    try {
                        if (property != null) {
                            UOM = (String) property.getValue();
                            if (UOM != null && !UOM.equalsIgnoreCase("")) {
                                skuGrpBean.setAlternativeUOM2((String) property.getValue());
                                if (!alUomValues.contains(UOM))
                                    alUomValues.add(UOM);
                            } else {
                                skuGrpBean.setAlternativeUOM2("");
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    property = properties.get(ConstantsUtils.AlternativeUOM1Num);
                    if (property != null) {
                        BigDecimal mDecimialUnrestrictedQty = (BigDecimal) property.getValue();
                        Double doubleMatQty = 0.0;
                        if (mDecimialUnrestrictedQty != null) {
                            doubleMatQty = mDecimialUnrestrictedQty.doubleValue();
                        } else {
                            doubleMatQty = 0.0;
                        }
                        skuGrpBean.setAlternativeUOM1Num(doubleMatQty + "");
                    } else {
                        skuGrpBean.setAlternativeUOM1Num("0");
                    }

                    property = properties.get(ConstantsUtils.AlternativeUOM1Den);
                    if (property != null) {
                        BigDecimal mDecimialUnrestrictedQty = (BigDecimal) property.getValue();
                        Double doubleMatQty = 0.0;
                        if (mDecimialUnrestrictedQty != null) {
                            doubleMatQty = mDecimialUnrestrictedQty.doubleValue();
                        } else {
                            doubleMatQty = 0.0;
                        }
                        skuGrpBean.setAlternativeUOM1Den(doubleMatQty + "");
                    } else {
                        skuGrpBean.setAlternativeUOM1Den("0");
                    }

                    property = properties.get(ConstantsUtils.AlternativeUOM2Num);
                    if (property != null) {
                        BigDecimal mDecimialUnrestrictedQty = (BigDecimal) property.getValue();
                        Double doubleMatQty = 0.0;
                        if (mDecimialUnrestrictedQty != null) {
                            doubleMatQty = mDecimialUnrestrictedQty.doubleValue();
                        } else {
                            doubleMatQty = 0.0;
                        }
                        skuGrpBean.setAlternativeUOM2Num(doubleMatQty + "");
                    } else {
                        skuGrpBean.setAlternativeUOM2Num("0");
                    }

                    property = properties.get(ConstantsUtils.AlternativeUOM2Den);
                    if (property != null) {
                        BigDecimal mDecimialUnrestrictedQty = (BigDecimal) property.getValue();
                        Double doubleMatQty = 0.0;
                        if (mDecimialUnrestrictedQty != null) {
                            doubleMatQty = mDecimialUnrestrictedQty.doubleValue();
                        } else {
                            doubleMatQty = 0.0;
                        }
                        skuGrpBean.setAlternativeUOM2Den(doubleMatQty + "");
                    } else {
                        skuGrpBean.setAlternativeUOM2Den("0");
                    }

                    skuGrpBean.setAlUOM(alUomValues);
                   /* if (alUomValues.contains(strDefaultUOM))
                        skuGrpBean.setSelectedUOM(strDefaultUOM);
                    else
                        skuGrpBean.setSelectedUOM("");*/

                    skuGrpBean.setSelectedUOM(skuGrpBean.getUOM());

                    skuGrpBean.setChildItemTag("");
                    property = properties.get(ConstantsUtils.Brand);
                    skuGrpBean.setBrand((String) property.getValue());
                    property = properties.get(ConstantsUtils.SKUGroup);
                    skuGrpBean.setSKUGroupID((String) property.getValue());
                    property = properties.get(ConstantsUtils.Banner);
                    skuGrpBean.setBanner((String) property.getValue());
                    property = properties.get(ConstantsUtils.ProductCategoryID);
                    skuGrpBean.setProductCategoryID((String) property.getValue());

                    skuGrpBean.setHeader(true);

                    ArrayList<SKUGroupBean> matList = new ArrayList<>();
                    skuGrpBean.setSkuSubGroupBeanArrayList(matList);

                    if (mCRSSKUQry.length() == 0) {
                        mCRSSKUQry += "'" + orderMatGrpId + "'";

                    } else {
                        mCRSSKUQry += " or " + Constants.OrderMaterialGroupID + " eq '" + orderMatGrpId + "'";

                    }
                    alCRSSKUGrpList.add(skuGrpBean);
                    tempArrList.add(orderMatGrpId);
                }
            }
        }
        Log.d("Time start getMaterialsByTest", UtilConstants.getSyncHistoryddmmyyyyTime());
        if (alCRSSKUGrpList != null && alCRSSKUGrpList.size() > 0) {
            String mCPItmQry = "", mCPItmMRPQry = "";
            if (!mCRSSKUQry.equalsIgnoreCase("")) {
//                mCPItmQry = Constants.CPStockItems + "?$filter=(" + Constants.OrderMaterialGroupID + " eq " + mCRSSKUQry + ") and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' and " + cpDmsDivQry + " and " + Constants.StockOwner + " eq '" + stockOwner + "' and " + Constants.CPGUID + " eq '" + mStrParentId + "' &$orderby= " + Constants.ManufacturingDate + "%20desc ";
                mCPItmQry = Constants.CPStockItems + "?$filter=(" + Constants.OrderMaterialGroupID + " eq " + mCRSSKUQry + ") and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' and " + "startswith(" + Constants.DMSDivision + ",'" +cpDmsDivQry + "') and " + Constants.StockOwner + " eq '" + stockOwner + "' and " + Constants.CPGUID + " eq '" + mStrParentId + "' &$orderby= " + Constants.ManufacturingDate + "%20desc ";
            }

            HashMap<String, ArrayList<SKUGroupBean>> hashMapSKUMatByMaterial = getMaterialsByTest(mCPItmQry, alMapMaterialDBStkUOM,
                    hashMapRetStockByMat, "", strDefaultUOM, hashMapSegmentedMat);
            Log.d("Time getMaterialsByTest", UtilConstants.getSyncHistoryddmmyyyyTime());
            if (hashMapSKUMatByMaterial.size() > 0) {
                for (SKUGroupBean skuGroupBean : alCRSSKUGrpList) {
                    if (hashMapSKUMatByMaterial.containsKey(skuGroupBean.getSKUGroup())) {
                        // Set Scheme Guid to bean 26/09/2017
                        schemeGuidList = schemeGuid(orderMaterialGrpSchemeId, skuGroupBean.getSKUGroup());
                        qpsSchemeGUID = checkQPSSchemeGuid(orderMaterialGrpSchemeId, skuGroupBean.getSKUGroup());
                        skuGroupItemBeanArrayList = new ArrayList<>();
                        if (!schemeGuidList.isEmpty() || !TextUtils.isEmpty(qpsSchemeGUID)) {
                            Constants.BoolMatWiseSchemeAvalible = false;
                            Constants.BoolMatWiseQPSSchemeAvalible = false;
                            getValuesMaterial(hashMapSchemeGuidMatByMaterial, hashMapSKUMatByMaterial.get(skuGroupBean.getSKUGroup()));
                            skuGroupBean.setSkuGroupItemBean(skuGroupItemBeanArrayList);
                            if (Constants.BoolMatWiseSchemeAvalible || Constants.BoolMatWiseQPSSchemeAvalible) {
                                skuGroupBean.setIsMaterialActive(Constants.X);
                            } else {
                                skuGroupBean.setIsMaterialActive("");
                            }
                        } else {
                            skuGroupBean.setIsMaterialActive("");
                        }
                        if (!schemeGuidList.isEmpty()) {
                            skuGroupBean.setSchemeGuid(schemeGuidList);
                            skuGroupBean.setIsSchemeActive(Constants.X);
                        } else {
                            skuGroupBean.setIsSchemeActive("");
                        }

                        if (!TextUtils.isEmpty(qpsSchemeGUID)) {
                            skuGroupBean.setQPSSchemeGuid(qpsSchemeGUID);
                            skuGroupBean.setSchemeQPSActive(Constants.X);
                        } else {
                            skuGroupBean.setQPSSchemeGuid("");
                            skuGroupBean.setSchemeQPSActive("");
                        }


                        // check sub material new material avalible or not start //20092018
                        skuGroupBean.setMatTypeVal(getMatTypeVal(hashMapSKUMatByMaterial.get(skuGroupBean.getSKUGroup())));
                        // End //20092018

                        try {
                            if (!skuGroupBean.getSchemeGuid().isEmpty()) {

                                Constants.MAPSCHGuidByCrsSkuGrp.put(skuGroupBean.getSKUGroup(), skuGroupBean.getSchemeGuid());
                            } else {
                                Constants.MAPSCHGuidByCrsSkuGrp.put(skuGroupBean.getSKUGroup(), new ArrayList<String>());
                            }
                        } catch (Exception e) {
                            Constants.MAPSCHGuidByCrsSkuGrp.put(skuGroupBean.getSKUGroup(), new ArrayList<String>());
                        }
                        SKUGroupBean subMatBean = null;
                        try {
                            subMatBean = hashMapSKUMatByMaterial.get(skuGroupBean.getSKUGroup()).get(0);
                        } catch (Exception e) {
                            subMatBean = new SKUGroupBean();
                            subMatBean.setMRP("0.00");
                        }
                        try {
                            skuGroupBean.setMRP(subMatBean.getMRP());
                        } catch (Exception e) {
                            skuGroupBean.setMRP("0.00");
                        }
                        skuGroupBean.setSkuSubGroupBeanArrayList(hashMapSKUMatByMaterial.get(skuGroupBean.getSKUGroup()));
                        Double douUnitPrice = 0.0;
                        try {
                            douUnitPrice = Double.parseDouble(skuGroupBean.getMRP());
                        } catch (NumberFormatException e) {
                            douUnitPrice = 0.0;
                            e.printStackTrace();
                        }

                        if (douUnitPrice > 0) {
                            alCRSSKUGrpListTemp.add(skuGroupBean);
                        }
                    }
                }
            }
        }
        Log.d("Time end getMaterialsByTest", UtilConstants.getSyncHistoryddmmyyyyTime());
       /* if (alCRSSKUGrpList != null && alCRSSKUGrpList.size() > 0) {
            Collections.sort(alCRSSKUGrpList, new Comparator<SKUGroupBean>() {
                public int compare(SKUGroupBean one, SKUGroupBean other) {
                    return one.getSKUGroupDesc().compareTo(other.getSKUGroupDesc());
                }
            });

        }*/
        if (alCRSSKUGrpListTemp != null && alCRSSKUGrpListTemp.size() > 0) {
            Collections.sort(alCRSSKUGrpListTemp, new Comparator<SKUGroupBean>() {
                public int compare(SKUGroupBean one, SKUGroupBean other) {
                    return one.getSKUGroupID().compareTo(other.getSKUGroupID());
                }
            });

        }
        return alCRSSKUGrpListTemp;

    }

    public static String getMatTypeVal(ArrayList<SKUGroupBean> alMat) {
        String mStrMatType = "";
        try {
            if (alMat != null && alMat.size() > 0) {
                for (SKUGroupBean skuGroupBean : alMat) {
                    if (!skuGroupBean.getMatTypeVal().equalsIgnoreCase("")) {
                        mStrMatType = skuGroupBean.getMatTypeVal();
                        break;
                    }
                }
            }
        } catch (Exception e) {
            mStrMatType = "";
            e.printStackTrace();
        }

        return mStrMatType;
    }

    public static String getSOQNew(String mStrMustCellQty, String mStrActualQty) {
        Double doubleSOQ = 0.0;


        try {
            doubleSOQ = (Double.parseDouble(mStrMustCellQty) - Double.parseDouble(mStrActualQty));
        } catch (NumberFormatException e) {
            doubleSOQ = 0.0;
        }


        if (doubleSOQ.isNaN() || doubleSOQ.isInfinite()) {
            doubleSOQ = 0.0;
        }

        if (doubleSOQ < -0) {
            doubleSOQ = 0.0;
        }

        return String.format("%.3f", doubleSOQ);
    }

    public static HashMap<String, ArrayList<SKUGroupBean>> getMaterialsByTest(String focusedPrdQry, ArrayList<HashMap<String, String>> alMapMaterialDBStkUOM,
                                                                              HashMap<String, String> hashMapRetailerStkByMat,
                                                                              String mStrLastMatno, String defaultUOM,
                                                                              HashMap<String, String> hashMapSegmentedMat) throws OfflineODataStoreException {

        HashMap<String, ArrayList<SKUGroupBean>> hashMapSKUMatByMaterial = new HashMap<>();
        ArrayList<String> tempArrList = new ArrayList<>();
        HashMap<String, String> hashMapDBStk = new HashMap<>();
        HashMap<String, String> hashMapUOM = new HashMap<>();
        String mMRPQRY = "";
        if (alMapMaterialDBStkUOM != null && alMapMaterialDBStkUOM.size() > 0) {
            hashMapDBStk = alMapMaterialDBStkUOM.get(0);
            hashMapUOM = alMapMaterialDBStkUOM.get(1);
        }
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SKUGroupBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;

            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, focusedPrdQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        skuGrpBean = new SKUGroupBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.OrderMaterialGroupID);
                        String orderMatGrpId = (String) property.getValue();
                        skuGrpBean.setSKUGroup(orderMatGrpId);
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        skuGrpBean.setSKUGroupDesc((String) property.getValue());
                        property = properties.get(Constants.MaterialNo);
                        String matNo = (String) property.getValue();
                        property = properties.get(Constants.MaterialDesc);
                        String matSkuDesc = (String) property.getValue();
                        skuGrpBean.setMaterialNo(matNo);

                        boolean isMatAval = false;
                        if (tempArrList.size() == 0) {
                            isMatAval = true;
                        } else if (!tempArrList.contains(matNo)) {
                            isMatAval = true;
                        }
                        if (isMatAval) {
                            ArrayList<String> alUomValues = new ArrayList<>();
                            try {
                                if (Constants.MAPQPSSCHGuidByMaterial.containsKey(matNo) || Constants.MAPSCHGuidByMaterial.containsKey(matNo)) {
                                    skuGrpBean.setMatLevelImageDisplay(true);
                                } else {
                                    skuGrpBean.setMatLevelImageDisplay(false);
                                }
                            } catch (Exception e) {
                                skuGrpBean.setMatLevelImageDisplay(false);
                            }

                            skuGrpBean.setMaterialDesc(matSkuDesc);

                            property = properties.get(Constants.UOM);
                            String UOM = (String) property.getValue();
                            if (!alUomValues.contains(UOM))
                                alUomValues.add(UOM);
                            skuGrpBean.setUOM(UOM);
                            property = properties.get(Constants.UnrestrictedQty);
                            if (property != null) {
                                BigDecimal mDecimialUnrestrictedQty = (BigDecimal) property.getValue();
                                Double doubleMatQty = 0.0;
                                if (mDecimialUnrestrictedQty != null) {
                                    doubleMatQty = mDecimialUnrestrictedQty.doubleValue();
                                } else {
                                    doubleMatQty = 0.0;
                                }
                                skuGrpBean.setUnResQty(doubleMatQty);
                            } else {
                                skuGrpBean.setUnResQty(0.0);
                            }

                            try {
                                if (hashMapUOM.get(matNo).equalsIgnoreCase(Constants.IS_TRUE))
                                    skuGrpBean.setDBSTK(trimQtyDecimalPlace(hashMapDBStk.get(matNo) != null ? hashMapDBStk.get(matNo) : "0"));
                                else
                                    skuGrpBean.setDBSTK(hashMapDBStk.get(matNo) != null ? hashMapDBStk.get(matNo) : "0.0");
                            } catch (Exception e) {
                                skuGrpBean.setDBSTK(hashMapDBStk.get(matNo) != null ? hashMapDBStk.get(matNo) : "0.0");
                            }

                            try {
                                if (hashMapUOM.get(matNo).equalsIgnoreCase(Constants.IS_TRUE))
                                    skuGrpBean.setRETSTK(trimQtyDecimalPlace(hashMapRetailerStkByMat.get(matNo) != null ? hashMapRetailerStkByMat.get(matNo) : "0"));
                                else
                                    skuGrpBean.setRETSTK(hashMapRetailerStkByMat.get(matNo) != null ? hashMapRetailerStkByMat.get(matNo) : "0.0");
                            } catch (Exception e) {
                                skuGrpBean.setRETSTK(hashMapRetailerStkByMat.get(matNo) != null ? hashMapRetailerStkByMat.get(matNo) : "0.0");
                            }

                            property = properties.get(Constants.Currency);
                            skuGrpBean.setCurrency((String) property.getValue());

                            if (mStrLastMatno.equalsIgnoreCase("") || !mStrLastMatno.equalsIgnoreCase(matNo)) {
                                skuGrpBean.setLastPurchasedMaterial("");
                            } else {
                                skuGrpBean.setLastPurchasedMaterial(Constants.YES);
                            }
                            skuGrpBean.setChildItemTag(Constants.YES);

                            property = properties.get(Constants.CPStockItemGUID);
                            ODataGuid mCpStockItemGuid = null;
                            try {
                                mCpStockItemGuid = (ODataGuid) property.getValue();
                                skuGrpBean.setCPStockItemGUID(mCpStockItemGuid.guidAsString36().toUpperCase());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            skuGrpBean.setMRP("0.00");

                            property = properties.get(ConstantsUtils.Brand);
                            skuGrpBean.setBrand((String) property.getValue());
                            property = properties.get(ConstantsUtils.SKUGroup);
                            skuGrpBean.setSKUGroupID((String) property.getValue());
                            property = properties.get(ConstantsUtils.Banner);
                            skuGrpBean.setBanner((String) property.getValue());
                            property = properties.get(ConstantsUtils.ProductCategoryID);
                            skuGrpBean.setProductCategoryID((String) property.getValue());


                            property = properties.get(ConstantsUtils.AlternativeUOM1);
                            try {
                                if (property != null) {
                                    UOM = (String) property.getValue();
                                    if (UOM != null && !UOM.equalsIgnoreCase("")) {
                                        skuGrpBean.setAlternativeUOM1((String) property.getValue());
                                        if (!alUomValues.contains(UOM))
                                            alUomValues.add(UOM);
                                    } else {
                                        skuGrpBean.setAlternativeUOM1("");
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            property = properties.get(ConstantsUtils.AlternativeUOM2);
                            try {
                                if (property != null) {
                                    UOM = (String) property.getValue();
                                    if (UOM != null && !UOM.equalsIgnoreCase("")) {
                                        skuGrpBean.setAlternativeUOM2((String) property.getValue());
                                        if (!alUomValues.contains(UOM))
                                            alUomValues.add(UOM);
                                    } else {
                                        skuGrpBean.setAlternativeUOM2("");
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            property = properties.get(ConstantsUtils.AlternativeUOM1Num);
                            if (property != null) {
                                BigDecimal mDecimialUnrestrictedQty = (BigDecimal) property.getValue();
                                Double doubleMatQty = 0.0;
                                if (mDecimialUnrestrictedQty != null) {
                                    doubleMatQty = mDecimialUnrestrictedQty.doubleValue();
                                } else {
                                    doubleMatQty = 0.0;
                                }
                                skuGrpBean.setAlternativeUOM1Num(doubleMatQty + "");
                            } else {
                                skuGrpBean.setAlternativeUOM1Num("0");
                            }

                            property = properties.get(ConstantsUtils.AlternativeUOM1Den);
                            if (property != null) {
                                BigDecimal mDecimialUnrestrictedQty = (BigDecimal) property.getValue();
                                Double doubleMatQty = 0.0;
                                if (mDecimialUnrestrictedQty != null) {
                                    doubleMatQty = mDecimialUnrestrictedQty.doubleValue();
                                } else {
                                    doubleMatQty = 0.0;
                                }
                                skuGrpBean.setAlternativeUOM1Den(doubleMatQty + "");
                            } else {
                                skuGrpBean.setAlternativeUOM1Den("0");
                            }

                            property = properties.get(ConstantsUtils.AlternativeUOM2Num);
                            if (property != null) {
                                BigDecimal mDecimialUnrestrictedQty = (BigDecimal) property.getValue();
                                Double doubleMatQty = 0.0;
                                if (mDecimialUnrestrictedQty != null) {
                                    doubleMatQty = mDecimialUnrestrictedQty.doubleValue();
                                } else {
                                    doubleMatQty = 0.0;
                                }
                                skuGrpBean.setAlternativeUOM2Num(doubleMatQty + "");
                            } else {
                                skuGrpBean.setAlternativeUOM2Num("0");
                            }

                            property = properties.get(ConstantsUtils.AlternativeUOM2Den);
                            if (property != null) {
                                BigDecimal mDecimialUnrestrictedQty = (BigDecimal) property.getValue();
                                Double doubleMatQty = 0.0;
                                if (mDecimialUnrestrictedQty != null) {
                                    doubleMatQty = mDecimialUnrestrictedQty.doubleValue();
                                } else {
                                    doubleMatQty = 0.0;
                                }
                                skuGrpBean.setAlternativeUOM2Den(doubleMatQty + "");
                            } else {
                                skuGrpBean.setAlternativeUOM2Den("0");
                            }

                            try {
                                if (skuGrpBean.getMatTypeVal().equalsIgnoreCase("")) {
                                    if (hashMapSegmentedMat.containsKey(matNo)) {
                                        skuGrpBean.setMatTypeVal(hashMapSegmentedMat.get(matNo));
                                    } else {
                                        skuGrpBean.setMatTypeVal("");
                                    }
                                }
                            } catch (Exception e) {
                                skuGrpBean.setMatTypeVal("");
                                e.printStackTrace();
                            }

                            skuGrpBean.setAlUOM(alUomValues);
                            if (alUomValues.contains(defaultUOM))
                                skuGrpBean.setSelectedUOM(defaultUOM);
                            else
                                skuGrpBean.setSelectedUOM("");
                            tempArrList.add(matNo);

                            if (mMRPQRY.length() == 0) {

                                mMRPQRY += "" + Constants.CPStockItemGUID + " eq guid'" + mCpStockItemGuid.guidAsString36().toUpperCase() + "'";
                            } else {

                                mMRPQRY += " or " + Constants.CPStockItemGUID + " eq guid'" + mCpStockItemGuid.guidAsString36().toUpperCase() + "'";
                            }

                            ArrayList<SKUGroupBean> schemeBeanArrayList = hashMapSKUMatByMaterial.get(orderMatGrpId);
                            if (schemeBeanArrayList == null) {
                                schemeBeanArrayList = new ArrayList<>();
                                schemeBeanArrayList.add(skuGrpBean);
                                hashMapSKUMatByMaterial.put(orderMatGrpId, schemeBeanArrayList);
                            } else {
                                schemeBeanArrayList.add(skuGrpBean);
                                hashMapSKUMatByMaterial.put(orderMatGrpId, schemeBeanArrayList);
                            }
                        }
                    }
                }
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }
        Log.d("TS getSubMaterialsMRP", UtilConstants.getSyncHistoryddmmyyyyTime());
        String mCPItmMRPQry = "";
        HashMap<String, String> hashMapMRPByCPStkItemGuid = new HashMap<>();
        hmMRPByItemIfQtyAval.clear();
        if (!mMRPQRY.equalsIgnoreCase("")) {
            mCPItmMRPQry = Constants.CPStockItemSnos
                    + "?$select=" + Constants.UnitPrice + "," + Constants.CPStockItemGUID + "," + Constants.Quantity + "," + Constants.ManufacturingDate + " &$filter= (" + mMRPQRY + ") " +
                    "&$orderby=" + Constants.ManufacturingDate + "%20desc ";
            hashMapMRPByCPStkItemGuid = getMaterialMRPByCpStockItem(mCPItmMRPQry);
            Log.d("TE getSubMaterialsMRP", UtilConstants.getSyncHistoryddmmyyyyTime());
        }
        if (hashMapSKUMatByMaterial != null && !hashMapSKUMatByMaterial.isEmpty()) {
            Iterator iterator = hashMapSKUMatByMaterial.keySet().iterator();
            while (iterator.hasNext()) {
                String orderMatGrpId = iterator.next().toString();
                ArrayList<SKUGroupBean> subMatList = hashMapSKUMatByMaterial.get(orderMatGrpId);
                if (subMatList != null && subMatList.size() > 0) {
                    if (subMatList.size() > 1) {
                        ArrayList<SKUGroupBean> subTempMatList = new ArrayList<>();
                        boolean mBoolUnResQty = false;
                        for (SKUGroupBean skuGroupBean : subMatList) {
                            if (hmMRPByItemIfQtyAval.containsKey(skuGroupBean.getCPStockItemGUID())) {
                                skuGroupBean.setMRP(hmMRPByItemIfQtyAval.get(skuGroupBean.getCPStockItemGUID()));
                            } else if (hashMapMRPByCPStkItemGuid.containsKey(skuGroupBean.getCPStockItemGUID())) {
                                skuGroupBean.setMRP(hashMapMRPByCPStkItemGuid.get(skuGroupBean.getCPStockItemGUID()));
                            }
                            Double mDouUnitPrice = 0.0;
                            try {
                                mDouUnitPrice = Double.parseDouble(skuGroupBean.getMRP());
                            } catch (NumberFormatException e) {
                                mDouUnitPrice = 0.0;
                                e.printStackTrace();
                            }
                            if (skuGroupBean.getUnResQty() > 0 && !mBoolUnResQty) {
                                if (mDouUnitPrice > 0) {
                                    mBoolUnResQty = true;
                                    subTempMatList.add(0, skuGroupBean);
                                }
                            } else {
                                if (mDouUnitPrice > 0) {
                                    subTempMatList.add(skuGroupBean);
                                }
                            }
                        }
                        hashMapSKUMatByMaterial.put(orderMatGrpId, subTempMatList);
                    } else {
                        for (SKUGroupBean skuGroupBean : subMatList) {
                            if (hmMRPByItemIfQtyAval.containsKey(skuGroupBean.getCPStockItemGUID())) {
                                skuGroupBean.setMRP(hmMRPByItemIfQtyAval.get(skuGroupBean.getCPStockItemGUID()));
                            } else if (hashMapMRPByCPStkItemGuid.containsKey(skuGroupBean.getCPStockItemGUID())) {
                                skuGroupBean.setMRP(hashMapMRPByCPStkItemGuid.get(skuGroupBean.getCPStockItemGUID()));
                            }
                        }
                    }
                }
            }
        }

        return hashMapSKUMatByMaterial;
    }

    public static HashMap<String, String> getMaterialMRPByCpStockItem(String mrpQry) throws OfflineODataStoreException {
        double doubleMRP = 0.0, mDobBatchQty = 0.0;
        HashMap<String, String> mapMrp = new HashMap<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mrpQry);
            if (entities != null && entities.size() > 0) {
                // getting first manufacturing date mrp value
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.CPStockItemGUID);
                    ODataGuid mCpStockItemGuid = null;
                    try {
                        mCpStockItemGuid = (ODataGuid) property.getValue();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.UnitPrice);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        if (mStrQty != null) {
                            doubleMRP = mStrQty.doubleValue();
                        } else {
                            doubleMRP = 0.0;
                        }
                    }
                    property = properties.get(Constants.Quantity);
                    if (property != null) {
                        BigDecimal mDecBatchQty = (BigDecimal) property.getValue();
                        if (mDecBatchQty != null) {
                            mDobBatchQty = mDecBatchQty.doubleValue();
                        } else {
                            mDobBatchQty = 0.0;
                        }

                    } else {
                        mDobBatchQty = 0.0;
                    }
                    if (!hmMRPByItemIfQtyAval.containsKey(mCpStockItemGuid.guidAsString36().toUpperCase()) && doubleMRP > 0 /*&& mDobBatchQty>0*/) {
                        hmMRPByItemIfQtyAval.put(mCpStockItemGuid.guidAsString36().toUpperCase(), doubleMRP + "");
                    }

                    if (!mapMrp.containsKey(mCpStockItemGuid.guidAsString36().toUpperCase()) && doubleMRP > 0) {
                        mapMrp.put(mCpStockItemGuid.guidAsString36().toUpperCase(), doubleMRP + "");
                    }

                }

            }

        }

        return mapMrp;
    }

    private static ArrayList<String> schemeGuid(ArrayList<SchemeIDBean> schemeIDBeanArrayList, String orderMaterialId) {
//        String schemeGuid = "";
        ArrayList<String> schemeGuidList = new ArrayList<>();
        for (SchemeIDBean schemeIDBean : schemeIDBeanArrayList) {
            if (schemeIDBean.getOrderMaterialId() != null) {
                if (schemeIDBean.getOrderMaterialId().contains(orderMaterialId) && schemeIDBean.getSchemeCatID().equalsIgnoreCase(Constants.SchemeCatIDInstantScheme)) {
                    Log.d(TAG, "getCRSSKUGroup: " + schemeIDBean.getSchemeGuid() + " orderMaterialId :" + orderMaterialId);
                    schemeGuidList.add(schemeIDBean.getSchemeGuid());
//                    return schemeIDBean.getSchemeGuid();
                }
            }
        }

        return schemeGuidList;
    }

    private static String checkQPSSchemeGuid(ArrayList<SchemeIDBean> schemeIDBeanArrayList, String orderMaterialId) {
        String schemeGuid = "";
        for (SchemeIDBean schemeIDBean : schemeIDBeanArrayList) {
            if (schemeIDBean.getOrderMaterialId() != null) {
                if (schemeIDBean.getOrderMaterialId().contains(orderMaterialId) && schemeIDBean.getSchemeCatID().equalsIgnoreCase(Constants.SchemeCatIDQPSScheme)) {
                    return schemeIDBean.getSchemeGuid();
                }
            }
        }

        return schemeGuid;
    }

    public static void getValuesMaterial(HashMap<String, ArrayList<String>> hashMapSchemeGuidMatByMaterial, ArrayList<SKUGroupBean> alMat) {
        String mStrVal = "";
        try {
            if (alMat != null && alMat.size() > 0) {
                for (SKUGroupBean skuGroupBean : alMat) {
                    mStrVal = skuGroupBean.getMaterialNo();
                    if (hashMapSchemeGuidMatByMaterial.size() > 0) {
                        if (hashMapSchemeGuidMatByMaterial.containsKey(mStrVal)) {

                            for (String mStrSchemeGuid : hashMapSchemeGuidMatByMaterial.get(mStrVal)) {
                                if (Constants.HashMapSchemeIsInstantOrQPS.containsKey(mStrSchemeGuid)) {
                                    if (Constants.HashMapSchemeIsInstantOrQPS.get(mStrSchemeGuid).equalsIgnoreCase(Constants.SchemeCatIDInstantScheme)) {
                                        Constants.BoolMatWiseSchemeAvalible = true;
                                        ArrayList<String> schemeBeanArrayList = Constants.MAPSCHGuidByMaterial.get(mStrVal);
                                        if (schemeBeanArrayList == null) {
                                            schemeBeanArrayList = new ArrayList<>();
                                            schemeBeanArrayList.add(mStrSchemeGuid);
                                            Constants.MAPSCHGuidByMaterial.put(mStrVal, schemeBeanArrayList);
                                        } else {
                                            schemeBeanArrayList.add(mStrSchemeGuid);
                                            Constants.MAPSCHGuidByMaterial.put(mStrVal, schemeBeanArrayList);
                                        }
                                        skuGroupBean.setMatLevelImageDisplay(true);
                                    } else if (Constants.HashMapSchemeIsInstantOrQPS.get(mStrSchemeGuid).equalsIgnoreCase(Constants.SchemeCatIDQPSScheme)) {
                                        Constants.BoolMatWiseQPSSchemeAvalible = true;
                                        Constants.MAPQPSSCHGuidByMaterial.put(mStrVal, mStrSchemeGuid);
                                        skuGroupBean.setMatLevelImageDisplay(true);
                                    }
                                }
                            }

                        }
                    }

                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }


      /*  try {

            if (Constants.MAPQPSSCHGuidByMaterial.containsKey(matNo) || Constants.MAPSCHGuidByMaterial.containsKey(matNo)) {
                skuGrpBean.setMatLevelImageDisplay(true);
            } else {
                skuGrpBean.setMatLevelImageDisplay(false);
            }

        } catch (Exception e) {
            skuGrpBean.setMatLevelImageDisplay(false);
        }*/

    }

    public static HashMap<String, SchemeBean> getInstantSchemesAndSchemeType(String schemeQry) throws OfflineODataStoreException {
        HashMap<String, SchemeBean> hashMapSchemeTypeID = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            SchemeBean schemeBean = null;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {

                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.SchemeTypeID);
                    schemeBean.setSchemeTypeID((String) property.getValue());
                    property = properties.get(Constants.SchemeGUID);
                    ODataGuid mSchemeGuid = null;
                    String schemeGuid = "";
                    try {
                        mSchemeGuid = (ODataGuid) property.getValue();
                        schemeGuid = mSchemeGuid.guidAsString36().toUpperCase();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.IsIncludingPrimary);
                    schemeBean.setIsIncludingPrimary((String) property.getValue());

                    property = properties.get(Constants.TargetBasedID);
                    schemeBean.setTargetBasedID((String) property.getValue());

                    hashMapSchemeTypeID.put(schemeGuid, schemeBean);

                }
            }

        }
        return hashMapSchemeTypeID;

    }

    public static SchemeBean getSchemeItemDetailsBySchemeGuid(String schemeQry) throws OfflineODataStoreException {
        SchemeBean schemeBean = new SchemeBean();
        schemeBean.setItemMin("0");
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            String stItmMinQty = "0";
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();

                    property = properties.get(Constants.ItemMin);
                    BigDecimal freeQty = (BigDecimal) property.getValue();

                    try {
                        if (freeQty != null) {
                            stItmMinQty = freeQty.toString();
                        } else {
                            stItmMinQty = "0.0";
                        }
                    } catch (Exception e) {
                        stItmMinQty = "0.0";
                    }

                    if (!TextUtils.isEmpty(stItmMinQty)) {
                        schemeBean.setItemMin(stItmMinQty);

                        property = properties.get(Constants.OnSaleOfCatID);
                        schemeBean.setOnSaleOfCatID((String) property.getValue());

                        property = properties.get(Constants.OnSaleOfItemUOMDesc);
                        schemeBean.setOnSaleOfItemUOMDesc((String) property.getValue());

                        property = properties.get(Constants.OnSaleOfItemUOMID);
                        schemeBean.setOnSaleOfItemUOMID((String) property.getValue());

                        property = properties.get(ConstantsUtils.FreeMatCritria);
                        schemeBean.setFreeMatCritria((String) property.getValue());

                        return schemeBean;
                    }
                }
            }

        }
        return schemeBean;

    }

    public static SchemeBean getSecondarySchemeSlabPer(String schemeQry, String mStrOrderQty, String mStrSchemeGUID,
                                                       String schemeRelese, String[] mStrCRSSKUGrpOrMatNo,
                                                       String isHeaderBasedScheme, SchemeBean schemeItemBean, SOCreateBean soCreateBean,ArrayList<String> arrayList) throws OfflineODataStoreException {
        SchemeBean schemeBean = null;
        SchemeBean schemeBeanVal = null;
        String mStrSaleUnitID = "";
        String mStrSlabUnitId = "";
        Double mDouCBBQty = 0.0;
        double mOrderQty = 0.0;
//        double mOrderQty = Double.valueOf(mStrOrderQty);
        if (schemeRelese.equalsIgnoreCase(Constants.SKUGroupID)) {
            mOrderQty = OfflineManager.getSKUGrpWiseCBB(mStrCRSSKUGrpOrMatNo,schemeItemBean.getOnSaleOfItemUOMID());
        } else {
            mDouCBBQty = getMaterialWiseCBB(mStrCRSSKUGrpOrMatNo, schemeItemBean.getOnSaleOfItemUOMID());
        }
        if(mOrderQty==0.0){
            mOrderQty = Double.valueOf(mStrOrderQty);
        }
        String mOrderVal = "0";

        mStrSlabUnitId = Constants.HashMapSchemeValuesBySchemeGuid.get(mStrSchemeGUID.toUpperCase()).getTargetBasedID();

        ArrayList<SchemeBean> alSchemeList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);

            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {

                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    schemeBean.setIsHeaderBasedSlab(isHeaderBasedScheme);

                    try {
                        schemeBean.setIsIncludingPrimary(Constants.HashMapSchemeValuesBySchemeGuid.get(mStrSchemeGUID.toUpperCase()).getIsIncludingPrimary());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        schemeBean.setSchemeTypeID(Constants.HashMapSchemeValuesBySchemeGuid.get(mStrSchemeGUID.toUpperCase()).getSchemeTypeID());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        schemeBean.setOnSaleOfCatID(schemeItemBean.getOnSaleOfCatID());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        schemeBean.setFreeMatCritria(schemeItemBean.getFreeMatCritria());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (mStrSlabUnitId.equalsIgnoreCase("02")) {
                        property = properties.get(Constants.ToValue);
                    } else {
                        property = properties.get(Constants.ToQty);
                    }

                    try {
                        BigDecimal mBigDecToQty = (BigDecimal) property.getValue();
                        schemeBean.setToQty(mBigDecToQty + "");
                    } catch (Exception e) {
                        schemeBean.setToQty("");
                    }
                    if (mStrSlabUnitId.equalsIgnoreCase("02")) {
                        property = properties.get(Constants.FromValue);
                    } else {
                        property = properties.get(Constants.FromQty);
                    }

                    try {
                        BigDecimal mBigDecFromQty = (BigDecimal) property.getValue();
                        schemeBean.setFromQty(mBigDecFromQty + "");
                    } catch (Exception e) {
                        schemeBean.setFromQty("");
                    }
                    schemeBean.setSchemeGuid(mStrSchemeGUID);
                    schemeBean.setFlag(Constants.X);
                    property = properties.get(Constants.SlabTypeID);
                    schemeBean.setSlabTypeID((String) property.getValue());
                    property = properties.get(Constants.SlabTypeDesc);
                    schemeBean.setSlabTypeDesc((String) property.getValue());
                    property = properties.get(Constants.SlabRuleID);
                    String mStrSlabRuleId = (String) property.getValue();
                    property = properties.get(Constants.SaleUnitID);
                    mStrSaleUnitID = (String) property.getValue();
                    property = properties.get(Constants.SlabRuleDesc);
                    String mStrSlabRuleDesc = (String) property.getValue();


                    if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeProduct)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.Material_Desc);
                        schemeBean.setMaterialDesc((String) property.getValue());
                        property = properties.get(Constants.Material_No);
                        schemeBean.setMaterialNo((String) property.getValue());

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeSKUGroup)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.SKUGroupID);
                        schemeBean.setSKUGroupID((String) property.getValue());

                        /*property = properties.get(Constants.SlabGUID);
                        ODataGuid mSchSlabGUID = null;
                        try {
                            mSchSlabGUID = (ODataGuid) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }*/

                        property = properties.get(Constants.SKUGroupID);
                        String mStrSKUGroupID = (String) property.getValue();

                        String materialDesc = getValueByColumnName(Constants.SchemeFreeMatGrpMaterials + "?$select=" + Constants.MaterialGrpDesc + " &$filter = "
                                + Constants.SchFreeMatGrpGUID + " eq guid'" + Constants.convertStrGUID32to36(mStrSKUGroupID) + "' &$orderby = ItemNo asc &$top=1", Constants.MaterialGrpDesc);

                        schemeBean.setSKUGroupDesc(materialDesc);

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeCRSSKUGroup)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        schemeBean.setOrderMaterialGroupDesc((String) property.getValue());
                        property = properties.get(Constants.OrderMaterialGroupID);
                        schemeBean.setOrderMaterialGroupID((String) property.getValue());
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountPercentage)) {
                        property = properties.get(Constants.PayoutPerc);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setPayoutPerc(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setPayoutPerc("0");
                        }

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountAmount)) {
                        property = properties.get(Constants.PayoutAmount);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setPayoutAmount(mBigDecPayoutPerc.doubleValue() + "");
                            schemeBean.setSchemeOffer(mBigDecPayoutPerc.doubleValue() + " " + mStrSlabRuleDesc);
                        } catch (Exception e) {
                            schemeBean.setPayoutAmount("0");
                        }
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeScratchCard)) {
                        property = properties.get(Constants.NoOfCards);
                        try {
                            schemeBean.setNoOfCards(String.valueOf((short) property.getValue()));
                        } catch (Exception e) {
                            schemeBean.setNoOfCards("0");
                        }
                        property = properties.get(Constants.CardTitle);
                        schemeBean.setCardTitle((String) property.getValue());

                        property = properties.get(Constants.ScratchCardDesc);
                        schemeBean.setScratchCardDesc((String) property.getValue());

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeFreeArticle)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.FreeArticle);
                        schemeBean.setFreeArticle((String) property.getValue());

                        property = properties.get(Constants.FreeArticleDesc);
                        schemeBean.setFreeArticleDesc((String) property.getValue());
                    }
                    property = properties.get(Constants.SchemeItemGUID);
                    ODataGuid mSchItemGuid = null;
                    try {
                        mSchItemGuid = (ODataGuid) property.getValue();
                        schemeBean.setSchemeItemGUID(mSchItemGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    property = properties.get(Constants.FreeQtyUOM);
                    schemeBean.setFreeQtyUOM((String) property.getValue());

                    schemeBean.setSlabRuleID(mStrSlabRuleId);
                    schemeBean.setSlabRuleDesc(mStrSlabRuleDesc);
                    schemeBean.setTargetBasedID(mStrSlabUnitId);
                    double toQty=0;
                    double fromQty = 0;
                    int enterQty = (int)mOrderQty;
                    try {
                        if(!TextUtils.isEmpty(schemeBean.getToQty())){
                            toQty = (int)Double.parseDouble(schemeBean.getToQty());
                        }
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        if(!TextUtils.isEmpty(schemeBean.getFromQty())){
                            fromQty = (int)Double.parseDouble(schemeBean.getFromQty());
                        }
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    if(enterQty>=fromQty && enterQty<=toQty) {
                        alSchemeList.add(schemeBean);
                    }
                }
            }
        }

        if (alSchemeList != null && alSchemeList.size() > 0) {
            Collections.sort(alSchemeList, new Comparator<SchemeBean>() {
                public int compare(SchemeBean one, SchemeBean other) {
                    Double i1 = null;
                    Double i2 = null;
                    try {
                        i1 = Double.parseDouble(one.getToQty());
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }

                    try {
                        i2 = Double.parseDouble(other.getToQty());
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getToQty().compareTo(one.getToQty());
                    }
                }
            });


            schemeBeanVal = null;
            if (mStrSlabUnitId.equalsIgnoreCase("02")) {
                String mStrPriceBatchCalType = soCreateBean.getPriceBatchCalType();
                if (schemeRelese.equalsIgnoreCase(Constants.SKUGroupID)) {
                    mOrderVal = getSKUGrpWiseSchemeAmt(mStrCRSSKUGrpOrMatNo, mStrPriceBatchCalType);
                } else {
                    mOrderVal = getMatWiseSchemeAmt(mStrCRSSKUGrpOrMatNo, mStrPriceBatchCalType);
                }

                ;
                for (int incVal = 0; incVal < alSchemeList.size(); incVal++) {
                    if (Double.parseDouble(mOrderVal.equalsIgnoreCase("") ? "0" : mOrderVal) >= Double.parseDouble(alSchemeList.get(incVal).getToQty())) {
                        schemeBeanVal = alSchemeList.get(incVal);
                        break;
                    } else if (Double.parseDouble(alSchemeList.get(incVal).getFromQty()) <= Double.parseDouble(mOrderVal.equalsIgnoreCase("") ? "0" : mOrderVal) &&
                            Double.parseDouble(mOrderVal.equalsIgnoreCase("") ? "0" : mOrderVal) <= Double.parseDouble(alSchemeList.get(incVal).getToQty())) {
                        schemeBeanVal = alSchemeList.get(incVal);
                        break;
                    }
                }
            } else {

//                if (Constants.isCBBOrBag(mStrSaleUnitID)) {
                if (schemeRelese.equalsIgnoreCase(Constants.SKUGroupID)) {
                    mDouCBBQty = getSKUGrpWiseCBBQty(mStrCRSSKUGrpOrMatNo, mStrSaleUnitID);
//                        mDouCBBQty = getCBBQty(Constants.CPStockItems + "?$filter=" + Constants.OrderMaterialGroupID + " eq '" + mStrCRSSKUGrpOrMatNo[0] + "' " +
//                                "and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' &$orderby=" + Constants.ManufacturingDate + "%20asc ", Double.parseDouble(mStrOrderQty),schemeRelese,mStrCRSSKUGrpOrMatNo[0]);
                }else if(schemeItemBean.getOnSaleOfCatID().equalsIgnoreCase(Constants.OnSaleOfBrand)){
                    mDouCBBQty = getBrandWiseCBBQty(arrayList, mStrSaleUnitID);
//                        mDouCBBQty = getCBBQty(Constants.CPStockItems + "?$filter=" + Constants.OrderMaterialGroupID + " eq '" + mStrCRSSKUGrpOrMatNo[0] + "' " +
//                                "and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' &$orderby=" + Constants.ManufacturingDate + "%20asc ", Double.parseDouble(mStrOrderQty),schemeRelese,mStrCRSSKUGrpOrMatNo[0]);
                } else {
                    mDouCBBQty = getMaterialWiseCBBQty(mStrCRSSKUGrpOrMatNo, mStrSaleUnitID);
//                        mDouCBBQty = getCBBQty(Constants.CPStockItems + "?$filter=" + Constants.MaterialNo + " eq '" + mStrCRSSKUGrpOrMatNo[0] + "' " +
//                                "and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' &$orderby=" + Constants.ManufacturingDate + "%20asc ", Double.parseDouble(mStrOrderQty),schemeRelese,mStrCRSSKUGrpOrMatNo[0]);
                }
//                }

//                if (Constants.isCBBOrBag(mStrSaleUnitID)) {

                for (int incVal = 0; incVal < alSchemeList.size(); incVal++) {
                    if (mDouCBBQty >= Double.parseDouble(alSchemeList.get(incVal).getToQty())) {
                        schemeBeanVal = alSchemeList.get(incVal);
                        break;
                    } else if (Double.parseDouble(alSchemeList.get(incVal).getFromQty()) <= mDouCBBQty &&
                            mDouCBBQty <= Double.parseDouble(alSchemeList.get(incVal).getToQty())) {
                        schemeBeanVal = alSchemeList.get(incVal);
                        break;
                    }
                }
//                } else {
//                    for (int incVal = 0; incVal < alSchemeList.size(); incVal++) {
//                        if (Double.parseDouble(mStrOrderQty.equalsIgnoreCase("") ? "0" : mStrOrderQty) >= Double.parseDouble(alSchemeList.get(incVal).getToQty())) {
//                            schemeBeanVal = alSchemeList.get(incVal);
//                            break;
//                        } else if (Double.parseDouble(alSchemeList.get(incVal).getFromQty()) <= Double.parseDouble(mStrOrderQty.equalsIgnoreCase("") ? "0" : mStrOrderQty) &&
//                                Double.parseDouble(mStrOrderQty.equalsIgnoreCase("") ? "0" : mStrOrderQty) <= Double.parseDouble(alSchemeList.get(incVal).getToQty())) {
//                            schemeBeanVal = alSchemeList.get(incVal);
//                            break;
//                        }
//                    }
//                }
            }
        }
        if (schemeBeanVal != null) {
            if (mStrSlabUnitId.equalsIgnoreCase("02")) {
                schemeBeanVal.setTargetAmount(mOrderVal + "");
            } else {
                schemeBeanVal.setTargetAmount("0");
            }

            schemeBeanVal.setSaleUnitID(mStrSaleUnitID);
            if (Constants.isCBBOrBag(mStrSaleUnitID)) {
                schemeBeanVal.setCBBQty(mDouCBBQty + "");
            } else {
                schemeBeanVal.setCBBQty(mDouCBBQty + "");
            }
        }
        return schemeBeanVal;
    }

    public static Double getCBBQty(String cpStockQry, Double mDoubOrderQty, String schemeRelease, String MatNoOrSkuID) throws OfflineODataStoreException {
        double doublAltUom1Num = 0.0;
        double doublAltUom1Den = 0.0;
        Double doublCBBQty = 0.0;
        Double doublCalQty = 0.0;
        String alternativeUOM = "";
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStockQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.AlternativeUOM1);
                    alternativeUOM = (String) property.getValue();

                    property = properties.get(Constants.UnrestrictedQty);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();

                        try {
                            if (mStrQty.doubleValue() > 0) {
                                property = properties.get(Constants.AlternativeUOM1Num);
                                if (property != null) {
                                    BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();
                                    if (mDecimialMatUnitPrice != null) {
                                        doublAltUom1Num = mDecimialMatUnitPrice.doubleValue();
                                    } else {
                                        doublAltUom1Num = 0.0;
                                    }


                                }

                                property = properties.get(Constants.AlternativeUOM1Den);
                                if (property != null) {
                                    BigDecimal mDecimialUom1Den = (BigDecimal) property.getValue();
                                    if (mDecimialUom1Den != null) {
                                        doublAltUom1Den = mDecimialUom1Den.doubleValue();
                                    } else {
                                        doublAltUom1Den = 0.0;
                                    }

                                }

                                if (doublAltUom1Num > 0) {
                                    if (doublAltUom1Num <= doublAltUom1Den) { // Emami and Pal Case
                                        try {
                                            doublCalQty = mDoubOrderQty / doublAltUom1Den;
                                        } catch (Exception e) {
                                            doublCalQty = 0.0;
                                        }
                                        if (doublCalQty.isNaN() || doublCalQty.isInfinite()) {
                                            doublCalQty = 0.0;
                                        }

                                        try {
                                            doublCBBQty = doublCalQty * doublAltUom1Num;
                                        } catch (Exception e) {
                                            doublCBBQty = 0.0;
                                        }

                                        if (doublCBBQty.isNaN() || doublCBBQty.isInfinite()) {
                                            doublCBBQty = 0.0;
                                        }
                                    } else { // RSPL
                                        // TODO Added 31-07-2018 Based on BASE uom caluclated CBB Qty   // Start
                                        if (!schemeRelease.equalsIgnoreCase(Constants.SKUGroupID)) {
                                            if (Constants.hashMapCpStockItemGuidQtyValByMaterial.get(MatNoOrSkuID) != null) {
                                                SchemeBean matScheme = Constants.hashMapCpStockItemGuidQtyValByMaterial.get(MatNoOrSkuID);
                                                if (!matScheme.getSelectedUOM().equalsIgnoreCase("")) {
                                                    if (alternativeUOM.equalsIgnoreCase(matScheme.getSelectedUOM())) {

                                                        try {
                                                            doublCalQty = mDoubOrderQty / doublAltUom1Num;
                                                        } catch (Exception e) {
                                                            doublCalQty = 0.0;
                                                        }
                                                        if (doublCalQty.isNaN() || doublCalQty.isInfinite()) {
                                                            doublCalQty = 0.0;
                                                        }

                                                        doublCBBQty = doublCalQty;
                                                    } else {
                                                        try {
                                                            doublCalQty = mDoubOrderQty / doublAltUom1Den;
                                                        } catch (Exception e) {
                                                            doublCalQty = 0.0;
                                                        }
                                                        if (doublCalQty.isNaN() || doublCalQty.isInfinite()) {
                                                            doublCalQty = 0.0;
                                                        }

                                                        try {
                                                            doublCBBQty = doublCalQty * doublAltUom1Den;
                                                        } catch (Exception e) {
                                                            doublCBBQty = 0.0;
                                                        }

                                                        if (doublCBBQty.isNaN() || doublCBBQty.isInfinite()) {
                                                            doublCBBQty = 0.0;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            // SKGRP Wise will write logic

                                            if (Constants.hashMapCpStockItemGuidQtyValByOrderMatGrp.get(MatNoOrSkuID) != null) {
                                                SchemeBean matScheme = Constants.hashMapCpStockItemGuidQtyValByOrderMatGrp.get(MatNoOrSkuID);
                                                if (!matScheme.getSelectedUOM().equalsIgnoreCase("")) {
                                                    if (alternativeUOM.equalsIgnoreCase(matScheme.getSelectedUOM())) {

                                                        try {
                                                            doublCalQty = mDoubOrderQty / doublAltUom1Num;
                                                        } catch (Exception e) {
                                                            doublCalQty = 0.0;
                                                        }
                                                        if (doublCalQty.isNaN() || doublCalQty.isInfinite()) {
                                                            doublCalQty = 0.0;
                                                        }

                                                        doublCBBQty = doublCalQty;
                                                    } else {
                                                        try {
                                                            doublCalQty = mDoubOrderQty / doublAltUom1Den;
                                                        } catch (Exception e) {
                                                            doublCalQty = 0.0;
                                                        }
                                                        if (doublCalQty.isNaN() || doublCalQty.isInfinite()) {
                                                            doublCalQty = 0.0;
                                                        }

                                                        try {
                                                            doublCBBQty = doublCalQty * doublAltUom1Den;
                                                        } catch (Exception e) {
                                                            doublCBBQty = 0.0;
                                                        }

                                                        if (doublCBBQty.isNaN() || doublCBBQty.isInfinite()) {
                                                            doublCBBQty = 0.0;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }


                                    int mTruncateVale = 0;
                                    try {
                                        mTruncateVale = doublCBBQty.intValue();
                                    } catch (Exception e) {
                                        mTruncateVale = 0;
                                    }

                                    return Double.parseDouble(mTruncateVale + "");
                                }

                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                }
            }

        }
        return doublCBBQty;
    }

    public static String getSKUGrpWiseSchemeAmt(String[] mStrCRSSKUGRPArray, String mStrPriceBatchCalType) {
        Double mStrAmt = 0.0;
        if (!Constants.hashMapMaterialValByOrdMatGrp.isEmpty()) {
            String matListQry = getMatListQryFromCRSSKUGrp(mStrCRSSKUGRPArray);
            if (!matListQry.equalsIgnoreCase("")) {
                HashMap<String, ArrayList<CPStockSNoBean>> matList = new HashMap<>();
                try {
                    matList = getCPStockSNosByMaterial(matListQry);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
                if (matList != null && matList.size() > 0) {
                    for (String mStrCRSSKUGRP : mStrCRSSKUGRPArray) {
                        if (Constants.hashMapMaterialValByOrdMatGrp.containsKey(mStrCRSSKUGRP)) {
                            Set mSetMat = Constants.hashMapMaterialValByOrdMatGrp.get(mStrCRSSKUGRP);
                            Iterator itr = mSetMat.iterator();
                            while (itr.hasNext()) {
                                String mStrMatNo = itr.next().toString();
                                SchemeBean mStrNetAmount = null;
                                try {
                                    mStrNetAmount = getNetAmountCalByMaterial(matList.get(mStrMatNo), Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mStrMatNo).getOrderQty(), mStrMatNo, mStrPriceBatchCalType);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                mStrAmt = mStrAmt + Double.parseDouble(mStrNetAmount.getNetAmount());
                            }
                        }
                    }
                } else {
                    mStrAmt = 0.0;
                }

            } else {
                mStrAmt = 0.0;
            }

        }
        return mStrAmt + "";
    }

    public static String getMatWiseSchemeAmt(String[] mStrMatNoArray, String mPriceBatchCalType) {
        Double mStrAmt = 0.0;
//        SchemeBean mStrNetAmount = null;

        String matListQry = getMatListQryFromMaterialsArray(mStrMatNoArray);
        if (!matListQry.equalsIgnoreCase("")) {
            HashMap<String, ArrayList<CPStockSNoBean>> matList = new HashMap<>();
            try {
                matList = getCPStockSNosByMaterial(matListQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            if (matList != null && matList.size() > 0) {
                for (String mMatNo : mStrMatNoArray) {
                    if (mMatNo != null && !mMatNo.equalsIgnoreCase("")) {
                        try {
                            SchemeBean mStrNetAmount = null;
                            try {
                                mStrNetAmount = getNetAmountCalByMaterial(matList.get(mMatNo),
                                        Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mMatNo).getOrderQty(), mMatNo, mPriceBatchCalType);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            mStrAmt = mStrAmt + Double.parseDouble(mStrNetAmount.getNetAmount());
                        } catch (NumberFormatException e) {
                            e.printStackTrace();
                        }
                    }

                }
            } else {
                mStrAmt = 0.0;
            }
        } else {
            mStrAmt = 0.0;
        }
        return mStrAmt + "";
    }

    public static String getMatListQryFromMaterialsArray(String[] mStrMatArray) {
        String mStrQry = "";
        try {
            if (mStrMatArray != null && mStrMatArray.length > 0) {
                for (String mStrMatNo : mStrMatArray) {
                    if (mStrMatNo != null && !mStrMatNo.equalsIgnoreCase("")) {
                        if (mStrQry.length() == 0)
                            mStrQry += "guid'" + Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mStrMatNo).getCPItemGUID() + "'";
                        else
                            mStrQry += " or " + Constants.CPStockItemGUID + " eq guid'" + Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mStrMatNo).getCPItemGUID() + "'";
                    }
                }
            }

        } catch (Exception e) {
            mStrQry = "";
            e.printStackTrace();
        }
        if (!mStrQry.equalsIgnoreCase("")) {
            mStrQry = Constants.CPStockItemSnos + "?$filter=(" + Constants.CPStockItemGUID + " eq " + mStrQry + ") and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' &$orderby=" + Constants.ManufacturingDate + "%20asc ";
        }
        return mStrQry;
    }

    public static String getMatListQryFromCRSSKUGrp(String[] mStrCRSSKUGRPArray) {
        String mStrQry = "";
        try {
            if (mStrCRSSKUGRPArray != null && mStrCRSSKUGRPArray.length > 0) {
                for (String mStrCRSSKUGRP : mStrCRSSKUGRPArray) {
                    if (Constants.hashMapMaterialValByOrdMatGrp.containsKey(mStrCRSSKUGRP)) {
                        Set mSetMat = Constants.hashMapMaterialValByOrdMatGrp.get(mStrCRSSKUGRP);
                        Iterator itr = mSetMat.iterator();
                        while (itr.hasNext()) {
                            String mStrMatNo = itr.next().toString();

                            if (mStrQry.length() == 0)
                                mStrQry += "guid'" + Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mStrMatNo).getCPItemGUID() + "'";
                            else
                                mStrQry += " or " + Constants.CPStockItemGUID + " eq guid'" + Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mStrMatNo).getCPItemGUID() + "'";
                        }
                    }
                }
            }
            if (!mStrQry.equalsIgnoreCase("")) {
                mStrQry = Constants.CPStockItemSnos + "?$filter=(" + Constants.CPStockItemGUID + " eq " + mStrQry + ") and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' &$orderby=" + Constants.ManufacturingDate + "%20asc ";
            }
        } catch (Exception e) {
            mStrQry = "";
            e.printStackTrace();
        }
        return mStrQry;
    }

    public static HashMap<String, ArrayList<CPStockSNoBean>> getCPStockSNosByMaterial(String mStrSNoQry) throws OfflineODataStoreException {
        HashMap<String, ArrayList<CPStockSNoBean>> matList = new HashMap<>();
        Double mDobBatchQty = 0.0;
        Double doubleMatUnitPrice = 0.0;
        String mStrBatchNo = "", mStrMFD = "", mMaterialNo = "";
        Double mDouPrimaryPer = 0.0;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrSNoQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    CPStockSNoBean cpStockSNoBean = new CPStockSNoBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.IntermUnitPrice);
                    if (property != null) {
                        BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();
                        if (mDecimialMatUnitPrice != null) {
                            doubleMatUnitPrice = mDecimialMatUnitPrice.doubleValue();
                        } else {
                            doubleMatUnitPrice = 0.0;
                        }
                    }
                    property = properties.get(Constants.Quantity);
                    if (property != null) {
                        BigDecimal mDecBatchQty = (BigDecimal) property.getValue();
                        if (mDecBatchQty != null) {
                            mDobBatchQty = mDecBatchQty.doubleValue();
                        } else {
                            mDobBatchQty = 0.0;
                        }
                    }
                    property = properties.get(Constants.Batch);
                    mStrBatchNo = property.getValue().toString();
                    property = properties.get(Constants.ManufacturingDate);
                    mStrMFD = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    property = properties.get(Constants.PriDiscountPer);
                    if (property != null) {
                        BigDecimal mDecPriDis = (BigDecimal) property.getValue();
                        if (mDecPriDis != null) {
                            mDouPrimaryPer = mDecPriDis.doubleValue();
                        } else {
                            mDouPrimaryPer = 0.0;
                        }
                    }
                    property = properties.get(Constants.MaterialNo);
                    mMaterialNo = property.getValue().toString();
                    cpStockSNoBean.setBatch(mStrBatchNo);
                    cpStockSNoBean.setPriDiscountPer(mDouPrimaryPer + "");
                    cpStockSNoBean.setManufacturingDate(mStrMFD);
                    cpStockSNoBean.setQuantity(mDobBatchQty + "");
                    cpStockSNoBean.setIntermUnitPrice(doubleMatUnitPrice + "");
                    cpStockSNoBean.setMaterialNo(mMaterialNo + "");
                    ArrayList<CPStockSNoBean> cpStockarrayList = matList.get(mMaterialNo);
                    if (cpStockarrayList == null) {
                        cpStockarrayList = new ArrayList<>();
                        cpStockarrayList.add(cpStockSNoBean);
                        matList.put(mMaterialNo, cpStockarrayList);
                    } else {
                        cpStockarrayList.add(cpStockSNoBean);
                        matList.put(mMaterialNo, cpStockarrayList);
                    }
                }
            }
        }
        return matList;
    }

    public static SchemeBean getNetAmountCalByMaterial(ArrayList<CPStockSNoBean> cpStockarrayList, String mStrOrderQty, String mStrMatNo, String mPriceBatchCalType) {
        double alternativeUOMQty = 0;
        String alternativeUOM = "";
        SKUGroupBean skuGroupBean = null;
        // Here check alternative UOM is selected or not.Ex : Here conversion Qty form bag to pc
        if (Constants.hashMapCpStockDataByMaterial.containsKey(mStrMatNo)) {
            skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
            if (skuGroupBean != null) {
                if (!skuGroupBean.getSelectedUOM().equalsIgnoreCase(skuGroupBean.getUOM()) && !skuGroupBean.getSelectedUOM().equalsIgnoreCase("")) {
                    alternativeUOM = skuGroupBean.getSelectedUOM();
                    if (mPriceBatchCalType.equalsIgnoreCase(Constants.X)) {
                        try {
                            alternativeUOMQty = Double.parseDouble(mStrOrderQty) / Double.parseDouble(skuGroupBean.getAlternativeUOM2Num());
                        } catch (NumberFormatException e) {
                            alternativeUOMQty = 0.0;
                            e.printStackTrace();
                        }
                        if (alternativeUOMQty != 0) {
                            mStrOrderQty = String.valueOf(ConstantsUtils.decimalRoundOff(new BigDecimal(alternativeUOMQty), 3));//alternativeUOMQty+"";
                        }
                    }
                }
            }
        }


        SchemeBean schemeBean = new SchemeBean();
        Double mDobOrderQty = Double.parseDouble(mStrOrderQty);
        Double mDobTempOrderQty = Double.parseDouble(mStrOrderQty);
        Double mDobBatchQty = 0.0, mDoubleTempQty = 0.0, mDouTempQty = Double.parseDouble(mStrOrderQty);
        Double doubleMatUnitPrice = 0.0;
        Double mDouCalucaltedNetAmount = 0.0;
//        String mStrBatchNo="",mStrMFD="";
        Double mDouPrimaryPer = 0.0;

        boolean mBoolBatchQtyEmpty = false, mBoolBatchQtyNotEmpty = false;
        String mStrFirstBatchUnitPrice = "0", mStrFirstBatchPrimaryPer = "0", mStrFirstBatchMRP = "0", mStrFirstBatchNo = "", mStrFirstMFD = "";
        //Check if the offline oData store is initialized
        try {
            if (cpStockarrayList != null && cpStockarrayList.size() > 0) {
                for (CPStockSNoBean cpStockSNoBean : cpStockarrayList) {
                    try {
                        doubleMatUnitPrice = Double.parseDouble(cpStockSNoBean.getIntermUnitPrice());
                    } catch (NumberFormatException e) {
                        doubleMatUnitPrice = 0.0;
                    }

                    try {
                        mDobBatchQty = Double.parseDouble(cpStockSNoBean.getQuantity());
                    } catch (NumberFormatException e) {
                        mDobBatchQty = 0.0;
                    }
                    //                    mStrBatchNo = cpStockSNoBean.getBatch();
                    //                    mStrMFD = cpStockSNoBean.getManufacturingDate();


                    if (!skuGroupBean.getSelectedUOM().equalsIgnoreCase(skuGroupBean.getUOM()) && !skuGroupBean.getSelectedUOM().equalsIgnoreCase("") && TextUtils.isEmpty(mPriceBatchCalType)) {
                        if (mDobBatchQty > 0) {
                            mDobBatchQty = Double.parseDouble(Constants.trimQtyDecimalPlace(String.valueOf(mDobBatchQty * Double.parseDouble(skuGroupBean.getAlternativeUOM2Num()))));
                        }
                        if (doubleMatUnitPrice > 0) {
//                                doubleIntermMatUnitPrice = Double.parseDouble(String.valueOf(ConstantsUtils.decimalRoundOff(new BigDecimal(doubleIntermMatUnitPrice/Double.parseDouble(skuGroupBean.getAlternativeUOM2Num())),2)));
                            doubleMatUnitPrice = doubleMatUnitPrice / Double.parseDouble(skuGroupBean.getAlternativeUOM2Num());
                        }
                    }

                    try {
                        mDouPrimaryPer = Double.parseDouble(cpStockSNoBean.getPriDiscountPer());
                    } catch (NumberFormatException e) {
                        mDouPrimaryPer = 0.0;
                    }
                    // Price cal changed based on type set date 14062018 (if typeset value empty it goes to old calculation(means batch wise net amount calculation)
                    // other wise it goes to latest MFD batch material price and then calculate net price)
                    if (mPriceBatchCalType.equalsIgnoreCase("")) {
                        if (mDobBatchQty > 0) {

                            if (!mBoolBatchQtyNotEmpty) {
                                mBoolBatchQtyNotEmpty = true;
                            }
                            if (mDobTempOrderQty >= mDobBatchQty && mDoubleTempQty != mDobOrderQty && mDouTempQty > 0) {

                                mDobTempOrderQty = mDobTempOrderQty - mDobBatchQty;

                                mDouTempQty = mDouTempQty - mDobBatchQty;

                                mDoubleTempQty = mDoubleTempQty + mDobBatchQty;

                                Double mDouPrimDisAmt = null;
                                try {
                                    mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", (mDobBatchQty == 0.0 ? mDobTempOrderQty : mDobBatchQty) * doubleMatUnitPrice + ""));
                                } catch (NumberFormatException e) {
                                    mDouPrimDisAmt = 0.0;
                                }

                                mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobBatchQty == 0.0 ? mDobTempOrderQty : mDobBatchQty) * doubleMatUnitPrice - mDouPrimDisAmt;


                            } else if (mDobTempOrderQty <= mDobBatchQty && mDoubleTempQty != mDobOrderQty && mDouTempQty > 0) {
                                mDouTempQty = mDobTempOrderQty;

                                mDoubleTempQty = mDoubleTempQty + mDobTempOrderQty;

                                Double mDouPrimDisAmt = null;
                                try {
                                    mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", (mDobTempOrderQty * doubleMatUnitPrice) + ""));
                                } catch (NumberFormatException e) {
                                    mDouPrimDisAmt = 0.0;
                                }

                                mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * doubleMatUnitPrice) - mDouPrimDisAmt;


                                break;

                            } else {
                                break;
                            }
                        } else {
                            if (!mBoolBatchQtyEmpty) {
                                mBoolBatchQtyEmpty = true;
                                mStrFirstBatchUnitPrice = doubleMatUnitPrice + "";
                                mStrFirstBatchPrimaryPer = mDouPrimaryPer + "";
                            }
                        }
                    } else {
                        mDouTempQty = mDobTempOrderQty;

                        mDoubleTempQty = mDoubleTempQty + mDobTempOrderQty;

                        Double mDouPrimDisAmt = null;
                        try {
                            mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", (mDobTempOrderQty * doubleMatUnitPrice) + ""));
                        } catch (NumberFormatException e) {
                            mDouPrimDisAmt = 0.0;
                        }

                        mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * doubleMatUnitPrice) - mDouPrimDisAmt;
                        break;
                    }
                }

                try {

                    if (mDobTempOrderQty < mDobOrderQty) {
                        double mdouRemaingQty = mDobOrderQty - mDoubleTempQty;
                        if (mdouRemaingQty > 0) {

                            Double mDouPrimDisAmt = null;
                            try {
                                mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", (mDobTempOrderQty * doubleMatUnitPrice) + ""));
                            } catch (NumberFormatException e) {
                                mDouPrimDisAmt = 0.0;
                            }

                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * doubleMatUnitPrice) - mDouPrimDisAmt;
                        }
                    } else {
                        if (!mBoolBatchQtyNotEmpty) {

                            Double mDouPrimDisAmt = null;
                            try {
                                mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mStrFirstBatchPrimaryPer + "", (mDobTempOrderQty * Double.parseDouble(mStrFirstBatchUnitPrice)) + ""));
                            } catch (NumberFormatException e) {
                                mDouPrimDisAmt = 0.0;
                            }

                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * Double.parseDouble(mStrFirstBatchUnitPrice)) - mDouPrimDisAmt;
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        schemeBean.setNetAmount(mDouCalucaltedNetAmount.toString());
        return schemeBean;
    }

    public static ODataEntity getDecimalValueByColumnName(String mQry, String columnName) throws OfflineODataStoreException {
        ODataEntity oDataEntity = null;
        String mStrVal = "";
        double mDobBatchQty = 0.0;
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(columnName);
                        try {
                            BigDecimal mBigDecVal = (BigDecimal) property.getValue();
                            mStrVal = mBigDecVal.doubleValue() + "";
                        } catch (Exception e) {
                            mStrVal = "0";
                        }

                        property = properties.get(Constants.Quantity);
                        if (property != null) {
                            BigDecimal mDecBatchQty = (BigDecimal) property.getValue();
                            if (mDecBatchQty != null) {
                                mDobBatchQty = mDecBatchQty.doubleValue();
                            } else {
                                mDobBatchQty = 0.0;
                            }

                        }
                        if (mDobBatchQty > 0) {
                            if (!TextUtils.isEmpty(mStrVal)) {
                                return entity;
                            }
                        }
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return oDataEntity;

    }

    public static String getPriceOnFieldByMatBatchAfterPrimarySecDiscount(ODataEntity entity, String mStrNetAmtPerQty, String mStrOrderQty) throws OfflineODataStoreException {

        Double doubleTax1 = 0.0, doubleTax2 = 0.0, doubleTax3 = 0.0, doubleTax4 = 0.0, doubleTax5 = 0.0,
                doubleTax6 = 0.0, doubleTax7 = 0.0, doubleTax8 = 0.0, doubleTax9 = 0.0, doubleTax10 = 0.0;
        Double mDouCalucaltedNetAmount = 0.0;
        String mStrCalTaxOneAmt = "0.0", mStrCalTaxTwoAmt = "0.0", mStrCalTaxThreeAmt = "0.0",
                mStrCalTaxFourAmt = "0.0", mStrCalTaxFiveAmt = "0.0", mStrCalTaxSixAmt = "0.0",
                mStrCalSevenAmt = "0.0", mStrCalTaxEightAmt = "0.0", mStrCalTaxNineAmt = "0.0",
                mStrCalTaxTenAmt = "0.0";

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;


            properties = entity.getProperties();

            property = properties.get(Constants.Tax1);
            if (property != null) {
                BigDecimal mDecTax1 = (BigDecimal) property.getValue();
                if (mDecTax1 != null) {
                    doubleTax1 = mDecTax1.doubleValue();
                } else {
                    doubleTax1 = 0.0;
                }
            }
            if (doubleTax1 > 0) {
                mStrCalTaxOneAmt = getTaxAmtAfterPrimarySecDiscount(properties, "01", doubleTax1, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax2);
            if (property != null) {
                BigDecimal mDecTax2 = (BigDecimal) property.getValue();
                if (mDecTax2 != null) {
                    doubleTax2 = mDecTax2.doubleValue();
                } else {
                    doubleTax2 = 0.0;
                }
            }
            if (doubleTax2 > 0) {
                mStrCalTaxTwoAmt = getTaxAmtAfterPrimarySecDiscount(properties, "02", doubleTax2, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax3);
            if (property != null) {
                BigDecimal mDecTax3 = (BigDecimal) property.getValue();
                if (mDecTax3 != null) {
                    doubleTax3 = mDecTax3.doubleValue();
                } else {
                    doubleTax3 = 0.0;
                }
            }
            if (doubleTax3 > 0) {
                mStrCalTaxThreeAmt = getTaxAmtAfterPrimarySecDiscount(properties, "03", doubleTax3, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax4);
            if (property != null) {
                BigDecimal mDecTax4 = (BigDecimal) property.getValue();
                if (mDecTax4 != null) {
                    doubleTax4 = mDecTax4.doubleValue();
                } else {
                    doubleTax4 = 0.0;
                }
            }
            if (doubleTax4 > 0) {
                mStrCalTaxFourAmt = getTaxAmtAfterPrimarySecDiscount(properties, "04", doubleTax4, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax5);
            if (property != null) {
                BigDecimal mDecTax5 = (BigDecimal) property.getValue();
                if (mDecTax5 != null) {
                    doubleTax5 = mDecTax5.doubleValue();
                } else {
                    doubleTax5 = 0.0;
                }
            }
            if (doubleTax5 > 0) {
                mStrCalTaxFiveAmt = getTaxAmtAfterPrimarySecDiscount(properties, "05", doubleTax5, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax6);
            if (property != null) {
                BigDecimal mDecTax6 = (BigDecimal) property.getValue();
                if (mDecTax6 != null) {
                    doubleTax6 = mDecTax6.doubleValue();
                } else {
                    doubleTax6 = 0.0;
                }
            }
            if (doubleTax6 > 0) {
                mStrCalTaxSixAmt = getTaxAmtAfterPrimarySecDiscount(properties, "06", doubleTax6, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax7);
            if (property != null) {
                BigDecimal mDecTax7 = (BigDecimal) property.getValue();
                if (mDecTax7 != null) {
                    doubleTax7 = mDecTax7.doubleValue();
                } else {
                    doubleTax7 = 0.0;
                }
            }
            if (doubleTax7 > 0) {
                mStrCalSevenAmt = getTaxAmtAfterPrimarySecDiscount(properties, "07", doubleTax7, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax8);
            if (property != null) {
                BigDecimal mDecTax8 = (BigDecimal) property.getValue();
                if (mDecTax8 != null) {
                    doubleTax8 = mDecTax8.doubleValue();
                } else {
                    doubleTax8 = 0.0;
                }
            }
            if (doubleTax8 > 0) {
                mStrCalTaxEightAmt = getTaxAmtAfterPrimarySecDiscount(properties, "08", doubleTax8, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax9);
            if (property != null) {
                BigDecimal mDecTax9 = (BigDecimal) property.getValue();
                if (mDecTax9 != null) {
                    doubleTax9 = mDecTax9.doubleValue();
                } else {
                    doubleTax9 = 0.0;
                }
            }
            if (doubleTax9 > 0) {
                mStrCalTaxNineAmt = getTaxAmtAfterPrimarySecDiscount(properties, "09", doubleTax9, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax10);
            if (property != null) {
                BigDecimal mDecTax10 = (BigDecimal) property.getValue();
                if (mDecTax10 != null) {
                    doubleTax10 = mDecTax10.doubleValue();
                } else {
                    doubleTax10 = 0.0;
                }
            }
            if (doubleTax10 > 0) {
                mStrCalTaxTenAmt = getTaxAmtAfterPrimarySecDiscount(properties, "10", doubleTax10, mStrNetAmtPerQty);
            }


            /*mDouCalucaltedNetAmount = (Double.parseDouble(mStrCalTaxOneAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxTwoAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxThreeAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxFourAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxFiveAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxSixAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalSevenAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxEightAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxNineAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxTenAmt) * Double.parseDouble(mStrOrderQty));*/

            mDouCalucaltedNetAmount = ConstantsUtils.decimalRoundOff(new BigDecimal((Double.parseDouble(mStrCalTaxOneAmt) * Double.parseDouble(mStrOrderQty))), 2).doubleValue()
                    + ConstantsUtils.decimalRoundOff(new BigDecimal((Double.parseDouble(mStrCalTaxTwoAmt) * Double.parseDouble(mStrOrderQty))), 2).doubleValue()
                    + ConstantsUtils.decimalRoundOff(new BigDecimal((Double.parseDouble(mStrCalTaxThreeAmt) * Double.parseDouble(mStrOrderQty))), 2).doubleValue()
                    + ConstantsUtils.decimalRoundOff(new BigDecimal((Double.parseDouble(mStrCalTaxFourAmt) * Double.parseDouble(mStrOrderQty))), 2).doubleValue()
                    + ConstantsUtils.decimalRoundOff(new BigDecimal((Double.parseDouble(mStrCalTaxFiveAmt) * Double.parseDouble(mStrOrderQty))), 2).doubleValue()
                    + ConstantsUtils.decimalRoundOff(new BigDecimal((Double.parseDouble(mStrCalTaxSixAmt) * Double.parseDouble(mStrOrderQty))), 2).doubleValue()
                    + ConstantsUtils.decimalRoundOff(new BigDecimal((Double.parseDouble(mStrCalSevenAmt) * Double.parseDouble(mStrOrderQty))), 2).doubleValue()
                    + ConstantsUtils.decimalRoundOff(new BigDecimal((Double.parseDouble(mStrCalTaxEightAmt) * Double.parseDouble(mStrOrderQty))), 2).doubleValue()
                    + ConstantsUtils.decimalRoundOff(new BigDecimal((Double.parseDouble(mStrCalTaxNineAmt) * Double.parseDouble(mStrOrderQty))), 2).doubleValue()
                    + ConstantsUtils.decimalRoundOff(new BigDecimal((Double.parseDouble(mStrCalTaxTenAmt) * Double.parseDouble(mStrOrderQty))), 2).doubleValue();
        }

//        try {
//            return ConstantsUtils.decimalRoundOff(new BigDecimal(mDouCalucaltedNetAmount),2).toString();
//        } catch (Exception e) {
//            return mDouCalucaltedNetAmount.toString();
//        }
        return mDouCalucaltedNetAmount.toString();
    }

    public static String getTaxAmtAfterPrimarySecDiscount(ODataPropMap properties, String mStrTaxId, Double doubleTax, String mStrNetAmtPerQty) throws OfflineODataStoreException {
        String mCalTaxAmt = "0.0";
        ODataProperty property;
        Double doubleUnitPrice = 0.0;

        ArrayList<PricingConditions> pricingConditionsAL = getPricingConditionTypeList(Constants.PricingConditions + "?$filter="
                + Constants.ReferenceTaxFieldID + " eq '" + mStrTaxId + "' ");

        if (pricingConditionsAL != null && pricingConditionsAL.size() > 0) {

            if (pricingConditionsAL.get(0).getCalcOnID().equalsIgnoreCase("02")) {

                ArrayList<PricingConditions> pricingConOnCalValAL = getPricingConditionTypeList(Constants.PricingConditions + "?$filter="
                        + Constants.ConditionTypeID + " eq '" + pricingConditionsAL.get(0).getCalcOnConditionTypeID() + "' ");
                if (pricingConOnCalValAL != null && pricingConOnCalValAL.size() > 0) {
                    property = properties.get(Constants.getCalculateColumn(pricingConOnCalValAL.get(0).getApplicableOnID()));
                    if (property != null) {
                        BigDecimal mDecUnitPrice = (BigDecimal) property.getValue();
                        if (mDecUnitPrice != null) {
                            doubleUnitPrice = mDecUnitPrice.doubleValue();
                        } else {
                            doubleUnitPrice = 0.0;
                        }
                    }
                    if (pricingConOnCalValAL.get(0).getApplicableOnID().equalsIgnoreCase("01")) { // Cal on unit price
                        mCalTaxAmt = Constants.formulaOneCalculation(doubleTax.toString(), mStrNetAmtPerQty + "");
                    } else {
                        mCalTaxAmt = Constants.formulaOneCalculation(doubleTax.toString(), doubleUnitPrice + "");
                    }


                }

            } else {
                property = properties.get(Constants.getCalculateColumn(pricingConditionsAL.get(0).getApplicableOnID()));
                if (property != null) {
                    BigDecimal mDecUnitPrice = (BigDecimal) property.getValue();
                    if (mDecUnitPrice != null) {
                        doubleUnitPrice = mDecUnitPrice.doubleValue();
                    } else {
                        doubleUnitPrice = 0.0;
                    }
                }
                mCalTaxAmt = Constants.formulaOneCalculation(doubleTax.toString(), mStrNetAmtPerQty + "");
            }
        }
//        mCalTaxAmt = Constants.formulaOneCalculation(doubleTax.toString(), mStrNetAmtPerQty + "");
        return mCalTaxAmt;
    }

    public static ArrayList<String> getFreeMaterialsFromSchFreeMatGrp(String freeMatQry, String columnName) {

        ArrayList<String> matList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = null;
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, freeMatQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }

            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(columnName);
                    if (!matList.contains((String) property.getValue())) {
                        matList.add((String) property.getValue());
                    }
                }
            }

        }
        return matList;

    }

    public static ArrayList<PricingConditions> getPricingConditionTypeList(String pricingCondQry) throws OfflineODataStoreException {

        ArrayList<PricingConditions> pricingCondList = new ArrayList<>();
        //Check if the offline oData store is initialized
        PricingConditions prcingCondBean;
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, pricingCondQry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                prcingCondBean = new PricingConditions();
                property = properties.get(Constants.ConditionTypeID);
                prcingCondBean.setConditionTypeID((String) property.getValue());
                property = properties.get(Constants.ConditionTypeDesc);
                prcingCondBean.setConditionTypeDesc((String) property.getValue());
                property = properties.get(Constants.ReferenceTaxFieldID);
                prcingCondBean.setReferenceTaxFieldID((String) property.getValue());
                property = properties.get(Constants.ReferenceTaxFieldDesc);
                prcingCondBean.setReferenceTaxFieldDesc((String) property.getValue());
                property = properties.get(Constants.FormulaID);
                prcingCondBean.setFormulaID((String) property.getValue());
                property = properties.get(Constants.FormulaDesc);
                prcingCondBean.setFormulaDesc((String) property.getValue());
                property = properties.get(Constants.CalcOnID);
                prcingCondBean.setCalcOnID((String) property.getValue());
                property = properties.get(Constants.CalcOnDesc);
                prcingCondBean.setCalcOnDesc((String) property.getValue());
                property = properties.get(Constants.ApplicableOnID);
                prcingCondBean.setApplicableOnID((String) property.getValue());
                property = properties.get(Constants.ApplicableOnDesc);
                prcingCondBean.setApplicableOnDesc((String) property.getValue());
                property = properties.get(Constants.CalcOnConditionTypeID);
                prcingCondBean.setCalcOnConditionTypeID((String) property.getValue());
                property = properties.get(Constants.CalcOnConditionTypeDesc);
                prcingCondBean.setCalcOnConditionTypeDesc((String) property.getValue());
                pricingCondList.add(prcingCondBean);
            }
        }

        return pricingCondList;
    }

    public static ODataEntity getFreeProdLowestMrp(String mQry, String columnName) throws OfflineODataStoreException {
        ODataEntity oDataEntity = null;
        String mStrUnitPriceVal = "";
        double mDobBatchQty = 0.0, mDobMRP = 0.0;
        ArrayList<FreeMaterialBean> alFreeMatList = new ArrayList<>();
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        FreeMaterialBean freeMaterialBean = new FreeMaterialBean();
                        properties = entity.getProperties();
                        property = properties.get(columnName);
                        try {
                            BigDecimal mBigDecVal = (BigDecimal) property.getValue();
                            mStrUnitPriceVal = mBigDecVal.doubleValue() + "";
                        } catch (Exception e) {
                            mStrUnitPriceVal = "0";
                        }

                        property = properties.get(Constants.Quantity);
                        if (property != null) {
                            BigDecimal mDecBatchQty = (BigDecimal) property.getValue();
                            if (mDecBatchQty != null) {
                                mDobBatchQty = mDecBatchQty.doubleValue();
                            } else {
                                mDobBatchQty = 0.0;
                            }

                        }
                        property = properties.get(Constants.MRP);
                        if (property != null) {
                            BigDecimal mDecMRP = (BigDecimal) property.getValue();
                            if (mDecMRP != null) {
                                mDobMRP = mDecMRP.doubleValue();
                            } else {
                                mDobMRP = 0.0;
                            }

                        }
                        if (mDobBatchQty > 0) {
                            if (!TextUtils.isEmpty(mStrUnitPriceVal)) {
                                freeMaterialBean.setIntermUnitPrice(mStrUnitPriceVal);
                                freeMaterialBean.setMRP(mDobMRP + "");
                                freeMaterialBean.setoDataEntity(entity);
                                alFreeMatList.add(freeMaterialBean);
                            }
                        }
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        if (alFreeMatList != null && alFreeMatList.size() > 0) {
            Collections.sort(alFreeMatList, new Comparator<FreeMaterialBean>() {
                public int compare(FreeMaterialBean one, FreeMaterialBean other) {
                    Double i1 = null;
                    Double i2 = null;
                    try {
                        i1 = Double.parseDouble(one.getMRP());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = Double.parseDouble(one.getMRP());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getMRP().compareTo(other.getMRP());
                    }
                }
            });

            oDataEntity = alFreeMatList.get(0).getoDataEntity();
        }
        return oDataEntity;

    }

    public static void getSecondarySchemeSlabPerRunning(String schemeQry, String mStrOrderQty, String mStrSchemeGUID,
                                                        String mStrTargetBasedID, String[] mStrMatNo,
                                                        String isHeaderBased, String mTargetAmount) throws OfflineODataStoreException {

        SchemeBean schemeBean = null;
        ArrayList<SchemeBean> alSchemeBeen = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    if (mStrTargetBasedID.equalsIgnoreCase("02")) {
                        property = properties.get(Constants.ToValue);
                    } else {
                        property = properties.get(Constants.ToQty);
                    }

                    try {
                        BigDecimal mBigDecToQty = (BigDecimal) property.getValue();
                        schemeBean.setToQty(mBigDecToQty.doubleValue() + "");
                    } catch (Exception e) {
                        schemeBean.setToQty("0");
                    }

                    if (mStrTargetBasedID.equalsIgnoreCase("02")) {
                        property = properties.get(Constants.FromValue);
                    } else {
                        property = properties.get(Constants.FromQty);
                    }

                    try {
                        BigDecimal mBigDecFromQty = (BigDecimal) property.getValue();
                        schemeBean.setFromQty(mBigDecFromQty.doubleValue() + "");
                    } catch (Exception e) {
                        schemeBean.setFromQty("0");
                    }

                    property = properties.get(Constants.SlabTypeID);
                    schemeBean.setSlabTypeID((String) property.getValue());
                    property = properties.get(Constants.SlabTypeDesc);
                    schemeBean.setSlabTypeDesc((String) property.getValue());
                    property = properties.get(Constants.SlabRuleID);
                    String mStrSlabRuleId = (String) property.getValue();
                    property = properties.get(Constants.SlabRuleDesc);
                    String mStrSlabRuleDesc = (String) property.getValue();
                    if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeProduct)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.Material_Desc);
                        schemeBean.setMaterialDesc((String) property.getValue());
                        property = properties.get(Constants.Material_No);
                        schemeBean.setMaterialNo((String) property.getValue());

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeSKUGroup)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.SKUGroupID);
                        schemeBean.setSKUGroupID((String) property.getValue());
                        property = properties.get(Constants.SKUGroupDesc);
                        schemeBean.setSKUGroupDesc((String) property.getValue());
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeCRSSKUGroup)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        schemeBean.setOrderMaterialGroupDesc((String) property.getValue());
                        property = properties.get(Constants.OrderMaterialGroupID);
                        schemeBean.setOrderMaterialGroupID((String) property.getValue());
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountPercentage)) {
                        property = properties.get(Constants.PayoutPerc);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setPayoutPerc(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setPayoutPerc("0");
                        }

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountAmount)) {
                        property = properties.get(Constants.PayoutAmount);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setPayoutAmount(mBigDecPayoutPerc.doubleValue() + "");
                            schemeBean.setSchemeOffer(mBigDecPayoutPerc.doubleValue() + " " + mStrSlabRuleDesc);
                        } catch (Exception e) {
                            schemeBean.setPayoutAmount("0");
                        }
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeScratchCard)) {
                        property = properties.get(Constants.NoOfCards);
                        try {
                            schemeBean.setNoOfCards(String.valueOf((short) property.getValue()));
                        } catch (Exception e) {
                            schemeBean.setNoOfCards("0");
                        }
                        property = properties.get(Constants.CardTitle);
                        schemeBean.setCardTitle((String) property.getValue());

                        property = properties.get(Constants.ScratchCardDesc);
                        schemeBean.setScratchCardDesc((String) property.getValue());

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeFreeArticle)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.FreeArticle);
                        schemeBean.setFreeArticle((String) property.getValue());

                        property = properties.get(Constants.FreeArticleDesc);
                        schemeBean.setFreeArticleDesc((String) property.getValue());
                    }
                    property = properties.get(Constants.SchemeItemGUID);
                    ODataGuid mSchItemGuid = null;
                    try {
                        mSchItemGuid = (ODataGuid) property.getValue();
                        schemeBean.setSchemeItemGUID(mSchItemGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    schemeBean.setSlabRuleID(mStrSlabRuleId);
                    schemeBean.setSlabRuleDesc(mStrSlabRuleDesc);

                    alSchemeBeen.add(schemeBean);
                }
            }
        }

        if (alSchemeBeen != null && alSchemeBeen.size() > 0) {
            Collections.sort(alSchemeBeen, new Comparator<SchemeBean>() {
                public int compare(SchemeBean one, SchemeBean other) {
                    Double i1 = null;
                    Double i2 = null;
                    try {
                        i1 = Double.parseDouble(one.getToQty());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = Double.parseDouble(other.getToQty());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getToQty().compareTo(one.getToQty());
                    }
                }
            });

            if (mStrTargetBasedID.equalsIgnoreCase("02")) {
                String mOrderVal = "0";
                if (!isHeaderBased.equalsIgnoreCase(Constants.X)) {
                    mOrderVal = mTargetAmount;
                } else {
                    mOrderVal = mTargetAmount;
                }

                getMaxSlab(alSchemeBeen, Double.parseDouble(mOrderVal));
            } else {
                getMaxSlab(alSchemeBeen, Double.parseDouble(mStrOrderQty));
            }


        } else {
        }
    }

    private static double getMaxSlab(ArrayList<SchemeBean> alSchemeBeen, Double mDouOrderQty) {
        Double mDoubMaxSlab = 0.0;
        int matIteration = 0, matRemeinder = 0;
        for (int incVal = 0; incVal < alSchemeBeen.size(); incVal++) {
            SchemeBean schemeBean = alSchemeBeen.get(incVal);
            String mStrSlabRuleId = alSchemeBeen.get(incVal).getSlabRuleID();
            Double mDouBeanToQty = null;
            try {
                mDouBeanToQty = Double.parseDouble(alSchemeBeen.get(incVal).getToQty());
            } catch (NumberFormatException e) {
                mDouBeanToQty = 0.0;
            }
            Double mDouBeanFromQty = null;
            try {
                mDouBeanFromQty = Double.parseDouble(alSchemeBeen.get(incVal).getFromQty());
            } catch (NumberFormatException e) {
                mDouBeanFromQty = 0.0;
            }
            if (mDouBeanFromQty > 0) {
                if (mDouOrderQty >= mDouBeanToQty) {
                    matIteration = (int) (mDouOrderQty / mDouBeanFromQty);
                    matRemeinder = (int) (mDouOrderQty % mDouBeanFromQty);

                    if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeProduct)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeSKUGroup)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeCRSSKUGroup)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountPercentage)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getPayoutPerc()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountAmount)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getPayoutAmount()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeScratchCard)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getNoOfCards()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeFreeArticle)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    }

                    Constants.DoubGetRunningSlabPer = Constants.DoubGetRunningSlabPer + mDoubMaxSlab;

                    getMaxSlab(alSchemeBeen, (double) matRemeinder);
                    break;

                } else if (mDouBeanFromQty <= mDouOrderQty && mDouOrderQty <= mDouBeanToQty) {
                    matIteration = (int) (mDouOrderQty / mDouBeanFromQty);
                    matRemeinder = (int) (mDouOrderQty % mDouBeanFromQty);

                    if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeProduct)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeSKUGroup)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeCRSSKUGroup)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountPercentage)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getPayoutPerc()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountAmount)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getPayoutAmount()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeScratchCard)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getNoOfCards()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeFreeArticle)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    }

                    Constants.DoubGetRunningSlabPer = Constants.DoubGetRunningSlabPer + mDoubMaxSlab;

                    getMaxSlab(alSchemeBeen, (double) matRemeinder);
                    break;
                }
            }


        }
        return mDoubMaxSlab;
    }

    public static SchemeBean getBasketSchemeHeader(String mQry) {
        SchemeBean headerScheme = null;
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = null;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                headerScheme = new SchemeBean();
                properties = entity.getProperties();
                property = properties.get(Constants.OnSaleOfCatID);
                headerScheme.setOnSaleOfCatID((String) property.getValue());
                property = properties.get(Constants.ItemMin);
                try {
                    BigDecimal mBigItemMin = (BigDecimal) property.getValue();
                    headerScheme.setItemMin(mBigItemMin.doubleValue() + "");
                } catch (Exception e) {
                    headerScheme.setItemMin("0");
                }
                property = properties.get(Constants.SchemeItemGUID);
                ODataGuid mSchItemGuid = null;
                try {
                    mSchItemGuid = (ODataGuid) property.getValue();
                    headerScheme.setHierarchicalRefGUID(mSchItemGuid.guidAsString36().toUpperCase());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return headerScheme;
    }

    public static ArrayList<SchemeBean> getBasketSchemeItems(String mQry) {
        ArrayList<SchemeBean> alSchemeList = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = null;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        SchemeBean schemeBean = null;
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                schemeBean = new SchemeBean();
                properties = entity.getProperties();

                property = properties.get(Constants.ItemMin);
                try {
                    BigDecimal mBigItemMin = (BigDecimal) property.getValue();
                    schemeBean.setItemMin(mBigItemMin.doubleValue() + "");
                } catch (Exception e) {
                    schemeBean.setItemMin("0");
                }

                property = properties.get(Constants.OrderMaterialGroupID);
                schemeBean.setOrderMaterialGroupID((String) property.getValue());

                property = properties.get(Constants.MaterialNo);
                schemeBean.setMaterialNo((String) property.getValue());

                property = properties.get(Constants.SKUGroupID);
                schemeBean.setSKUGroupID((String) property.getValue());


                property = properties.get(Constants.BrandID);
                schemeBean.setBrandID((String) property.getValue());


                property = properties.get(Constants.BannerID);
                schemeBean.setBannerID((String) property.getValue());

                property = properties.get(Constants.OnSaleOfItemUOMID);
                schemeBean.setOnSaleOfItemUOMID((String) property.getValue());

                property = properties.get(Constants.OnSaleOfItemUOMDesc);
                schemeBean.setOnSaleOfItemUOMDesc((String) property.getValue());


                alSchemeList.add(schemeBean);
            }
        }
        return alSchemeList;
    }

    public static ArrayList<String> getOrderMatGrp(String mStrQry) {
        ArrayList<String> alOrderMatGrp = new ArrayList<>();
        Set mOrderMatGrp = new HashSet();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = null;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }

        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.OrderMaterialGroupID);

                boolean isCrsSkuAval = false;
                if (mOrderMatGrp.size() == 0) {
                    isCrsSkuAval = true;
                } else if (!mOrderMatGrp.contains((String) property.getValue())) {
                    isCrsSkuAval = true;
                }
                if (isCrsSkuAval) {
                    alOrderMatGrp.add((String) property.getValue());
                    mOrderMatGrp.add((String) property.getValue());
                }
            }
        }

        return alOrderMatGrp;
    }

    public static SchemeBean getNetAmount(String mStrSNoQry, String mStrOrderQty, String mStrMatNo,
                                          boolean calculateRatioScheme, SKUGroupBean skuGroupBean, String mPriceBatchCalType) throws OfflineODataStoreException {

        double alternativeUOMQty = 0;
        String alternativeUOM = "";
        // Here check alternative UOM is selected or not.Ex : Here conversion Qty form bag to pc
        Double mDobActualTempOrderQty = Double.parseDouble(mStrOrderQty);
        if (skuGroupBean != null) {
            if (!skuGroupBean.getSelectedUOM().equalsIgnoreCase(skuGroupBean.getUOM()) && !skuGroupBean.getSelectedUOM().equalsIgnoreCase("")) {
                alternativeUOM = skuGroupBean.getSelectedUOM();
                if (mPriceBatchCalType.equalsIgnoreCase(Constants.X)) {
                    try {
                        alternativeUOMQty = Double.parseDouble(mStrOrderQty) / Double.parseDouble(skuGroupBean.getAlternativeUOM2Num());
                        mDobActualTempOrderQty = alternativeUOMQty;
                    } catch (NumberFormatException e) {
                        alternativeUOMQty = 0.0;
                        e.printStackTrace();
                    }
                    if (alternativeUOMQty != 0  && !Double.isInfinite(alternativeUOMQty)) {
                        mStrOrderQty = String.valueOf(ConstantsUtils.decimalRoundOff(new BigDecimal(alternativeUOMQty), 3));//alternativeUOMQty+"";
                    }
                }
            }
        }

        SchemeBean schemeBean = new SchemeBean();
        ArrayList<MaterialBatchBean> alMatBatch = new ArrayList<>();
        MaterialBatchBean materialBatchBean;
        Double mDobOrderQty = Double.parseDouble(mStrOrderQty);
        Double mDobActualOrderQty = (mDobActualTempOrderQty);
        Double mDobTempOrderQty = Double.parseDouble(mStrOrderQty);
        Double mDobBatchQty = 0.0, mDoubleTempQty = 0.0, mDouTempQty = Double.parseDouble(mStrOrderQty);
        Double doubleIntermMatUnitPrice = 0.0, doubleMatMRP = 0.0, doubleMatUnitPrice = 0.0;
        Double mDouCalucaltedNetAmount = 0.0, mDouCalPriDis = 0.0;
        String mStrBatchNo = "", mStrMFD = "", mStrUOm = "", mStrTransRefTypeId = "", mStrTransRefNo = "", mStrTransRefItemNo = "";
        Double mDouPrimaryPer = 0.0;

        boolean mBoolBatchQtyEmpty = false, mBoolBatchQtyNotEmpty = false;
        String mStrFirstBatchUnitPrice = "0", mStrFirstBatchIntermUnitPrice = "0", mStrFirstBatchPrimaryPer = "0", mStrFirstBatchMRP = "0", mStrFirstBatchNo = "", mStrFirstMFD = "", mStrFirstTransRefTypeId = "", mStrFirstTransRefNo = "", mStrFirstTransRefItemNo = "";
        ODataEntity mOdataFirstEntity = null;

        Double mDobRatioSchDen = 0.0;
        Double doubleRatioSchNum = 0.0;
        String mStrFreeMaterialNo = "", matDesc = "";


        Double mDobRatioSchDenTemp = 0.0;
        Double doubleRatioSchNumTemp = 0.0;
        String mStrFreeMaterialNoTemp = "";
        boolean mRatioSchemeAval = false, mRatioSchemeAvalTemp = false;

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            int incVal = 0;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrSNoQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    materialBatchBean = new MaterialBatchBean();

                   /* property = properties.get(Constants.ISFreeGoodsItem);
                    if(property!=null) {
                        materialBatchBean.setISFreeGoodsItem(property.getValue().toString());
                    }*/
                    property = properties.get(Constants.Currency);
                    materialBatchBean.setCurrency(property.getValue().toString());
                    materialBatchBean.setAlterNativeUOM(alternativeUOM);

                    property = properties.get(Constants.IntermUnitPrice);
                    if (property != null) {
                        BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();

                        if (mDecimialMatUnitPrice != null) {
                            doubleIntermMatUnitPrice = mDecimialMatUnitPrice.doubleValue();
                        } else {
                            doubleIntermMatUnitPrice = 0.0;
                        }

                    }
                    property = properties.get(Constants.Quantity);
                    if (property != null) {
                        BigDecimal mDecBatchQty = (BigDecimal) property.getValue();
                        if (mDecBatchQty != null) {
                            mDobBatchQty = mDecBatchQty.doubleValue();
                        } else {
                            mDobBatchQty = 0.0;
                        }

                        if (!skuGroupBean.getSelectedUOM().equalsIgnoreCase(skuGroupBean.getUOM()) && !skuGroupBean.getSelectedUOM().equalsIgnoreCase("") && TextUtils.isEmpty(mPriceBatchCalType)) {
                            if (mDobBatchQty > 0) {
                                mDobBatchQty = Double.parseDouble(Constants.trimQtyDecimalPlace(String.valueOf(mDobBatchQty * Double.parseDouble(skuGroupBean.getAlternativeUOM2Num()))));
                            }
                            if (doubleIntermMatUnitPrice > 0) {
//                                doubleIntermMatUnitPrice = Double.parseDouble(String.valueOf(ConstantsUtils.decimalRoundOff(new BigDecimal(doubleIntermMatUnitPrice/Double.parseDouble(skuGroupBean.getAlternativeUOM2Num())),2)));
                                doubleIntermMatUnitPrice = doubleIntermMatUnitPrice / Double.parseDouble(skuGroupBean.getAlternativeUOM2Num());
                            }
                        }
                    }

                    property = properties.get(Constants.UnitPrice);
                    if (property != null) {
                        BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();

                        if (mDecimialMatUnitPrice != null) {
                            doubleMatUnitPrice = mDecimialMatUnitPrice.doubleValue();
                        } else {
                            doubleMatUnitPrice = 0.0;
                        }
                    }
                    property = properties.get(Constants.TransRefTypeID);
                    mStrTransRefTypeId = property.getValue().toString();
                    property = properties.get(Constants.TransRefNo);
                    mStrTransRefNo = property.getValue().toString();
                    property = properties.get(Constants.TransRefItemNo);
                    mStrTransRefItemNo = property.getValue().toString();


                    property = properties.get(Constants.MRP);
                    if (property != null) {
                        BigDecimal mDecimialMatMRP = (BigDecimal) property.getValue();

                        if (mDecimialMatMRP != null) {
                            doubleMatMRP = mDecimialMatMRP.doubleValue();
                        } else {
                            doubleMatMRP = 0.0;
                        }

                    }

                    property = properties.get(Constants.Batch);
                    mStrBatchNo = property.getValue().toString();

                    property = properties.get(Constants.FreeTypeID);
                    schemeBean.setISFreeTypeID(property.getValue().toString());

                    property = properties.get(Constants.UOM);
                    mStrUOm = property.getValue().toString();

                    property = properties.get(Constants.ManufacturingDate);
                    mStrMFD = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());

                    property = properties.get(Constants.PriDiscountPer);
                    if (property != null) {
                        BigDecimal mDecPriDis = (BigDecimal) property.getValue();
                        if (mDecPriDis != null) {
                            mDouPrimaryPer = mDecPriDis.doubleValue();
                        } else {
                            mDouPrimaryPer = 0.0;
                        }

                    }

                    property = properties.get(Constants.RatioSchNum);
                    try {
                        doubleRatioSchNum = Double.parseDouble((short) property.getValue() + "");
                    } catch (NumberFormatException e) {
                        doubleRatioSchNum = 0.0;
                    }

                    property = properties.get(Constants.RatioSchDen);

                    try {
                        mDobRatioSchDen = Double.parseDouble((short) property.getValue() + "");
                    } catch (NumberFormatException e) {
                        mDobRatioSchDen = 0.0;
                    }
                    property = properties.get(Constants.FreeMaterialNo);
                    mStrFreeMaterialNo = property.getValue().toString();

                    // Price cal changed based on type set date 14062018 (if typeset value empty it goes to old calculation(means batch wise net amount calculation)
                    // other wise it goes to latest MFD batch material price and then calculate net price)
                    if (mPriceBatchCalType.equalsIgnoreCase("")) {
                        if (mDobBatchQty > 0) {
                            if (!mBoolBatchQtyNotEmpty) {
                                mBoolBatchQtyNotEmpty = true;
                                schemeBean.setmBoolBatchQtyNotEmpty(true);
                            }

                            if (mDobTempOrderQty >= mDobBatchQty && mDoubleTempQty != mDobOrderQty && mDouTempQty > 0) {
                                //Ratio scheme validation
                                if (!mStrFreeMaterialNo.equalsIgnoreCase("") && mDobRatioSchDen > 0 && doubleRatioSchNum > 0) {
                                    if (!mRatioSchemeAvalTemp) {
                                        schemeBean.setRatioSchemeIndexVal(incVal + "");
                                        schemeBean.setmRatioSchemeAvalTemp(true);
                                        mRatioSchemeAvalTemp = true;
                                        mDobRatioSchDenTemp = mDobRatioSchDen;
                                        doubleRatioSchNumTemp = doubleRatioSchNum;
                                        mStrFreeMaterialNoTemp = mStrFreeMaterialNo;

                                        schemeBean.setmDobRatioSchDenTemp(mDobRatioSchDen);
                                        schemeBean.setDoubleRatioSchNumTemp(doubleRatioSchNum);
                                        schemeBean.setmStrFreeMaterialNoTemp(mStrFreeMaterialNo);
                                    }
                                }


                                mDobTempOrderQty = mDobTempOrderQty - mDobBatchQty;
                                mDobActualTempOrderQty = mDobActualTempOrderQty - mDobBatchQty;  // added in 14062018

                                mDouTempQty = mDouTempQty - mDobBatchQty;

                                mDoubleTempQty = mDoubleTempQty + mDobBatchQty;

                                mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobBatchQty == 0.0 ? mDobTempOrderQty : mDobBatchQty) * doubleIntermMatUnitPrice;

                                mDouCalPriDis = mDouCalPriDis + mDouPrimaryPer;
                                String mStrTaxAmt = "0";
                                materialBatchBean.setMaterialNo(mStrMatNo);
                                materialBatchBean.setBatchNo(mStrBatchNo);
                                materialBatchBean.setQty(mDobBatchQty + "");
                                materialBatchBean.setActualEnteredQty(mDobBatchQty + "");   // added in 14062018
                                materialBatchBean.setPrimaryPer(mDouPrimaryPer + "");
                                materialBatchBean.setLandingPrice(doubleMatUnitPrice + "");
                                materialBatchBean.setIntermUnitPrice(doubleIntermMatUnitPrice + "");
                                materialBatchBean.setMRP(doubleMatMRP + "");
                                materialBatchBean.setTransRefTypeID(mStrTransRefTypeId);
                                materialBatchBean.setTransRefNo(mStrTransRefNo);
                                materialBatchBean.setTransRefItemNo(mStrTransRefItemNo);

                                Double mDouBatQty = mDobBatchQty == 0.0 ? mDobTempOrderQty : mDobBatchQty;
//                            Double mDouCalNetAmt = mDouBatQty * doubleIntermMatUnitPrice;
                                Double mDouCalNetAmt = 0.0;
                                try {
                                    mDouCalNetAmt = ConstantsUtils.decimalRoundOff(new BigDecimal(mDouBatQty * doubleIntermMatUnitPrice), 2).doubleValue();
                                } catch (Exception e) {
                                    mDouCalNetAmt = 0.0;
                                    e.printStackTrace();
                                }
                                Double mDouPrimDisAmt = 0.0;
                                try {
                                    mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", mDouCalNetAmt + ""));
                                } catch (NumberFormatException e) {
                                    mDouPrimDisAmt = 0.0;
                                }
                                materialBatchBean.setNetAmount(mDouCalNetAmt + "");
                                Double mDouCalNetTaxDisAmt = mDouCalNetAmt - mDouPrimDisAmt;
                                materialBatchBean.setPrimaryPerAmt(mDouPrimDisAmt + "");
                                materialBatchBean.setoDataEntity(entity);
                                materialBatchBean.setNetAmtAftPriDis(mDouCalNetTaxDisAmt + "");
                                materialBatchBean.setTaxAmount(mStrTaxAmt);
                                materialBatchBean.setMFD(mStrMFD);
                                alMatBatch.add(materialBatchBean);

                            } else if (mDobTempOrderQty <= mDobBatchQty && mDoubleTempQty != mDobOrderQty && mDouTempQty > 0) {


                                //Ratio scheme validation
                                if (!mStrFreeMaterialNo.equalsIgnoreCase("") && mDobRatioSchDen > 0 && doubleRatioSchNum > 0) {
                                    if (!mRatioSchemeAvalTemp) {
                                        schemeBean.setRatioSchemeIndexVal(incVal + "");
                                        schemeBean.setmRatioSchemeAvalTemp(true);
                                        mRatioSchemeAvalTemp = true;
                                        mDobRatioSchDenTemp = mDobRatioSchDen;
                                        doubleRatioSchNumTemp = doubleRatioSchNum;
                                        mStrFreeMaterialNoTemp = mStrFreeMaterialNo;

                                        schemeBean.setmDobRatioSchDenTemp(mDobRatioSchDen);
                                        schemeBean.setDoubleRatioSchNumTemp(doubleRatioSchNum);
                                        schemeBean.setmStrFreeMaterialNoTemp(mStrFreeMaterialNo);
                                    }
                                }

                                mDouTempQty = mDobTempOrderQty;

                                mDoubleTempQty = mDoubleTempQty + mDobTempOrderQty;
                                Log.d("SOCreate", "NetAmount: " + (mDobTempOrderQty * doubleIntermMatUnitPrice));
                                mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * doubleIntermMatUnitPrice);
                                Log.d("SOCreate", "NetAmount: " + mDouCalucaltedNetAmount + " qty " + mDobTempOrderQty + " unit price " + doubleIntermMatUnitPrice);
                                mDouCalPriDis = mDouCalPriDis + mDouPrimaryPer;
                                String mStrTaxAmt = "0";
                                materialBatchBean.setMaterialNo(mStrMatNo);
                                materialBatchBean.setBatchNo(mStrBatchNo);
                                materialBatchBean.setQty(mDouTempQty + "");
                                materialBatchBean.setActualEnteredQty(mDobActualTempOrderQty + ""); // added in 14062018
                                materialBatchBean.setPrimaryPer(mDouPrimaryPer + "");
                                materialBatchBean.setLandingPrice(doubleMatUnitPrice + "");
                                materialBatchBean.setIntermUnitPrice(doubleIntermMatUnitPrice + "");
                                materialBatchBean.setMRP(doubleMatMRP + "");
//                            Double mDouCalNetAmt = mDobTempOrderQty * doubleIntermMatUnitPrice;
                                Double mDouCalNetAmt = 0.0;
                                try {
                                    mDouCalNetAmt = ConstantsUtils.decimalRoundOff(new BigDecimal(mDobTempOrderQty * doubleIntermMatUnitPrice), 2).doubleValue();
                                } catch (Exception e) {
                                    mDouCalNetAmt = 0.0;
                                    e.printStackTrace();
                                }
                                Double mDouPrimDisAmt = 0.0;
                                try {
                                    mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", mDouCalNetAmt + ""));
                                } catch (NumberFormatException e) {
                                    mDouPrimDisAmt = 0.0;
                                }
                                materialBatchBean.setNetAmount(mDouCalNetAmt + "");
                                Double mDouCalNetTaxDisAmt = mDouCalNetAmt - mDouPrimDisAmt;

                                materialBatchBean.setoDataEntity(entity);
                                materialBatchBean.setPrimaryPerAmt(mDouPrimDisAmt + "");
                                materialBatchBean.setNetAmtAftPriDis(mDouCalNetTaxDisAmt + "");
                                materialBatchBean.setTaxAmount(mStrTaxAmt);
                                materialBatchBean.setMFD(mStrMFD);

                                materialBatchBean.setTransRefTypeID(mStrTransRefTypeId);
                                materialBatchBean.setTransRefNo(mStrTransRefNo);
                                materialBatchBean.setTransRefItemNo(mStrTransRefItemNo);
                                alMatBatch.add(materialBatchBean);

                                break;

                            } else {
                                break;
                            }
                            incVal++;
                        } else {
                            if (!mBoolBatchQtyEmpty) {
                                mBoolBatchQtyEmpty = true;
                                mStrFirstBatchUnitPrice = doubleMatUnitPrice + "";
                                mStrFirstBatchIntermUnitPrice = doubleIntermMatUnitPrice + "";
                                mStrFirstBatchPrimaryPer = mDouPrimaryPer + "";
                                mStrFirstBatchMRP = doubleMatMRP + "";
                                mStrFirstBatchNo = mStrBatchNo + "";

                                mStrFirstTransRefTypeId = mStrTransRefTypeId + "";
                                mStrFirstTransRefNo = mStrTransRefNo + "";
                                mStrFirstTransRefItemNo = mStrTransRefItemNo + "";


                                mStrFirstMFD = mStrMFD + "";
                                mOdataFirstEntity = entity;


                                //Ratio scheme validation
                                if (!mStrFreeMaterialNo.equalsIgnoreCase("") && mDobRatioSchDen > 0 && doubleRatioSchNum > 0) {
                                    if (!mRatioSchemeAval) {

                                        if (alMatBatch.size() == 0)
                                            schemeBean.setRatioSchemeIndexVal(0 + "");
                                        mRatioSchemeAval = true;
                                        mDobRatioSchDenTemp = mDobRatioSchDen;
                                        doubleRatioSchNumTemp = doubleRatioSchNum;
                                        mStrFreeMaterialNoTemp = mStrFreeMaterialNo;

                                        schemeBean.setmRatioSchemeAval(true);
                                        schemeBean.setmDobRatioSchDenTemp(mDobRatioSchDen);
                                        schemeBean.setDoubleRatioSchNumTemp(doubleRatioSchNum);
                                        schemeBean.setmStrFreeMaterialNoTemp(mStrFreeMaterialNo);
                                    }
                                }
                            }
                        }
                    } else {
                        // Price cal changed based on type set date 14062018

                        //Ratio scheme validation
                        if (!mStrFreeMaterialNo.equalsIgnoreCase("") && mDobRatioSchDen > 0 && doubleRatioSchNum > 0) {
                            if (!mRatioSchemeAvalTemp) {
                                schemeBean.setRatioSchemeIndexVal(incVal + "");
                                schemeBean.setmRatioSchemeAvalTemp(true);
                                mRatioSchemeAvalTemp = true;
                                mDobRatioSchDenTemp = mDobRatioSchDen;
                                doubleRatioSchNumTemp = doubleRatioSchNum;
                                mStrFreeMaterialNoTemp = mStrFreeMaterialNo;

                                schemeBean.setmDobRatioSchDenTemp(mDobRatioSchDen);
                                schemeBean.setDoubleRatioSchNumTemp(doubleRatioSchNum);
                                schemeBean.setmStrFreeMaterialNoTemp(mStrFreeMaterialNo);
                            }
                        }

                        mDouTempQty = mDobTempOrderQty;

                        mDoubleTempQty = mDoubleTempQty + mDobTempOrderQty;
                        Log.d("SOCreate", "NetAmount: " + (mDobTempOrderQty * doubleIntermMatUnitPrice));
                        mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * doubleIntermMatUnitPrice);
                        Log.d("SOCreate", "NetAmount: " + mDouCalucaltedNetAmount + " qty " + mDobTempOrderQty + " unit price " + doubleIntermMatUnitPrice);
                        mDouCalPriDis = mDouCalPriDis + mDouPrimaryPer;
                        String mStrTaxAmt = "0";
                        materialBatchBean.setMaterialNo(mStrMatNo);
                        materialBatchBean.setBatchNo(""); // Batch number passing empty  // mStrBatchNo
                        materialBatchBean.setQty(mDouTempQty + "");
                        materialBatchBean.setActualEnteredQty(mDobActualTempOrderQty + ""); // added in 14062018
                        materialBatchBean.setPrimaryPer(mDouPrimaryPer + "");
                        materialBatchBean.setLandingPrice(doubleMatUnitPrice + "");
                        materialBatchBean.setIntermUnitPrice(doubleIntermMatUnitPrice + "");
                        materialBatchBean.setMRP(doubleMatMRP + "");
//                            Double mDouCalNetAmt = mDobTempOrderQty * doubleIntermMatUnitPrice;
                        Double mDouCalNetAmt = 0.0;
                        try {
                            mDouCalNetAmt = ConstantsUtils.decimalRoundOff(new BigDecimal(mDobTempOrderQty * doubleIntermMatUnitPrice), 2).doubleValue();
                        } catch (Exception e) {
                            mDouCalNetAmt = 0.0;
                            e.printStackTrace();
                        }
                        Double mDouPrimDisAmt = 0.0;
                        try {
                            mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", mDouCalNetAmt + ""));
                        } catch (NumberFormatException e) {
                            mDouPrimDisAmt = 0.0;
                        }
                        materialBatchBean.setNetAmount(mDouCalNetAmt + "");
                        Double mDouCalNetTaxDisAmt = mDouCalNetAmt - mDouPrimDisAmt;

                        materialBatchBean.setoDataEntity(entity);
                        materialBatchBean.setPrimaryPerAmt(mDouPrimDisAmt + "");
                        materialBatchBean.setNetAmtAftPriDis(mDouCalNetTaxDisAmt + "");
                        materialBatchBean.setTaxAmount(mStrTaxAmt);
                        materialBatchBean.setMFD(mStrMFD);

                        materialBatchBean.setTransRefTypeID("");  // mStrTransRefTypeId
                        materialBatchBean.setTransRefNo("");//mStrTransRefNo
                        materialBatchBean.setTransRefItemNo("");//mStrTransRefItemNo
                        alMatBatch.add(materialBatchBean);

                        break;
                    }


                }

                // Price cal changed based on type set date 14062018 (if typeset value empty it goes to old calculation(means batch wise net amount calculation)
                // other wise it goes to latest MFD batch material price and then calculate net price  note : below case else case is not required)
                if (mPriceBatchCalType.equalsIgnoreCase("")) {
                    try {
                        if (mDobTempOrderQty < mDobOrderQty) {
                            double mdouRemaingQty = mDobOrderQty - mDoubleTempQty;
                            double mdouActualRemaingQty = mDobActualOrderQty - mDobActualTempOrderQty;
                            if (mdouRemaingQty > 0) {
                                materialBatchBean = new MaterialBatchBean();
                                mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * doubleIntermMatUnitPrice);
                                if (alMatBatch != null && alMatBatch.size() > 0) {
                                    MaterialBatchBean lastBatchItem = alMatBatch.get(alMatBatch.size() - 1);

                                    mDouCalPriDis = mDouCalPriDis + Double.parseDouble(lastBatchItem.getPrimaryPer());

                                    Double mDouLastBatchQty = Double.parseDouble(lastBatchItem.getQty());
                                    Double mDouLastBatchOrderQty = Double.parseDouble(lastBatchItem.getActualEnteredQty());
                                    ODataEntity oDataEntity = lastBatchItem.getoDataEntity();

                                    Double mDoubSumOfQtyVal = mDouLastBatchQty + mDobTempOrderQty;
                                    Double mDoubSumOfActalQtyVal = mDouLastBatchOrderQty + mdouActualRemaingQty;
                                    String mStrTaxAmtFromOData = "0";
                                    materialBatchBean.setMaterialNo(mStrMatNo);
                                    materialBatchBean.setBatchNo(lastBatchItem.getBatchNo());

                                    materialBatchBean.setPrimaryPer(lastBatchItem.getPrimaryPer());

                                    materialBatchBean.setLandingPrice(doubleMatUnitPrice + "");
                                    materialBatchBean.setIntermUnitPrice(doubleIntermMatUnitPrice + "");

                                    materialBatchBean.setMRP(doubleMatMRP + "");
                                    materialBatchBean.setMFD(lastBatchItem.getMFD());
                                    materialBatchBean.setoDataEntity(oDataEntity);
                                    materialBatchBean.setQty(mDoubSumOfQtyVal + "");
                                    materialBatchBean.setActualEnteredQty(mDoubSumOfActalQtyVal + "");

//                                Double mDouCalNetAmt = mDoubSumOfQtyVal * doubleIntermMatUnitPrice;
                                    Double mDouCalNetAmt = 0.0;
                                    try {
                                        mDouCalNetAmt = ConstantsUtils.decimalRoundOff(new BigDecimal(mDoubSumOfQtyVal * doubleIntermMatUnitPrice), 2).doubleValue();
                                    } catch (Exception e) {
                                        mDouCalNetAmt = 0.0;
                                        e.printStackTrace();
                                    }
                                    Double mDouPrimDisAmt = 0.0;
                                    try {
                                        mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(lastBatchItem.getPrimaryPer(), mDouCalNetAmt + ""));
                                    } catch (NumberFormatException e) {
                                        e.printStackTrace();
                                    }

                                    Double mDouCalNetTaxDisAmt = mDouCalNetAmt - mDouPrimDisAmt;

                                    materialBatchBean.setPrimaryPerAmt(mDouPrimDisAmt + "");
                                    materialBatchBean.setNetAmtAftPriDis(mDouCalNetTaxDisAmt + "");
                                    materialBatchBean.setTaxAmount(mStrTaxAmtFromOData);
                                    materialBatchBean.setNetAmount(mDouCalNetAmt + "");

                                    materialBatchBean.setTransRefTypeID(lastBatchItem.getTransRefTypeID());
                                    materialBatchBean.setTransRefNo(lastBatchItem.getTransRefNo());
                                    materialBatchBean.setTransRefItemNo(lastBatchItem.getTransRefItemNo());

                                    alMatBatch.set(alMatBatch.size() - 1, materialBatchBean);

                                }
                            }
                        } else {

                            if (!mBoolBatchQtyNotEmpty) {
                                mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * Double.parseDouble(mStrFirstBatchUnitPrice));

                                mDouCalPriDis = mDouCalPriDis + Double.parseDouble(mStrFirstBatchPrimaryPer);
                                String mStrTaxAmt = "0";
                                materialBatchBean = new MaterialBatchBean();
                                materialBatchBean.setMaterialNo(mStrMatNo);
                                materialBatchBean.setBatchNo(mStrFirstBatchNo);
                                materialBatchBean.setQty(mDobOrderQty + "");
                                materialBatchBean.setActualEnteredQty(mDobActualOrderQty + "");
                                materialBatchBean.setPrimaryPer(mStrFirstBatchPrimaryPer + "");

                                materialBatchBean.setLandingPrice(mStrFirstBatchUnitPrice + "");
                                materialBatchBean.setIntermUnitPrice(mStrFirstBatchIntermUnitPrice + "");

                                materialBatchBean.setMRP(mStrFirstBatchMRP + "");
//                            Double mDouCalNetAmt = mDobOrderQty * Double.parseDouble(mStrFirstBatchUnitPrice);
                                Double mDouCalNetAmt = 0.0;
                                try {
                                    mDouCalNetAmt = ConstantsUtils.decimalRoundOff(new BigDecimal(mDobOrderQty * Double.parseDouble(mStrFirstBatchUnitPrice)), 2).doubleValue();
                                } catch (NumberFormatException e) {
                                    mDouCalNetAmt = 0.0;
                                    e.printStackTrace();
                                }
                                Double mDouPrimDisAmt = 0.0;
                                try {
                                    mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mStrFirstBatchPrimaryPer + "", mDouCalNetAmt + ""));
                                } catch (NumberFormatException e) {
                                    e.printStackTrace();
                                }
                                materialBatchBean.setNetAmount(mDouCalNetAmt + "");
                                Double mDouCalNetTaxDisAmt = mDouCalNetAmt - mDouPrimDisAmt;

                                materialBatchBean.setPrimaryPerAmt(mDouPrimDisAmt + "");

                                materialBatchBean.setoDataEntity(mOdataFirstEntity);
                                materialBatchBean.setNetAmtAftPriDis(mDouCalNetTaxDisAmt + "");
                                materialBatchBean.setTaxAmount(mStrTaxAmt);
                                materialBatchBean.setMFD(mStrFirstMFD);

                                materialBatchBean.setTransRefTypeID(mStrFirstTransRefTypeId);
                                materialBatchBean.setTransRefNo(mStrFirstTransRefNo);
                                materialBatchBean.setTransRefItemNo(mStrFirstTransRefItemNo);

                                alMatBatch.add(materialBatchBean);
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

            }


        }

        // Ratio scheme caluculation
        if (mRatioSchemeAval && !mBoolBatchQtyNotEmpty && calculateRatioScheme) {
            if (mDobOrderQty >= doubleRatioSchNumTemp) {
                try {
                    matDesc = OfflineManager.getValueByColumnName(Constants.CPStockItems + "?$top=1 &$select=" + Constants.MaterialDesc + " &$filter = "
                            + Constants.MaterialNo + " eq '" + mStrFreeMaterialNoTemp + "'", Constants.MaterialDesc);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }

                schemeBean.setFreeMaterialNo(matDesc.equalsIgnoreCase("") ? mStrFreeMaterialNoTemp : matDesc);

                int mFreeQty = 0;
                try {
                    mFreeQty = (int) ((mDobOrderQty / doubleRatioSchNumTemp) * mDobRatioSchDenTemp);
                } catch (Exception e) {
                    mFreeQty = 0;
                }
                schemeBean.setFreeQty(mFreeQty + "");
                // trade calculation
                if (schemeBean.getISFreeTypeID().equalsIgnoreCase(Constants.str_2)) {
                    int indexVal = Integer.parseInt(schemeBean.getRatioSchemeIndexVal());
                    try {
                        MaterialBatchBean materialBatchBeanTemp = alMatBatch.get(indexVal);

                        Double mUnitPrice = getRatioSchUnitPtice(Constants.CPStockItemSnos + "?$select=" + Constants.Quantity + "," + Constants.IntermUnitPrice + " &$filter=" + Constants.MaterialNo + " eq '" + mStrFreeMaterialNoTemp + "' and " + Constants.StockTypeID + " ne '" + Constants.str_2 + "'  &$orderby=" + Constants.ManufacturingDate + "%20asc ");

                        if (mUnitPrice > 0) {
                            Double mCalDisAmtFreeMat = mUnitPrice * mFreeQty;
                            Double mPriDisAmt = 0.0;
                            try {
                                mPriDisAmt = Double.parseDouble(materialBatchBeanTemp.getPrimaryPerAmt());
                            } catch (NumberFormatException e) {
                                mPriDisAmt = 0.0;
                            }
                            materialBatchBeanTemp.setNetAmtAftPriDis((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat - mPriDisAmt) + "");
                            materialBatchBeanTemp.setNetAmount((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat) + "");
                            alMatBatch.set(indexVal, materialBatchBeanTemp);

                            String mStrTaxAmt = Constants.getTaxAmount(mCalDisAmtFreeMat + "", "0", materialBatchBeanTemp.getoDataEntity(), mFreeQty + "");

                            try {
                                schemeBean.setRatioSchMatPrice((mCalDisAmtFreeMat + Double.parseDouble(mStrTaxAmt)) + "");
                                schemeBean.setRatioSchDisAmt(mCalDisAmtFreeMat + "");
                            } catch (NumberFormatException e) {
                                schemeBean.setRatioSchMatPrice("0");
                                schemeBean.setRatioSchDisAmt("0");
                            }
                        } else {
                            schemeBean.setISFreeTypeID("");
                            schemeBean.setRatioSchMatPrice("0");
                            schemeBean.setRatioSchDisAmt("0");
                        }


                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }
                } else {
                    schemeBean.setRatioSchMatPrice(Constants.str_0);
                    schemeBean.setRatioSchMatPrice("0");
                    schemeBean.setRatioSchDisAmt("0");
                }

            } else {
                schemeBean.setFreeQty("");
                schemeBean.setFreeMaterialNo("");
            }

        } else if (mRatioSchemeAvalTemp && calculateRatioScheme) {
            if (mDobOrderQty >= doubleRatioSchNumTemp) {
                try {
                    matDesc = OfflineManager.getValueByColumnName(Constants.CPStockItems + "?$top=1 &$select=" + Constants.MaterialDesc + " &$filter = "
                            + Constants.MaterialNo + " eq '" + mStrFreeMaterialNoTemp + "'", Constants.MaterialDesc);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
                schemeBean.setFreeMaterialNo(matDesc.equalsIgnoreCase("") ? mStrFreeMaterialNoTemp : matDesc);

                int mFreeQty = 0;
                try {
                    mFreeQty = (int) ((mDobOrderQty / doubleRatioSchNumTemp) * mDobRatioSchDenTemp);
                } catch (Exception e) {
                    mFreeQty = 0;
                }
                schemeBean.setFreeQty(mFreeQty + "");

                if (schemeBean.getISFreeTypeID().equalsIgnoreCase(Constants.str_2)) {
                    int indexVal = Integer.parseInt(schemeBean.getRatioSchemeIndexVal());
                    try {
                        MaterialBatchBean materialBatchBeanTemp = alMatBatch.get(indexVal);

                        Double mUnitPrice = getRatioSchUnitPtice(Constants.CPStockItemSnos + "?$select=" + Constants.Quantity + "," + Constants.IntermUnitPrice + " &$filter=" + Constants.MaterialNo + " eq '" + mStrFreeMaterialNoTemp + "' and " + Constants.StockTypeID + " ne '" + Constants.str_2 + "'  &$orderby=" + Constants.ManufacturingDate + "%20asc ");

                        if (mUnitPrice > 0) {
                            Double mCalDisAmtFreeMat = mUnitPrice * mFreeQty;
                            Double mPriDisAmt = 0.0;
                            try {
                                mPriDisAmt = Double.parseDouble(materialBatchBeanTemp.getPrimaryPerAmt());
                            } catch (NumberFormatException e) {
                                mPriDisAmt = 0.0;
                            }

                            materialBatchBeanTemp.setNetAmtAftPriDis((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat - mPriDisAmt) + "");
                            materialBatchBeanTemp.setNetAmount((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat) + "");
                            alMatBatch.set(indexVal, materialBatchBeanTemp);

                            String mStrTaxAmt = Constants.getTaxAmount(mCalDisAmtFreeMat + "", "0", materialBatchBeanTemp.getoDataEntity(), mFreeQty + "");

                            try {
                                schemeBean.setRatioSchMatPrice((mCalDisAmtFreeMat + Double.parseDouble(mStrTaxAmt)) + "");
                                schemeBean.setRatioSchDisAmt(mCalDisAmtFreeMat + "");
                            } catch (NumberFormatException e) {
                                schemeBean.setRatioSchMatPrice("0");
                                schemeBean.setRatioSchDisAmt("0");
                            }
                        } else {
                            schemeBean.setISFreeTypeID("");
                            schemeBean.setRatioSchMatPrice("0");
                            schemeBean.setRatioSchDisAmt("0");
                        }


                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }
                } else {
                    schemeBean.setRatioSchMatPrice(Constants.str_0);
                    schemeBean.setRatioSchDisAmt("0");
                }


            } else {
                schemeBean.setFreeQty("");
                schemeBean.setFreeMaterialNo("");
            }
        } else {
            schemeBean.setFreeQty("");
            schemeBean.setFreeMaterialNo("");

            schemeBean.setRatioSchMatPrice("0");
            schemeBean.setRatioSchDisAmt("0");
        }


        schemeBean.setMaterialBatchBeanArrayList(alMatBatch);
        schemeBean.setNetAmount(mDouCalucaltedNetAmount.toString());
        schemeBean.setPrimaryPer(mDouCalPriDis.toString());
        schemeBean.setUOM(mStrUOm);
        schemeBean.setAlterNativeUOM(alternativeUOM);
        return schemeBean;
    }

    public static SchemeBean applyRatioScheme(SchemeBean schemeBean, String mStrOrderQty, ArrayList<MaterialBatchBean> alMatBatch, String secAmt, MaterialBatchBean matBatchItemBean) {
        // Ratio scheme caluculation

        try {
            schemeBean.setMatNetAmtAftPriDis((Double.parseDouble(matBatchItemBean.getNetAmtAftPriDis()) - Double.parseDouble(secAmt)) + "");
            if (!schemeBean.isRatioSchemeApplied()) {
                Double mDobOrderQty = Double.parseDouble(mStrOrderQty);
                Double mDobTempOrderQty = Double.parseDouble(mStrOrderQty);
                String matDesc = "";
                if (schemeBean.ismRatioSchemeAval() && !schemeBean.ismBoolBatchQtyNotEmpty()) {
                    if (mDobOrderQty >= schemeBean.getDoubleRatioSchNumTemp()) {
                        try {
                            matDesc = OfflineManager.getValueByColumnName(Constants.CPStockItems + "?$top=1 &$select=" + Constants.MaterialDesc + " &$filter = "
                                    + Constants.MaterialNo + " eq '" + schemeBean.getmStrFreeMaterialNoTemp() + "'", Constants.MaterialDesc);
                        } catch (OfflineODataStoreException e) {
                            e.printStackTrace();
                        }

                        schemeBean.setFreeMaterialNo(matDesc.equalsIgnoreCase("") ? schemeBean.getmStrFreeMaterialNoTemp() : matDesc);

                        int mFreeQty = 0;
                        try {
                            mFreeQty = (int) ((mDobOrderQty / schemeBean.getDoubleRatioSchNumTemp()) * schemeBean.getmDobRatioSchDenTemp());
                        } catch (Exception e) {
                            mFreeQty = 0;
                        }
                        schemeBean.setFreeQty(mFreeQty + "");
                        // trade calculation
                        if (schemeBean.getISFreeTypeID().equalsIgnoreCase(Constants.str_2)) {
                            int indexVal = Integer.parseInt(schemeBean.getRatioSchemeIndexVal());
                            MaterialBatchBean materialBatchBeanTemp = alMatBatch.get(indexVal);
                            try {
                                Double mUnitPrice = getRatioSchUnitPtice(Constants.CPStockItemSnos + "?$select=" + Constants.Quantity + "," + Constants.IntermUnitPrice + " &$filter=" + Constants.MaterialNo + " eq '" + schemeBean.getmStrFreeMaterialNoTemp() + "' and " + Constants.StockTypeID + " ne '" + Constants.str_2 + "'  &$orderby=" + Constants.ManufacturingDate + "%20asc ");

                                if (mUnitPrice > 0) {
                                    Double mCalDisAmtFreeMat = mUnitPrice * mFreeQty;
                                    Double mPriDisAmt = 0.0;
                                    try {
                                        mPriDisAmt = Double.parseDouble(materialBatchBeanTemp.getPrimaryPerAmt());
                                    } catch (NumberFormatException e) {
                                        mPriDisAmt = 0.0;
                                    }
                                    schemeBean.setRatioSchemeApplied(true);
                                    schemeBean.setMatNetAmtAftPriDis((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat - mPriDisAmt - Double.parseDouble(secAmt)) + "");
                                    schemeBean.setMatNetAmount((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat) + "");
//                            alMatBatch.set(indexVal,materialBatchBeanTemp);

                                    String mStrTaxAmt = Constants.getTaxAmount(mCalDisAmtFreeMat + "", "0", materialBatchBeanTemp.getoDataEntity(), mFreeQty + "");

                                    try {
                                        schemeBean.setRatioSchMatPrice((mCalDisAmtFreeMat + Double.parseDouble(mStrTaxAmt)) + "");
                                        schemeBean.setRatioSchDisAmt(mCalDisAmtFreeMat + "");
                                    } catch (NumberFormatException e) {
                                        schemeBean.setRatioSchMatPrice("0");
                                        schemeBean.setRatioSchDisAmt("0");
                                    }
                                } else {
                                    if (!schemeBean.isRatioSchemeApplied()) {
                                        schemeBean.setISFreeTypeID("");
                                        schemeBean.setRatioSchMatPrice("0");
                                        schemeBean.setRatioSchDisAmt("0");
                                    }
                                }


                            } catch (NumberFormatException e) {
                                e.printStackTrace();
                            }
                        } else {
                            if (!schemeBean.isRatioSchemeApplied()) {
                                schemeBean.setRatioSchMatPrice(Constants.str_0);
                                schemeBean.setRatioSchMatPrice("0");
                                schemeBean.setRatioSchDisAmt("0");
                            }
                        }

                    } else {
                        schemeBean.setFreeQty("");
                        schemeBean.setFreeMaterialNo("");
                    }

                } else if (schemeBean.ismRatioSchemeAvalTemp()) {
                    if (mDobOrderQty >= schemeBean.getDoubleRatioSchNumTemp()) {
                        try {
                            matDesc = OfflineManager.getValueByColumnName(Constants.CPStockItems + "?$top=1 &$select=" + Constants.MaterialDesc + " &$filter = "
                                    + Constants.MaterialNo + " eq '" + schemeBean.getmStrFreeMaterialNoTemp() + "'", Constants.MaterialDesc);
                        } catch (OfflineODataStoreException e) {
                            e.printStackTrace();
                        }
                        schemeBean.setFreeMaterialNo(matDesc.equalsIgnoreCase("") ? schemeBean.getmStrFreeMaterialNoTemp() : matDesc);

                        int mFreeQty = 0;
                        try {
                            mFreeQty = (int) ((mDobOrderQty / schemeBean.getDoubleRatioSchNumTemp()) * schemeBean.getmDobRatioSchDenTemp());
                        } catch (Exception e) {
                            mFreeQty = 0;
                        }
                        schemeBean.setFreeQty(mFreeQty + "");

                        if (schemeBean.getISFreeTypeID().equalsIgnoreCase(Constants.str_2)) {
                            int indexVal = Integer.parseInt(schemeBean.getRatioSchemeIndexVal());
                            try {
                                MaterialBatchBean materialBatchBeanTemp = alMatBatch.get(indexVal);

                                Double mUnitPrice = getRatioSchUnitPtice(Constants.CPStockItemSnos + "?$select=" + Constants.Quantity + "," + Constants.IntermUnitPrice + " &$filter=" + Constants.MaterialNo + " eq '" + schemeBean.getmStrFreeMaterialNoTemp() + "' and " + Constants.StockTypeID + " ne '" + Constants.str_2 + "'  &$orderby=" + Constants.ManufacturingDate + "%20asc ");

                                if (mUnitPrice > 0) {
                                    Double mCalDisAmtFreeMat = mUnitPrice * mFreeQty;
                                    Double mPriDisAmt = 0.0;
                                    try {
                                        mPriDisAmt = Double.parseDouble(materialBatchBeanTemp.getPrimaryPerAmt());
                                    } catch (NumberFormatException e) {
                                        mPriDisAmt = 0.0;
                                    }
                                    schemeBean.setRatioSchemeApplied(true);
                                    schemeBean.setMatNetAmtAftPriDis((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat - mPriDisAmt - Double.parseDouble(secAmt)) + "");
                                    schemeBean.setMatNetAmount((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat) + "");
//                            alMatBatch.set(indexVal,materialBatchBeanTemp);

                                    String mStrTaxAmt = Constants.getTaxAmount(mCalDisAmtFreeMat + "", "0", materialBatchBeanTemp.getoDataEntity(), mFreeQty + "");

                                    try {
                                        schemeBean.setRatioSchMatPrice((mCalDisAmtFreeMat + Double.parseDouble(mStrTaxAmt)) + "");
                                        schemeBean.setRatioSchDisAmt(mCalDisAmtFreeMat + "");
                                    } catch (NumberFormatException e) {
                                        schemeBean.setRatioSchMatPrice("0");
                                        schemeBean.setRatioSchDisAmt("0");
                                    }
                                } else {
                                    if (!schemeBean.isRatioSchemeApplied()) {
                                        schemeBean.setISFreeTypeID("");
                                        schemeBean.setRatioSchMatPrice("0");
                                        schemeBean.setRatioSchDisAmt("0");
                                    }
                                }


                            } catch (NumberFormatException e) {
                                e.printStackTrace();
                            }
                        } else {
                            if (!schemeBean.isRatioSchemeApplied()) {
                                schemeBean.setRatioSchMatPrice(Constants.str_0);
                                schemeBean.setRatioSchDisAmt("0");
                            }
                        }


                    } else {
                        schemeBean.setFreeQty("");
                        schemeBean.setFreeMaterialNo("");
                    }
                } else {
                    if (!schemeBean.isRatioSchemeApplied()) {
                        schemeBean.setFreeQty("");
                        schemeBean.setFreeMaterialNo("");
                        schemeBean.setRatioSchMatPrice("0");
                        schemeBean.setRatioSchDisAmt("0");
                    }
                }
            } else {
                if (!schemeBean.isRatioSchemeApplied()) {
                    schemeBean.setFreeQty("");
                    schemeBean.setFreeMaterialNo("");
                    schemeBean.setRatioSchMatPrice("0");
                    schemeBean.setRatioSchDisAmt("0");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return schemeBean;
    }

    public static Double getRatioSchUnitPtice(String unitPriQry) throws OfflineODataStoreException {
        double doubleUnitPrice = 0.0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, unitPriQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.Quantity);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();

                        try {
                            if (mStrQty.doubleValue() > 0) {
                                property = properties.get(Constants.IntermUnitPrice);
                                if (property != null) {
                                    BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();
                                    if (mDecimialMatUnitPrice != null) {
                                        doubleUnitPrice = mDecimialMatUnitPrice.doubleValue();
                                    } else {
                                        doubleUnitPrice = 0.0;
                                    }
                                    if (doubleUnitPrice > 0) {
                                        return doubleUnitPrice;
                                    }

                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                }
            }

        }
        return doubleUnitPrice;
    }

    public static String[][] getDMSDivisionByCPGUID(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if (entities.size() > 0) {
                        distVal = new String[2][entities.size()];
                        int incVal = 0;
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            property = properties.get(Constants.DMSDivision);
                            distVal[0][incVal] = (String) property.getValue();

                            property = properties.get(Constants.DMSDivisionDesc);
                            distVal[1][incVal] = (String) property.getValue();

                            incVal++;
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

    public static ArrayList<InvoiceListBean> getInvoiceHistoryList(String schemeQry, Context context, String status, String mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<InvoiceListBean> alInvoiceHis = new ArrayList<>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(context);
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceListBean invoiceHisBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                if (!status.equalsIgnoreCase("5")) {
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(ODataRequestParamSingle.Mode.Read);
                    request.setResourcePath(schemeQry);
                    //Send a request to read the Invoices from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);
                    //Check if the response is an error
                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        //Retrieve the data from the response
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            invoiceHisBean = new InvoiceListBean();

                            property = properties.get(Constants.InvoiceHisNo);
                            invoiceHisBean.setInvoiceNo((String) property.getValue());
                            property = properties.get(Constants.PONo);
                            invoiceHisBean.setPONo((String) property.getValue());
                            property = properties.get(Constants.InvoiceDate);
                            String convertDateFormat = UtilConstants.convertDateIntoDeviceFormat(context, (GregorianCalendar) property.getValue(), configDateFormat);
                            invoiceHisBean.setInvoiceDate(convertDateFormat);
                            property = properties.get(Constants.NetAmount);
                            BigDecimal netAmount = new BigDecimal("0.0"), collamt = new BigDecimal("0.0"), devcollamt = new BigDecimal("0.0");
                            if (property != null) {
                                netAmount = (BigDecimal) property.getValue();
                                invoiceHisBean.setInvoiceAmount(netAmount.toString());
                            }

                            property = properties.get(Constants.CollectionAmount);

                            if (property != null) {
                                collamt = (BigDecimal) property.getValue();
                                invoiceHisBean.setCollectionAmount(collamt.toString());
                            }


                            property = properties.get(Constants.Currency);
                            invoiceHisBean.setCurrency((String) property.getValue());

                            property = properties.get(Constants.InvoiceGUID);
                            String mStrInvoiceGUID32 = "";
                            try {
                                ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                                invoiceHisBean.setInvoiceGuid(mInvoiceGUID.guidAsString36());
                                mStrInvoiceGUID32 = mInvoiceGUID.guidAsString32().toUpperCase();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            invoiceHisBean.setDeviceNo("");
                            invoiceHisBean.setDeviceStatus("");

                            property = properties.get(Constants.SoldToID);
                            String soldTOID = (String) property.getValue();


                            try {
                                devcollamt = getDeviceCollAmt(context, soldTOID, mStrInvoiceGUID32);
                                invoiceHisBean.setDevCollAmount(devcollamt + "");
                            } catch (Exception e) {
                                invoiceHisBean.setDevCollAmount("0.0");
                            }


                            BigDecimal outAmt = netAmount.subtract(collamt.add(devcollamt));

                            if (status.equalsIgnoreCase("")) {
                                if (devcollamt.compareTo(new BigDecimal("0")) == 1) {//devcollamt > 0
                                    if (outAmt.compareTo(netAmount) != -1) {//outAmt >= netAmount
                                        invoiceHisBean.setInvoiceStatus("01");
                                    } else if (outAmt.compareTo(new BigDecimal("0")) != 1) {//outAmt <= 0
                                        invoiceHisBean.setInvoiceStatus("03");
                                    } else if (outAmt.compareTo(netAmount) == -1) {//outAmt < netAmount
                                        invoiceHisBean.setInvoiceStatus("02");
                                    }

                                } else {
                                    property = properties.get(Constants.PaymentStatusID);
                                    invoiceHisBean.setInvoiceStatus((String) property.getValue());

                                }

                            } else {
                                property = properties.get(Constants.PaymentStatusID);
                                invoiceHisBean.setInvoiceStatus((String) property.getValue());

                            }
                            property = properties.get(Constants.StatusID);
                            invoiceHisBean.setDueDateStatus((String) property.getValue());

                            alInvoiceHis.add(invoiceHisBean);
                        }

                    } else {
                        throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alInvoiceHis != null && alInvoiceHis.size() > 0) {
            Collections.sort(alInvoiceHis, new Comparator<InvoiceListBean>() {
                public int compare(InvoiceListBean one, InvoiceListBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
                    }
                }
            });

        }

        return alInvoiceHis;
    }

    public static BigDecimal getDeviceCollAmt(Context context, String cpNO, String refID) {

        BigDecimal mDoubleDevCollAmout = new BigDecimal("0.0");

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.FinancialPostings, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.FinancialPostings)
                                && fetchJsonHeaderObject.getString(Constants.CPNo).equalsIgnoreCase(cpNO)) {
                            String itemsString = fetchJsonHeaderObject.getString(Constants.ITEM_TXT);

                            arrtable = UtilConstants.convertToArrayListMap(itemsString);
                            for (int i = 0; i < arrtable.size(); i++) {
                                HashMap<String, String> singleRow = arrtable.get(i);
                                if (refID.equalsIgnoreCase(singleRow.get(Constants.ReferenceID))) {
                                    BigDecimal cashDiscound = new BigDecimal("0");
                                    if (singleRow.get(Constants.CashDiscount) != null && !TextUtils.isEmpty(singleRow.get(Constants.CashDiscount))) {
                                        cashDiscound = new BigDecimal(singleRow.get(Constants.CashDiscount));
                                    }

                                    mDoubleDevCollAmout = mDoubleDevCollAmout.add(new BigDecimal(singleRow.get(Constants.FIPAmount))).add(cashDiscound);
                                }

                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevCollAmout;
    }

    /*public static double getDeviceCollAmt(Context context, String cpNO, String refID) {

        double mDoubleDevCollAmout = 0.0;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.FinancialPostings, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.FinancialPostings)
                                && fetchJsonHeaderObject.getString(Constants.CPNo).equalsIgnoreCase(cpNO)) {
                            String itemsString = fetchJsonHeaderObject.getString(Constants.ITEM_TXT);

                            arrtable = UtilConstants.convertToArrayListMap(itemsString);
                            for (int i = 0; i < arrtable.size(); i++) {
                                HashMap<String, String> singleRow = arrtable.get(i);
                                if (refID.equalsIgnoreCase(singleRow.get(Constants.ReferenceID))) {
                                    mDoubleDevCollAmout = mDoubleDevCollAmout + Double.parseDouble(singleRow.get(Constants.FIPAmount));
                                }

                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevCollAmout;
    }*/
    public static List<ConfigTypesetTypesBean> getStatusFromValueHelp(String query, String defaultValue) throws OfflineODataStoreException {
        ArrayList<ConfigTypesetTypesBean> configTypesetTypesBeanArrayList = new ArrayList<>();
        ConfigTypesetTypesBean configTypesetTypesBean;
        if (!TextUtils.isEmpty(defaultValue)) {
            configTypesetTypesBean = new ConfigTypesetTypesBean();
            configTypesetTypesBean.setTypes("");
            configTypesetTypesBean.setTypesName(defaultValue);
            configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
        }

        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        configTypesetTypesBean = new ConfigTypesetTypesBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        configTypesetTypesBean.setTypes((String) property.getValue());
                        property = properties.get(Constants.Description);
                        configTypesetTypesBean.setTypesName((String) property.getValue());
                        property = properties.get(Constants.ParentID);
                        configTypesetTypesBean.setParentID((String) property.getValue());
                        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configTypesetTypesBeanArrayList;
    }

    public static InvoiceListBean getInvoiceDetails(String qry, Context context) throws Exception {

        InvoiceListBean invoiceListBean = null;
        ODataProperty property;
        ODataPropMap properties;
        Calendar todayCalenderDate = Calendar.getInstance();       // get calendar instance
        todayCalenderDate.set(Calendar.HOUR_OF_DAY, 0);            // set hour to midnight
        todayCalenderDate.set(Calendar.MINUTE, 0);                 // set minute in hour
        todayCalenderDate.set(Calendar.SECOND, 0);                 // set second in minute
        todayCalenderDate.set(Calendar.MILLISECOND, 0);
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(context);
        try {
            ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
            request.setMode(ODataRequestParamSingle.Mode.Read);
            request.setResourcePath(qry);
            //Send a request to read the Distributors from the local database
            ODataResponseSingle response = (ODataResponseSingle) offlineStore.executeRequest(request);
            ODataEntity entity = (ODataEntity) response.getPayload();
            ArrayList<ConfigTypeValues> configTypeValuesList = OfflineManager.checkMaterialCodeDisplay();
            invoiceListBean = new InvoiceListBean();
            properties = entity.getProperties();
            property = properties.get(Constants.SoldToName);
            invoiceListBean.setCustomerName((String) property.getValue());

            property = properties.get(Constants.SoldToID);
            if (property != null)
                invoiceListBean.setCustomerNo((String) property.getValue());

            property = properties.get(Constants.InvoiceNo);
            invoiceListBean.setInvoiceNo((String) property.getValue());

            property = properties.get(Constants.InvoiceTypeID);
            invoiceListBean.setInvoiceType((String) property.getValue());

            property = properties.get(Constants.InvoiceTypeDesc);
            invoiceListBean.setInvoiceTypDesc((String) property.getValue());

            property = properties.get(Constants.DmsDivision);
            invoiceListBean.setDmsDivision((String) property.getValue());

            property = properties.get(Constants.DmsDivisionDesc);
            invoiceListBean.setDmsDivisionDesc((String) property.getValue());

            property = properties.get(Constants.NetAmount);
            String invAmtStr = "0";
            if (property != null) {
                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                invAmtStr = mStrAmount.toString();
            }
            invoiceListBean.setNetAmount(invAmtStr);

            property = properties.get(Constants.InvoiceDate);
            String convertDateFormat2 = null, convertDateFormat = "";
            if (property != null) {
                convertDateFormat2 = UtilConstants.convertDateIntoDeviceFormat(context, (GregorianCalendar) property.getValue(), configDateFormat);

                convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
            }

            invoiceListBean.setInvoiceDate(convertDateFormat2);
            invoiceListBean.setDueDateStatus(Constants.getDueDateStatus(todayCalenderDate, convertDateFormat));
            property = properties.get(Constants.PaymentStatusID);
            if (property != null)
                invoiceListBean.setInvoiceStatus((String) property.getValue());


            property = properties.get(Constants.Currency);
            if (property != null)
                invoiceListBean.setCurrency((String) property.getValue());

            ODataNavigationProperty soItemDetailsProp = entity.getNavigationProperty(Constants.SSInvoiceItemDetails);
            ODataEntitySet feed = (ODataEntitySet) soItemDetailsProp.getNavigationContent();
            List<ODataEntity> entities = feed.getEntities();
            ArrayList<InvoiceItemBean> soItemBeanArrayList = new ArrayList<>();
            InvoiceItemBean invoiceItemBean;
            for (ODataEntity soItemEntity : entities) {
                invoiceItemBean = new InvoiceItemBean();
                properties = soItemEntity.getProperties();
                property = properties.get(Constants.MaterialDesc);
                invoiceItemBean.setMaterialDesc(property.getValue().toString());
                property = properties.get(Constants.UnitPrice);
                invoiceItemBean.setUnitPrice(property.getValue().toString());
                property = properties.get(Constants.NetAmount);
                invoiceItemBean.setNetAmount(property.getValue().toString());
                property = properties.get(Constants.Quantity);
                invoiceItemBean.setActualInvQty(property.getValue().toString());
                property = properties.get(Constants.MaterialNo);
                invoiceItemBean.setMaterialNo(property.getValue().toString());
                property = properties.get(Constants.HigherLevelItemNo);
                invoiceItemBean.setHigherLevelItemNo(property.getValue().toString());
                property = properties.get(Constants.ItemNo);
                invoiceItemBean.setItemNo(property.getValue().toString());
                property = properties.get(Constants.UOM);
                invoiceItemBean.setUOM(property.getValue().toString());
                property = properties.get(Constants.Currency);
                invoiceItemBean.setCurrency(property.getValue().toString());
                property = properties.get(Constants.ItemStatus);
                invoiceItemBean.setItemInvoiceStatus(property.getValue().toString());
                property = properties.get(Constants.RefDocItmGUID);
                String mStrInvoiceGUID32 = "";
                try {
                    ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                    String invoiceGuid = mInvoiceGUID.guidAsString36();
                    if (!invoiceGuid.equalsIgnoreCase("00000000-0000-0000-0000-000000000000")) {
                        String qrys = Constants.SSSoItemDetails + "?$filter=SSSOItemGUID eq guid'" + invoiceGuid + "'";
                        invoiceListBean.setPONo(getSONoValues(qrys));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (!configTypeValuesList.isEmpty()) {
                    invoiceItemBean.setInvoiceMaterialDescAndNo(context.getString(R.string.po_details_display_value, invoiceItemBean.getMaterialDesc(), invoiceItemBean.getMaterialNo()));
                } else {
                    invoiceItemBean.setInvoiceMaterialDescAndNo(invoiceItemBean.getMaterialDesc());
                }
                soItemBeanArrayList.add(invoiceItemBean);
            }
            Collections.sort(soItemBeanArrayList, new Comparator<InvoiceItemBean>() {
                @Override
                public int compare(InvoiceItemBean one, InvoiceItemBean two) {
                    return one.getItemNo().compareTo(two.getItemNo());
                }
            });
            invoiceListBean.setInvoiceItemBeanArrayList(soItemBeanArrayList);

            return invoiceListBean;


        } catch (Exception e) {
            e.printStackTrace();
            throw new com.arteriatech.mutils.common.OfflineODataStoreException(e.getMessage());
        }
    }

    public static String getSONoValues(String query) throws OfflineODataStoreException {
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.SSSOGuid);
                        if (property != null) {
                            ODataGuid mSOGUID = (ODataGuid) property.getValue();
                            String soGuid = mSOGUID.guidAsString36();
                            return getSONoHeader(Constants.SSSOs + "?$filter=SSSOGuid eq guid'" + soGuid + "'");
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return "";
    }

    public static String getSONoHeader(String query) throws OfflineODataStoreException {
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.OrderNo);
                        if (property != null)
                            return (String) property.getValue();
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return "";
    }

    public static ArrayList<ConfigTypeValues> checkMaterialCodeDisplay() {
        ArrayList<ConfigTypeValues> configTypesetTypesBeanArrayList = new ArrayList<>();
        String mStrConfigQry = Constants.ConfigTypsetTypeValues + "?$filter=" + Constants.Typeset + " eq '" + Constants.MSEC + "' and Types eq '" + Constants.DSPMATNO + "'";
        try {
            configTypesetTypesBeanArrayList.addAll(OfflineManager.getConfigTypeValues(mStrConfigQry));
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        return configTypesetTypesBeanArrayList;
    }

    public static ArrayList<ConfigTypeValues> getConfigTypeValues(String query) throws OfflineODataStoreException {
        ArrayList<ConfigTypeValues> configTypesetTypesBeanArrayList = new ArrayList<>();
        ConfigTypeValues configTypesetTypesBean;
        configTypesetTypesBean = new ConfigTypeValues();
    /*    configTypesetTypesBean.setType("");
        configTypesetTypesBean.setTypeName(Constants.All);
        configTypesetTypesBean.setTypeset("");
        configTypesetTypesBean.setTypeValue("");*/
        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        configTypesetTypesBean = new ConfigTypeValues();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        if (property != null)
                            configTypesetTypesBean.setType((String) property.getValue());

                        property = properties.get(Constants.TypesName);
                        if (property != null)
                            configTypesetTypesBean.setTypeName((String) property.getValue());

                        property = properties.get(Constants.TypesValue);
                        if (property != null)
                            configTypesetTypesBean.setTypeValue((String) property.getValue());

                        property = properties.get(Constants.Typeset);
                        if (property != null)
                            configTypesetTypesBean.setTypeset((String) property.getValue());

                        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configTypesetTypesBeanArrayList;
    }

    public static HashMap<String, String> getCPGrp3Desc(ArrayList<RetailerBean> alRetList, String spGuid,Context context) {
        HashMap<String, String> CPGrp3Desc = new HashMap<>();
        if (alRetList != null && alRetList.size() > 0) {
            String cpGuidQry = makeCPGuidQryFromBeanList(alRetList, Constants.CPGUID);
            if (!cpGuidQry.equalsIgnoreCase("")) {
                if (ConstantsUtils.getRollInformation(context).equalsIgnoreCase(ConstantsUtils.ROLLID_DSR_06)) {
                    CPGrp3Desc = OfflineManager.getCPGrp3DescListFromCPDMSDiv(Constants.CPDMSDivisions + "?$select=" + Constants.Group3Desc + "," + Constants.CPGUID + " &$filter=("
                            + cpGuidQry + " ) and " + Constants.PartnerMgrGUID + " eq guid'" + spGuid.toUpperCase() + "'");
                }else {
                    CPGrp3Desc = OfflineManager.getCPGrp3DescListFromCPDMSDiv(Constants.CPDMSDivisions + "?$select=" + Constants.Group3Desc + "," + Constants.CPGUID + " &$filter=("
                            + cpGuidQry + " )");
                }
            }
        }
        return CPGrp3Desc;
    }

    public static ArrayList<HashSet<String>> getCPVisitStatusByTodayBeatRetailers(ArrayList<RetailerBean> alRetList,String SPGUID) {
        HashSet<String> mapVisitStatusPartially = new HashSet<>();
        HashSet<String> mapVisitStatusDone = new HashSet<>();
        ArrayList<HashSet<String>> alVisitStatus = new ArrayList<>();
        if (alRetList != null && alRetList.size() > 0) {
            String cpGuidQry = makeCPGuid32QryFromBeanList(alRetList, Constants.CPGUID);
            if (!cpGuidQry.equalsIgnoreCase("")) {
                mapVisitStatusDone = OfflineManager.getVisitStatusByRetiler(Constants.Visits + "?$filter=StartDate eq datetime'" + UtilConstants.getNewDate() + "' and EndDate eq datetime'" + UtilConstants.getNewDate() + "' " + "and (" + cpGuidQry + ") and StatusID eq '01' and " + Constants.SPGUID + " eq guid'" + SPGUID + "'");
              //  mapVisitStatusPartially = OfflineManager.getVisitStatusByRetiler(Constants.Visits + "?$filter=StartDate eq datetime'" + UtilConstants.getNewDate() + "' and EndDate eq null "+"and (" + cpGuidQry + ") and "+Constants.SPGUID+"eq guid'"+SPGUID+"' and StatusID eq '01'");
                mapVisitStatusPartially = OfflineManager.getVisitStatusByRetiler(Constants.Visits + "?$filter=StartDate eq datetime'" + UtilConstants.getNewDate() + "' and EndDate eq null " + "and (" + cpGuidQry + ") and StatusID eq '01' and " + Constants.SPGUID + " eq guid'" + SPGUID + "'");
            }
        }
        alVisitStatus.add(mapVisitStatusDone);
        alVisitStatus.add(mapVisitStatusPartially);
        return alVisitStatus;
    }

    public static ArrayList<HashSet<String>> getCPVisitStatusByTodayBeatRetailers(String qry,String SPGUID) {
        HashSet<String> mapVisitStatusPartially = new HashSet<>();
        HashSet<String> mapVisitStatusDone = new HashSet<>();
        ArrayList<HashSet<String>> alVisitStatus = new ArrayList<>();
//        if (alRetList != null && alRetList.size() > 0) {
//            String cpGuidQry = makeCPGuid32QryFromBeanList(alRetList, Constants.CPGUID);
            if (!qry.equalsIgnoreCase("")) {
                mapVisitStatusDone = OfflineManager.getVisitStatusByRetiler(Constants.Visits + "?$filter=StartDate eq datetime'" + UtilConstants.getNewDate() + "' and EndDate eq datetime'" + UtilConstants.getNewDate() + "' " + "and (" + qry + ") and StatusID eq '01' and " + Constants.SPGUID + " eq guid'" + SPGUID + "'");
                //  mapVisitStatusPartially = OfflineManager.getVisitStatusByRetiler(Constants.Visits + "?$filter=StartDate eq datetime'" + UtilConstants.getNewDate() + "' and EndDate eq null "+"and (" + cpGuidQry + ") and "+Constants.SPGUID+"eq guid'"+SPGUID+"' and StatusID eq '01'");
                mapVisitStatusPartially = OfflineManager.getVisitStatusByRetiler(Constants.Visits + "?$filter=StartDate eq datetime'" + UtilConstants.getNewDate() + "' and EndDate eq null " + "and (" + qry + ") and StatusID eq '01' and " + Constants.SPGUID + " eq guid'" + SPGUID + "'");
            }
//        }
        alVisitStatus.add(mapVisitStatusDone);
        alVisitStatus.add(mapVisitStatusPartially);
        return alVisitStatus;
    }

    public static String makeCPGuid32QryFromBeanList(ArrayList<RetailerBean> alRetailers, String columnName) {
        String mCPQry = "";
        for (RetailerBean retBean : alRetailers) {
            if (mCPQry.length() == 0)
                mCPQry += " " + columnName + " eq '" + retBean.getCpGuidStringFormat().toUpperCase() + "'";
            else
                mCPQry += " or " + columnName + " eq '" + retBean.getCpGuidStringFormat().toUpperCase() + "'";

        }
        return mCPQry;
    }

    public static String makeCPGuidQryFromBeanList(ArrayList<RetailerBean> alRetailers, String columnName) {
        String mCPQry = "";
        for (RetailerBean retBean : alRetailers) {
            if (mCPQry.length() == 0)
                mCPQry += " " + columnName + " eq guid'" + retBean.getCPGUID().toUpperCase() + "'";
            else
                mCPQry += " or " + columnName + " eq guid'" + retBean.getCPGUID().toUpperCase() + "'";

        }
        return mCPQry;
    }

    public static HashMap<String, String> getCPGrp3DescListFromCPDMSDiv(String cpQry) {
        HashMap<String, String> mapCPList = new HashMap<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.Group3Desc);
                        String cpGrp3Desc = (String) property.getValue();
                        property = properties.get(Constants.CPGUID);
                        ODataGuid mGUIDVal = null;
                        try {
                            mGUIDVal = (ODataGuid) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (!mapCPList.containsKey(mGUIDVal.guidAsString36().toUpperCase())) {
                            mapCPList.put(mGUIDVal.guidAsString36().toUpperCase(), cpGrp3Desc);
                        }

                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }
        return mapCPList;
    }

    public static ArrayList<MyPerformanceBean> getRetTrendsList(String myPerfQry, String mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<MyPerformanceBean> myPerfList = new ArrayList<>();
        //Check if the offline oData store is initialized
        MyPerformanceBean myPerfBean;
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, myPerfQry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                myPerfBean = new MyPerformanceBean();

                property = properties.get(Constants.OrderMaterialGroupID);
                String orderMatGrpId = (String) property.getValue();
                myPerfBean.setMaterialNo(orderMatGrpId);
                property = properties.get(Constants.OrderMaterialGroupDesc);
                myPerfBean.setMaterialDesc((String) property.getValue());
                property = properties.get(Constants.ReportOnID);
                String mStrReportType = (String) property.getValue();
                myPerfBean.setReportOnID(mStrReportType);

                property = properties.get(Constants.Currency);
                myPerfBean.setCurrency((String) property.getValue());


                // ReportOnID equal to  '02' display amount values other wise quantity values
                if (mStrReportType.equalsIgnoreCase("02")) {

                    Map<String, MyTargetsBean> myTargetsBean = null;
                    try {
                        myTargetsBean = getTargetByRetailerByCalBase(mStrCPGUID, orderMatGrpId, mStrReportType);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
//
                    myPerfBean.setCMTarget(myTargetsBean.get(orderMatGrpId).getMonthTarget());

                    property = properties.get(Constants.AmtMTD);
                    BigDecimal mAmtMTD = null;
                    ;
                    if (property != null) {
                        mAmtMTD = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMTD(mAmtMTD.toString());
                    }

                    property = properties.get(Constants.AmtLastYearMTD);
                    BigDecimal mAmtLastYearMTD = null;
                    ;
                    if (property != null) {
                        mAmtLastYearMTD = (BigDecimal) property.getValue();
                        Double diffValue = 0.0;
                        try {
                            diffValue = mAmtMTD.doubleValue() - mAmtLastYearMTD.doubleValue();
                        } catch (Exception e) {
                            diffValue = 0.0;
                        }
                        myPerfBean.setAmtLMTD(mAmtLastYearMTD.toString());
                        myPerfBean.setGrPer(getAchivedPer(mAmtLastYearMTD.toString(), diffValue.toString()) + "");
                    }


                    double mdoubSumOf = 0.0;
                    property = properties.get(Constants.AmtMonth1PrevPerf);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        mdoubSumOf = mdoubSumOf + mStrQty.doubleValue();
                        myPerfBean.setAmtMonth1PrevPerf(mStrQty.toString());
                    }

                    property = properties.get(Constants.AmtMonth2PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        mdoubSumOf = mdoubSumOf + mStrAmount.doubleValue();
                        myPerfBean.setAmtMonth2PrevPerf(mStrAmount.toString());
                    }

                    property = properties.get(Constants.AmtMonth3PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        mdoubSumOf = mdoubSumOf + mStrAmount.doubleValue();
                        myPerfBean.setAmtMonth3PrevPerf(mStrAmount.toString());
                    }

                    Double avgLastThreeMont = 0.0;
                    try {
                        avgLastThreeMont = mdoubSumOf / 3;
                    } catch (Exception e) {
                        avgLastThreeMont = 0.0;
                    }

                    if (Double.isNaN(avgLastThreeMont) || Double.isInfinite(avgLastThreeMont)) {
                        avgLastThreeMont = 0.0;
                    }
                    myPerfBean.setAvgLstThreeMonth(avgLastThreeMont.toString());


                    Double mDouBTD = Double.parseDouble(myTargetsBean.get(orderMatGrpId).getMonthTarget()) - mAmtMTD.doubleValue();
                    if (Double.isNaN(mDouBTD) || Double.isInfinite(mDouBTD)) {
                        mDouBTD = 0.0;
                    }

                    myPerfBean.setBalToDo(mDouBTD.toString());
                    double mDouCalAchivedTar = 0.0;

                    try {
                        mDouCalAchivedTar = Double.parseDouble(myTargetsBean.get(orderMatGrpId).getMTDA()) + mAmtMTD.doubleValue();
                    } catch (NumberFormatException e) {
                        mDouCalAchivedTar = 0.0;
                    }

                    myPerfBean.setAchivedPer(getAchivedPer(myTargetsBean.get(orderMatGrpId).getMonthTarget(), mDouCalAchivedTar + "") + "");


                } else if (mStrReportType.equalsIgnoreCase("01")) {
                    Map<String, MyTargetsBean> myTargetsBean = getTargetByRetailerByCalBase(mStrCPGUID, orderMatGrpId, mStrReportType);

                    property = properties.get(Constants.QtyMTD);
                    BigDecimal mAmtMTD = null;
                    ;
                    if (property != null) {
                        mAmtMTD = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMTD(mAmtMTD.toString());
                    }

                    property = properties.get(Constants.QtyLastYearMTD);
                    BigDecimal mQtyLastYearMTD = null;
                    if (property != null) {
                        mQtyLastYearMTD = (BigDecimal) property.getValue();
                        Double diffValue = 0.0;
                        try {
                            diffValue = mAmtMTD.doubleValue() - mQtyLastYearMTD.doubleValue();
                        } catch (Exception e) {
                            diffValue = 0.0;
                        }
                        myPerfBean.setAmtLMTD(mQtyLastYearMTD.toString());
                        myPerfBean.setGrPer(getAchivedPer(mQtyLastYearMTD.toString(), diffValue.toString()) + "");
                    }

                    property = properties.get(Constants.AmtMonth1PrevPerf);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMonth1PrevPerf(mStrQty.toString());
                    }

                    property = properties.get(Constants.AmtMonth2PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMonth2PrevPerf(mStrAmount.toString());
                    }

                    property = properties.get(Constants.AmtMonth3PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMonth3PrevPerf(mStrAmount.toString());
                    }

                    double mdoubSumOf = 0.0;
                    property = properties.get(Constants.QtyMonth1PrevPerf);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        mdoubSumOf = mdoubSumOf + mStrQty.doubleValue();
                        myPerfBean.setQtyMonth1PrevPerf(mStrQty.toString());
                    }

                    property = properties.get(Constants.QtyMonth2PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        mdoubSumOf = mdoubSumOf + mStrAmount.doubleValue();
                        myPerfBean.setQtyMonth2PrevPerf(mStrAmount.toString());
                    }

                    property = properties.get(Constants.QtyMonth3PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        mdoubSumOf = mdoubSumOf + mStrAmount.doubleValue();
                        myPerfBean.setQtyMonth3PrevPerf(mStrAmount.toString());
                    }

                    Double avgLastThreeMont = 0.0;
                    try {
                        avgLastThreeMont = mdoubSumOf / 3;
                    } catch (Exception e) {
                        avgLastThreeMont = 0.0;
                    }

                    if (Double.isNaN(avgLastThreeMont) || Double.isInfinite(avgLastThreeMont)) {
                        avgLastThreeMont = 0.0;
                    }
                    myPerfBean.setAvgLstThreeMonth(avgLastThreeMont.toString());


                    Double mDouBTD = Double.parseDouble(myTargetsBean.get(orderMatGrpId).getMonthTarget()) - mAmtMTD.doubleValue();
                    if (Double.isNaN(mDouBTD) || Double.isInfinite(mDouBTD)) {
                        mDouBTD = 0.0;
                    }

                    myPerfBean.setBalToDo(mDouBTD.toString());

                    double mDouCalAchivedTar = 0.0;

                    try {
                        mDouCalAchivedTar = Double.parseDouble(myTargetsBean.get(orderMatGrpId).getMTDA()) + mAmtMTD.doubleValue();
                    } catch (NumberFormatException e) {
                        mDouCalAchivedTar = 0.0;
                    }

                    myPerfBean.setAchivedPer(getAchivedPer(myTargetsBean.get(orderMatGrpId).getMonthTarget(), mDouCalAchivedTar + "") + "");

                }
                myPerfList.add(myPerfBean);

            }
        }

        return myPerfList;
    }

    public static Map<String, MyTargetsBean> getTargetByRetailerByCalBase(String mCPGuid,
                                                                          String mStrOrderMatGrp, String mStrCalBase) {
        ArrayList<MyTargetsBean> arrayList = new ArrayList<>();
        List<ODataEntity> entities = null;

        String mStrTargetQry = "", mSelectQry = "";
        try {
            if (getVisitStatusForCustomer("" + Constants.TargetItems +
                    "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' ")) {

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                            + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc + "," + Constants.UOM;
                } else {
                    mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                            + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc;
                }

                mStrTargetQry = Constants.TargetItems +
                        "?$select=" + mSelectQry + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' and " + Constants.OrderMaterialGroupID + " eq '" + mStrOrderMatGrp + "' ";

            }
        } catch (Exception e) {
            e.printStackTrace();
        }


        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrTargetQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        ODataProperty property = null;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();

                MyTargetsBean myTargetBean = new MyTargetsBean();

                String monthTarget = "", actualTarget = "";
                Double mDobTargetQty = 0.0, mDobActQty = 0.0;

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    property = properties.get(Constants.TargetQty);
                } else {
                    property = properties.get(Constants.TargetValue);
                }
                try {
                    BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                    mDobTargetQty = monthTargetVal.doubleValue();
                } catch (Exception e) {
                    mDobTargetQty = 0.0;
                    e.printStackTrace();
                }

                if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                    mDobTargetQty = 0.0;
                }
//                monthTarget = mDobTargetQty + "";
                if (mStrCalBase.equalsIgnoreCase("01")) {
                    monthTarget = String.format("%.3f", mDobTargetQty);
                    property = properties.get(Constants.UOM);
                    try {
                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            monthTarget = trimQtyDecimalPlace(monthTarget);
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }
                } else
                    monthTarget = mDobTargetQty + "";

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    property = properties.get(Constants.ActualQty);
                } else {
                    property = properties.get(Constants.ActualValue);
                }

                try {
                    BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                    mDobActQty = monthTargetVal.doubleValue();
                } catch (Exception e) {
                    mDobActQty = 0.0;
                    e.printStackTrace();
                }

                if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                    mDobActQty = 0.0;
                }
//                actualTarget = mDobActQty + "";
                if (mStrCalBase.equalsIgnoreCase("01")) {
                    actualTarget = String.format("%.3f", mDobActQty);
                    property = properties.get(Constants.UOM);
                    try {
                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            actualTarget = trimQtyDecimalPlace(actualTarget);
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }
                } else
                    actualTarget = mDobActQty + "";


                if (monthTarget != null) {
                    myTargetBean.setMonthTarget(!monthTarget.toString().equalsIgnoreCase("") ? monthTarget.toString() : "0");
                } else {
                    myTargetBean.setMonthTarget("0");
                }

                if (actualTarget != null) {
                    myTargetBean.setMTDA(!actualTarget.toString().equalsIgnoreCase("") ? actualTarget.toString() : "0");
                } else {
                    myTargetBean.setMTDA("0");
                }


                property = properties.get(Constants.OrderMaterialGroupID);
                myTargetBean.setOrderMaterialGroupID((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupDesc);
                myTargetBean.setOrderMaterialGroupDesc((String) property.getValue());

                arrayList.add(myTargetBean);
            }
        }
        Map<String, MyTargetsBean> mapMyTargetBean = new HashMap<>();
        if (arrayList != null && arrayList.size() > 0) {
            Map<String, Double> mapMonthTarget = new HashMap<>();
            Map<String, Double> mapMonthAchived = new HashMap<>();

            for (MyTargetsBean bean : arrayList)
                if (mapMyTargetBean.containsKey(bean.getOrderMaterialGroupID())) {
                    double mDoubMonthTarget = Double.parseDouble(bean.getMonthTarget()) + mapMonthTarget.get(bean.getOrderMaterialGroupID());
                    double mDoubMonthAchived = Double.parseDouble(bean.getMTDA()) + mapMonthAchived.get(bean.getOrderMaterialGroupID());

                    mapMonthTarget.put(bean.getOrderMaterialGroupID(), mDoubMonthTarget);
                    mapMonthAchived.put(bean.getOrderMaterialGroupID(), mDoubMonthAchived);

                    bean.setMonthTarget(mDoubMonthTarget + "");
                    bean.setMTDA(mDoubMonthAchived + "");
                    mapMyTargetBean.put(bean.getOrderMaterialGroupID(), bean);
                } else {
                    double mDoubMonthTarget = Double.parseDouble(bean.getMonthTarget());
                    double mDoubMonthAchived = Double.parseDouble(bean.getMTDA());

                    mapMonthTarget.put(bean.getOrderMaterialGroupID(), mDoubMonthTarget);
                    mapMonthAchived.put(bean.getOrderMaterialGroupID(), mDoubMonthAchived);

                    mapMyTargetBean.put(bean.getOrderMaterialGroupID(), bean);
                }
        } else {
            MyTargetsBean myTargetsBean = new MyTargetsBean();
            myTargetsBean.setMonthTarget("0.00");
            myTargetsBean.setMTDA("0.00");
            myTargetsBean.setOrderMaterialGroupID(mStrOrderMatGrp);
            mapMyTargetBean.put(mStrOrderMatGrp, myTargetsBean);
        }
        return mapMyTargetBean;
    }

    public static ArrayList<BrandBean> getBrandListValues(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ArrayList<BrandBean> brandBeanArrayList = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    BrandBean brandBean = new BrandBean();
                    brandBean.setBrandID("None");
                    brandBean.setBrandDesc("None");
                    brandBeanArrayList.add(brandBean);
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        brandBean = new BrandBean();
                        property = properties.get(Constants.BrandID);
                        brandBean.setBrandID((String) property.getValue());
                        property = properties.get(Constants.BrandDesc);
                        brandBean.setBrandDesc((String) property.getValue());
                        brandBeanArrayList.add(brandBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return brandBeanArrayList;

    }

    public static String[][] getCategoryListValues(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size() + 1];
                    configVal[0][0] = "None";
                    configVal[1][0] = "None";

                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialCategoryID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.MaterialCategoryDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    public static ArrayList<SKUGroupBean> getOrderedMaterialGroups(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ArrayList<SKUGroupBean> skuGroupBeanArrayList = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    SKUGroupBean skuGroupBean = new SKUGroupBean();
                    skuGroupBean.setOrderMaterialGroupID(Constants.None);
                    skuGroupBean.setOrderMaterialGroupDesc(Constants.None);
                    skuGroupBeanArrayList.add(skuGroupBean);
                    for (ODataEntity entity : entities) {
                        skuGroupBean = new SKUGroupBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.OrderMaterialGroupID);
                        skuGroupBean.setOrderMaterialGroupID((String) property.getValue());
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        skuGroupBean.setOrderMaterialGroupDesc((String) property.getValue());
                        skuGroupBeanArrayList.add(skuGroupBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return skuGroupBeanArrayList;

    }

    public static String makeCPStockItemQryByOrderMatGrp(String cpStkQry, String mCPStockItemGUIDCol) throws OfflineODataStoreException {

        String cpStkListQry = "";
        ArrayList<InvoiceHistoryBean> stkArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean cpStkItemBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStkQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    cpStkItemBean = new InvoiceHistoryBean();
                    properties = entity.getProperties();
                    property = properties.get(mCPStockItemGUIDCol);
                    try {
                        ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                        cpStkItemBean.setInvoiceGuid(mInvoiceGUID.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    stkArrayList.add(cpStkItemBean);

                }
            }
        }


        if (stkArrayList != null && stkArrayList.size() > 0) {
            for (int incVal = 0; incVal < stkArrayList.size(); incVal++) {
                if (incVal == 0 && incVal == stkArrayList.size() - 1) {
                    cpStkListQry = cpStkListQry
                            + "(" + mCPStockItemGUIDCol + "%20eq%20guid'"
                            + stkArrayList.get(incVal).getInvoiceGuid() + "')";

                } else if (incVal == 0) {
                    cpStkListQry = cpStkListQry
                            + "(" + mCPStockItemGUIDCol + "%20eq%20guid'"
                            + stkArrayList.get(incVal).getInvoiceGuid() + "'";

                } else if (incVal == stkArrayList.size() - 1) {
                    cpStkListQry = cpStkListQry
                            + "%20or%20" + mCPStockItemGUIDCol + "%20eq%20guid'"
                            + stkArrayList.get(incVal).getInvoiceGuid() + "')";
                } else {
                    cpStkListQry = cpStkListQry
                            + "%20or%20" + mCPStockItemGUIDCol + "%20eq%20guid'"
                            + stkArrayList.get(incVal).getInvoiceGuid() + "'";
                }
            }
        } else {
            cpStkListQry = "";
        }

        return cpStkListQry;
    }

    public static ArrayList<DBStockBean> getCPStockSNosList(String cpStockSnosQry, DBStockBean dealerStockBean) throws OfflineODataStoreException {

        ArrayList<DBStockBean> dbStockArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            DBStockBean dbStockBean;
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStockSnosQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {
                    dbStockBean = new DBStockBean();
                    properties = entity.getProperties();
                    dbStockBean.setOrderMaterialGroupDesc(dealerStockBean.getOrderMaterialGroupDesc());
                    dbStockBean.setOrderMaterialGroupID(dealerStockBean.getOrderMaterialGroupID());
                    property = properties.get(Constants.MRP);
                    if (property != null) {
                        BigDecimal mStrMrp = (BigDecimal) property.getValue();
                        dbStockBean.setMRP(mStrMrp.toString());
                    }
                    Double mDouPrimaryPer = 0.0;
                    property = properties.get(Constants.PriDiscountPer);
                    if (property != null) {
                        BigDecimal mStrPriDiscPer = (BigDecimal) property.getValue();
                        mDouPrimaryPer = mStrPriDiscPer.doubleValue();
                        dbStockBean.setPrimDiscPer(mStrPriDiscPer.toString());
                    }

                    property = properties.get(Constants.Quantity);
                    String mStrQty = "0.0";
                    Double mDobBatchQty = 0.0, doubleMatUnitPrice = 0.0;
                    if (property != null) {
                        mStrQty = String.valueOf(property.getValue());
                    }

                    try {
                        mDobBatchQty = Double.parseDouble(mStrQty);
                    } catch (NumberFormatException e) {
                        mDobBatchQty = 0.0;
                    }

//                    property = properties.get(Constants.UnitPrice);
                    property = properties.get(Constants.IntermUnitPrice);
                    if (property != null) {
                        BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();

                        if (mDecimialMatUnitPrice != null) {
                            doubleMatUnitPrice = mDecimialMatUnitPrice.doubleValue();
                        } else {
                            doubleMatUnitPrice = 0.0;
                        }

                    }
                    String mStrTaxAmt = getPriceOnFieldByMatBatch(entity, mDobBatchQty + "");

                    Double mDouCalNetAmt = mDobBatchQty * doubleMatUnitPrice;

//                    Double mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer+"",mDouCalNetAmt+""));
                    Double mDouPrimDisAmt = 0.0;

                    Double mDouCalNetTaxDisAmt = mDouCalNetAmt + Double.parseDouble(mStrTaxAmt) - mDouPrimDisAmt;

                    dbStockBean.setLandingPrice(mDouCalNetTaxDisAmt + "");

                    property = properties.get(Constants.UOM);
                    dbStockBean.setUom((String) property.getValue());

                    if (checkNoUOMZero(String.valueOf(property.getValue())))
                        dbStockBean.setQAQty(trimQtyDecimalPlace(mStrQty));
                    else
                        dbStockBean.setQAQty(mStrQty);

                    property = properties.get(Constants.DbBatch);
                    dbStockBean.setBatch((String) property.getValue());

                    property = properties.get(Constants.Currency);
                    dbStockBean.setCurrency((String) property.getValue());

                    property = properties.get(Constants.CPStockItemGUID);
                    ODataGuid mSpItemGuid = null;
                    try {
                        mSpItemGuid = (ODataGuid) property.getValue();
                        dbStockBean.setCPStockItemGUID(mSpItemGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    property = properties.get(Constants.MaterialNo);
                    dbStockBean.setMaterialNo((String) property.getValue());
                    property = properties.get(Constants.MaterialDesc);
                    dbStockBean.setMaterialDesc((String) property.getValue());

                    dbStockBean.setFirstMrpQty(dbStockBean.getQAQty());
                    dbStockBean.setFirstMrpLandingPrice(dbStockBean.getLandingPrice());

                    property = properties.get(Constants.ManufacturingDate);
                    String convertDateFormat = "";
                    if (property != null) {
                        convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    }
                    dbStockBean.setMFD(convertDateFormat);

                    boolean isAddedInExisting = false;
                    for (DBStockBean item : dbStockArrayList) {
                        if (dbStockBean.getBatch().equalsIgnoreCase(item.getBatch()) &&
                                dbStockBean.getMRP().equalsIgnoreCase(item.getMRP()) &&
                                dbStockBean.getPrimDiscPer().equalsIgnoreCase(item.getPrimDiscPer()) && dbStockBean.getMaterialNo().equalsIgnoreCase(item.getMaterialNo())) {
                            double updateQty = Double.parseDouble(item.getQAQty()) + Double.parseDouble(dbStockBean.getQAQty());
                            double updateAmt = Double.parseDouble(item.getLandingPrice()) + Double.parseDouble(dbStockBean.getLandingPrice());
                            if (!item.getUom().equalsIgnoreCase("")) {
                                item.setQAQty(trimQtyDecimalPlace(String.valueOf(updateQty)));
                            } else {
                                item.setQAQty(String.format("%.3f", updateQty));
                            }
                            item.setLandingPrice(updateAmt + "");
                            isAddedInExisting = true;
                            break;
                        }
                    }
                    if (!isAddedInExisting) {
                        if (Double.parseDouble(dbStockBean.getQAQty()) > 0)
                            dbStockArrayList.add(dbStockBean);
                    }

                }
            }


        }

        return dbStockArrayList;


    }

    public static String getPriceOnFieldByMatBatch(ODataEntity entity, String mStrOrderQty) throws OfflineODataStoreException {

        Double doubleTax1 = 0.0, doubleTax2 = 0.0, doubleTax3 = 0.0, doubleTax4 = 0.0, doubleTax5 = 0.0,
                doubleTax6 = 0.0, doubleTax7 = 0.0, doubleTax8 = 0.0, doubleTax9 = 0.0, doubleTax10 = 0.0;
        Double mDouCalucaltedNetAmount = 0.0;
        String mStrCalTaxOneAmt = "0.0", mStrCalTaxTwoAmt = "0.0", mStrCalTaxThreeAmt = "0.0",
                mStrCalTaxFourAmt = "0.0", mStrCalTaxFiveAmt = "0.0", mStrCalTaxSixAmt = "0.0",
                mStrCalSevenAmt = "0.0", mStrCalTaxEightAmt = "0.0", mStrCalTaxNineAmt = "0.0",
                mStrCalTaxTenAmt = "0.0";

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;


            properties = entity.getProperties();

            property = properties.get(Constants.Tax1);
            if (property != null) {
                BigDecimal mDecTax1 = (BigDecimal) property.getValue();
                if (mDecTax1 != null) {
                    doubleTax1 = mDecTax1.doubleValue();
                } else {
                    doubleTax1 = 0.0;
                }
            }
            if (doubleTax1 > 0) {
                mStrCalTaxOneAmt = getTaxAmt(properties, "01", doubleTax1);
            }

            property = properties.get(Constants.Tax2);
            if (property != null) {
                BigDecimal mDecTax2 = (BigDecimal) property.getValue();
                if (mDecTax2 != null) {
                    doubleTax2 = mDecTax2.doubleValue();
                } else {
                    doubleTax2 = 0.0;
                }
            }
            if (doubleTax2 > 0) {
                mStrCalTaxTwoAmt = getTaxAmt(properties, "02", doubleTax2);
            }

            property = properties.get(Constants.Tax3);
            if (property != null) {
                BigDecimal mDecTax3 = (BigDecimal) property.getValue();
                if (mDecTax3 != null) {
                    doubleTax3 = mDecTax3.doubleValue();
                } else {
                    doubleTax3 = 0.0;
                }
            }
            if (doubleTax3 > 0) {
                mStrCalTaxThreeAmt = getTaxAmt(properties, "03", doubleTax3);
            }

            property = properties.get(Constants.Tax4);
            if (property != null) {
                BigDecimal mDecTax4 = (BigDecimal) property.getValue();
                if (mDecTax4 != null) {
                    doubleTax4 = mDecTax4.doubleValue();
                } else {
                    doubleTax4 = 0.0;
                }
            }
            if (doubleTax4 > 0) {
                mStrCalTaxFourAmt = getTaxAmt(properties, "04", doubleTax4);
            }

            property = properties.get(Constants.Tax5);
            if (property != null) {
                BigDecimal mDecTax5 = (BigDecimal) property.getValue();
                if (mDecTax5 != null) {
                    doubleTax5 = mDecTax5.doubleValue();
                } else {
                    doubleTax5 = 0.0;
                }
            }
            if (doubleTax5 > 0) {
                mStrCalTaxFiveAmt = getTaxAmt(properties, "05", doubleTax5);
            }

            property = properties.get(Constants.Tax6);
            if (property != null) {
                BigDecimal mDecTax6 = (BigDecimal) property.getValue();
                if (mDecTax6 != null) {
                    doubleTax6 = mDecTax6.doubleValue();
                } else {
                    doubleTax6 = 0.0;
                }
            }
            if (doubleTax6 > 0) {
                mStrCalTaxSixAmt = getTaxAmt(properties, "06", doubleTax6);
            }

            property = properties.get(Constants.Tax7);
            if (property != null) {
                BigDecimal mDecTax7 = (BigDecimal) property.getValue();
                if (mDecTax7 != null) {
                    doubleTax7 = mDecTax7.doubleValue();
                } else {
                    doubleTax7 = 0.0;
                }
            }
            if (doubleTax7 > 0) {
                mStrCalSevenAmt = getTaxAmt(properties, "07", doubleTax7);
            }

            property = properties.get(Constants.Tax8);
            if (property != null) {
                BigDecimal mDecTax8 = (BigDecimal) property.getValue();
                if (mDecTax8 != null) {
                    doubleTax8 = mDecTax8.doubleValue();
                } else {
                    doubleTax8 = 0.0;
                }
            }
            if (doubleTax8 > 0) {
                mStrCalTaxEightAmt = getTaxAmt(properties, "08", doubleTax8);
            }

            property = properties.get(Constants.Tax9);
            if (property != null) {
                BigDecimal mDecTax9 = (BigDecimal) property.getValue();
                if (mDecTax9 != null) {
                    doubleTax9 = mDecTax9.doubleValue();
                } else {
                    doubleTax9 = 0.0;
                }
            }
            if (doubleTax9 > 0) {
                mStrCalTaxNineAmt = getTaxAmt(properties, "09", doubleTax9);
            }

            property = properties.get(Constants.Tax10);
            if (property != null) {
                BigDecimal mDecTax10 = (BigDecimal) property.getValue();
                if (mDecTax10 != null) {
                    doubleTax10 = mDecTax10.doubleValue();
                } else {
                    doubleTax10 = 0.0;
                }
            }
            if (doubleTax10 > 0) {
                mStrCalTaxTenAmt = getTaxAmt(properties, "10", doubleTax10);
            }


            mDouCalucaltedNetAmount = (Double.parseDouble(mStrCalTaxOneAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxTwoAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxThreeAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxFourAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxFiveAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxSixAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalSevenAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxEightAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxNineAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxTenAmt) * Double.parseDouble(mStrOrderQty));
        }

        return mDouCalucaltedNetAmount.toString();
    }

    public static String getTaxAmt(ODataPropMap properties, String mStrTaxId, Double doubleTax) throws OfflineODataStoreException {
        String mCalTaxAmt = "0.0";
        ODataProperty property;
        Double doubleUnitPrice = 0.0;

        ArrayList<PricingConditions> pricingConditionsAL = getPricingConditionTypeList(Constants.PricingConditions + "?$filter="
                + Constants.ReferenceTaxFieldID + " eq '" + mStrTaxId + "' ");

        if (pricingConditionsAL != null && pricingConditionsAL.size() > 0) {

            if (pricingConditionsAL.get(0).getCalcOnID().equalsIgnoreCase("02")) {

                ArrayList<PricingConditions> pricingConOnCalValAL = getPricingConditionTypeList(Constants.PricingConditions + "?$filter="
                        + Constants.ConditionTypeID + " eq '" + pricingConditionsAL.get(0).getCalcOnConditionTypeID() + "' ");
                if (pricingConOnCalValAL != null && pricingConOnCalValAL.size() > 0) {
                    property = properties.get(Constants.getCalculateColumn(pricingConOnCalValAL.get(0).getApplicableOnID()));
                    if (property != null) {
                        BigDecimal mDecUnitPrice = (BigDecimal) property.getValue();
                        if (mDecUnitPrice != null) {
                            doubleUnitPrice = mDecUnitPrice.doubleValue();
                        } else {
                            doubleUnitPrice = 0.0;
                        }
                    }
                    mCalTaxAmt = Constants.formulaOneCalculation(doubleTax.toString(), doubleUnitPrice + "");
                }

            } else {
                property = properties.get(Constants.getCalculateColumn(pricingConditionsAL.get(0).getApplicableOnID()));
                if (property != null) {
                    BigDecimal mDecUnitPrice = (BigDecimal) property.getValue();
                    if (mDecUnitPrice != null) {
                        doubleUnitPrice = mDecUnitPrice.doubleValue();
                    } else {
                        doubleUnitPrice = 0.0;
                    }
                }
                mCalTaxAmt = Constants.formulaOneCalculation(doubleTax.toString(), doubleUnitPrice + "");
            }
        }

        return mCalTaxAmt;
    }

    public static ArrayList<BirthdaysBean> getTodayBirthDayList(String todayAnyBirthDayListQry) throws OfflineODataStoreException {

        ArrayList<BirthdaysBean> birthyDayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            BirthdaysBean birthdaysBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(todayAnyBirthDayListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        birthdaysBean = new BirthdaysBean();

                        property = properties.get(Constants.CPGUID);
                        try {
                            ODataGuid mCPGUID = (ODataGuid) property.getValue();
                            birthdaysBean.setCPUID(mCPGUID.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.RetailerName);
                        birthdaysBean.setRetailerName((String) property.getValue());
                        property = properties.get(Constants.OwnerName);
                        birthdaysBean.setOwnerName((String) property.getValue());

                        property = properties.get(Constants.DOB);
                        birthdaysBean.setDOB(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        property = properties.get(Constants.Anniversary);
                        birthdaysBean.setAnniversary(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        birthdaysBean.setDOBStatus("");
                        birthdaysBean.setAnniversaryStatus("");
                        property = properties.get(Constants.MobileNo);
                        birthdaysBean.setMobileNo((String) property.getValue());

                        birthyDayList.add(birthdaysBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return birthyDayList;

    }

    public static ArrayList<BirthdaysBean> getAppointmentListForAlert(String strQry) throws OfflineODataStoreException {

        ArrayList<BirthdaysBean> appointmentList = new ArrayList<>();

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            BirthdaysBean appointment;
            ODataProperty property, retProperty;
            ODataPropMap properties, retProperties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {

                        appointment = new BirthdaysBean();

                        appointment.setAppointmentAlert(true);
                        properties = entity.getProperties();


                        property = properties.get(Constants.PlannedDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());

                        appointment.setAppointMentDate(convertDateFormat);
                        property = properties.get(Constants.PlannedStartTime);
                        ODataDuration oDataDuration = null;
                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        appointment.setAppointmentTime(oDataDuration.toString());

                        property = properties.get(Constants.PlannedEndTime);
                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        appointment.setAppointmentEndTime(oDataDuration.toString());


                        property = properties.get(Constants.VisitTypeDesc);
                        String visitTypeDesc = (String) property.getValue() != null ? (String) property.getValue() : "";

                        appointment.setAppointmentType(visitTypeDesc);

                        property = properties.get(Constants.CPGUID);
                        String cpGUID32 = (String) property.getValue();
                        String cpGUID36 = Constants.convertStrGUID32to36(cpGUID32.toUpperCase());
                        appointment.setCPUID(cpGUID36);


                        String cpGuidQry = Constants.ChannelPartners + "(guid'" + cpGUID36 + "') ";
                        ODataEntity retilerEntity = OfflineManager.getRetDetails(cpGuidQry);
                        retProperties = retilerEntity.getProperties();
                        retProperty = retProperties.get(Constants.RetailerName);
                        appointment.setRetailerName((String) retProperty.getValue());

                        retProperty = retProperties.get(Constants.OwnerName);
                        appointment.setOwnerName((String) retProperty.getValue());

                        retProperty = retProperties.get(Constants.MobileNo);
                        appointment.setMobileNo((String) retProperty.getValue());

                        appointment.setAppointmentStatus("");

                        appointmentList.add(appointment);
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return appointmentList;

    }

    public static ArrayList<BirthdaysBean> getAlertsFromLocalDB(ArrayList<BirthdaysBean> alertsOrderBeanList) {

        String query = Constants.Alerts + Constants.isNonLocalFilterQry;
        try {
            alertsOrderBeanList = OfflineManager.getAlerts(query, alertsOrderBeanList);
        } catch (OfflineODataStoreException s) {
            s.printStackTrace();
        }

        return alertsOrderBeanList;
    }

    public static ArrayList<BirthdaysBean> getAlerts(String alertQuery, ArrayList<BirthdaysBean> alertsList) throws OfflineODataStoreException {

        if (offlineStore != null) {
            BirthdaysBean alertsBean;
            if (alertsList == null) {
                alertsList = new ArrayList<>();
            }
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(alertQuery);
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        alertsBean = new BirthdaysBean();
                        property = properties.get(Constants.AlertGUID);
                        alertsBean.setAlertGUID((String) property.getValue());
                        property = properties.get(Constants.AlertText);
                        alertsBean.setAlertText((String) property.getValue());
                        property = properties.get(Constants.Application);
                        alertsBean.setApplication((String) property.getValue());
                        property = properties.get(Constants.PartnerType);
                        alertsBean.setPartnerType((String) property.getValue());
                        property = properties.get(Constants.AlertType);
                        alertsBean.setAlertType((String) property.getValue());
                        property = properties.get(Constants.AlertTypeDesc);
                        alertsBean.setAlertTypeDesc((String) property.getValue());
                        alertsBean.setAlertStatus("");
                        property = properties.get(Constants.ObjectType);
                        if (property != null) {
                            alertsBean.setObjectType(property.getValue().toString());
                        }

                        property = properties.get(Constants.ObjectID);
                        if (property != null) {
                            alertsBean.setObjectID(property.getValue().toString());
                        }

                        property = properties.get(Constants.ObjectSubID);
                        if (property != null) {
                            alertsBean.setObjectSubID(property.getValue().toString());
                        }

                        property = properties.get(Constants.CreatedBy);
                        if (property != null) {
                            alertsBean.setCreatedBy(property.getValue().toString());
                        }

                        property = properties.get(Constants.CreatedAt);
                        if (property != null) {
                            String mCreatedAt = "";
                            try {
                                mCreatedAt = UtilConstants.convertTimeOnly(property.getValue().toString());
                                if (mCreatedAt.equalsIgnoreCase("")) {
                                    mCreatedAt = "00:00:00";
                                }
                            } catch (Exception e) {
                                mCreatedAt = "00:00:00";
                                e.printStackTrace();
                            }
                            alertsBean.setCreatedAt(mCreatedAt.replace(":", "-"));
                        }


                        property = properties.get(Constants.ConfirmedBy);
                        if (property != null) {
                            alertsBean.setConfirmedBy(property.getValue().toString());
                        }
                        property = properties.get(Constants.ConfirmedOn);
                        if (property != null) {
                            alertsBean.setConfirmedOn(ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue()));
                        }
                        property = properties.get(Constants.Application);
                        if (property != null) {
                            alertsBean.setApplication(property.getValue().toString() != null ? property.getValue().toString() : "");
                        } else {
                            alertsBean.setApplication("");
                        }
                        alertsList.add(alertsBean);
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }

        }


        return alertsList;
    }

    public static void updateAlert(BirthdaysBean birthdaysBean,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateAlertEntity(birthdaysBean);
            //Send the request to update visit in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), null, Constants.Alerts,context), null);

//            offlineStore.executeUpdateEntity(newEntity, null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    private static ODataEntity updateAlertEntity(BirthdaysBean birthdaysBean) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.AlertEntity);

            try {
                offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Optional);
            } catch (ODataException e) {
                e.printStackTrace();
            }
            newEntity.getProperties().put(Constants.AlertGUID,
                    new ODataPropertyDefaultImpl(Constants.AlertGUID, birthdaysBean.getAlertGUID()));
            newEntity.getProperties().put(Constants.Application,
                    new ODataPropertyDefaultImpl(Constants.Application, birthdaysBean.getApplication()));
            newEntity.getProperties().put(Constants.PartnerType,
                    new ODataPropertyDefaultImpl(Constants.PartnerType, birthdaysBean.getPartnerType()));
            newEntity.getProperties().put(Constants.PartnerID,
                    new ODataPropertyDefaultImpl(Constants.PartnerID, birthdaysBean.getPartnerID()));
            newEntity.getProperties().put(Constants.AlertType,
                    new ODataPropertyDefaultImpl(Constants.AlertType, birthdaysBean.getAlertType()));
            newEntity.getProperties().put(Constants.AlertTypeDesc,
                    new ODataPropertyDefaultImpl(Constants.AlertTypeDesc, birthdaysBean.getAlertTypeDesc()));
       /*     newEntity.getProperties().put(Constants.LOGINID,
                    new ODataPropertyDefaultImpl(Constants.LOGINID, birthdaysBean.getLoginID()));*/
            newEntity.getProperties().put(Constants.ObjectType,
                    new ODataPropertyDefaultImpl(Constants.ObjectType, birthdaysBean.getObjectType()));
            newEntity.getProperties().put(Constants.ObjectID,
                    new ODataPropertyDefaultImpl(Constants.ObjectID, birthdaysBean.getObjectID()));
            newEntity.getProperties().put(Constants.ObjectSubID,
                    new ODataPropertyDefaultImpl(Constants.ObjectSubID, birthdaysBean.getObjectSubID()));
            newEntity.getProperties().put(Constants.CreatedBy,
                    new ODataPropertyDefaultImpl(Constants.CreatedBy, birthdaysBean.getCreatedBy()));
            newEntity.getProperties().put(Constants.AlertText,
                    new ODataPropertyDefaultImpl(Constants.AlertText, birthdaysBean.getAlertText()));
            newEntity.setResourcePath(Constants.Alerts + "(" + Constants.AlertGUID + "='" + birthdaysBean.getAlertGUID() + "'," + Constants.Application + "='" + birthdaysBean.getApplication() + "')",
                    Constants.Alerts + "(" + Constants.AlertGUID + "='" + birthdaysBean.getAlertGUID() + "'," + Constants.Application + "='" + birthdaysBean.getApplication() + "')");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static String[] getAppointmentTimeConfigList(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        configVal[incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    public static ArrayList<AppointmentBean> getAppointmentList(String strQry) throws OfflineODataStoreException {

        ArrayList<AppointmentBean> appointmentList = new ArrayList<AppointmentBean>();

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            AppointmentBean appointment;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {

                        appointment = new AppointmentBean();
                        properties = entity.getProperties();

						/*property = properties.get(Constants.VISITKEY);
                        appointment.setVisitGUID((String)property.getValue());*/
                        property = properties.get(Constants.PlannedDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());

                        appointment.setPlannedDate(convertDateFormat);
                        property = properties.get(Constants.PlannedStartTime);
                        ODataDuration oDataDuration = null;
                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        appointment.setPlannedStartTime(oDataDuration.toString());
                        property = properties.get(Constants.PlannedEndTime);

                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        appointment.setPlannedEndTime(oDataDuration.toString());
                        property = properties.get(Constants.VisitTypeDesc);
                        appointment.setVisitTypeDesc((String) property.getValue());
                        property = properties.get(Constants.CPGUID);
                        appointment.setCPGUID((String) property.getValue());
                    /*	property = properties.get(Constants.VISIT_TYPE);
                        appointment.setActivityType((String)property.getValue());*/
                        appointmentList.add(appointment);
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return appointmentList;

    }

    public static HashSet<String> getVisitStatusByRetiler(String cpQry) {
        HashSet<String> mapCPList = new HashSet<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPGUID);
                        String mGUIDVal = null;
                        try {
                            mGUIDVal = (String) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        mapCPList.add(mGUIDVal.toUpperCase());

                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }
        return mapCPList;
    }

    public static ArrayList<RetailerBean> getRetailerListForOtherRoute1(String qry) throws OfflineODataStoreException {

        ArrayList<RetailerBean> retailerList = new ArrayList<>();
        String rchGuidQry = "";
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RouteSchGUID);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();
                        if (!Constants.mSetTodayRouteSch.contains(RschGuid.guidAsString36().toUpperCase())) {
                            if (rchGuidQry.length() == 0)
                                rchGuidQry += " guid'" + RschGuid.guidAsString36().toUpperCase() + "'";
                            else
                                rchGuidQry += " or " + Constants.RouteSchGUID + " eq guid'" + RschGuid.guidAsString36().toUpperCase() + "'";
                        }

                    }

                    String qryForOthersBeat = Constants.RouteSchedules + "?$filter=(" +
                            Constants.RouteSchGUID + " eq " + rchGuidQry + ") and " + Constants.ApprovalStatus + " eq '03' and StatusID eq '01' &$orderby=Description asc";
                    ArrayList<RetailerBean> alRetailerList = new ArrayList<>();
                    List<RetailerBean> listRetailers = OfflineManager.getOtherBeatList(qryForOthersBeat, false);
                    alRetailerList = (ArrayList<RetailerBean>) listRetailers;
                    retailerList.addAll(alRetailerList);

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return retailerList;
    }

    public static String[][] getMaterialCategries(String matCatQry) throws OfflineODataStoreException {

        String[][] distList = null;
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, matCatQry);
            distList = new String[2][entities.size() + 1];
            distList[0][0] = "";
            distList[1][0] = Constants.All;
            int incVal = 1;
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.MaterialCategoryID);
                    distList[0][incVal] = (String) property.getValue();
                    property = properties.get(Constants.MaterialCategoryDesc);
                    distList[1][incVal] = (String) property.getValue();
                    incVal++;
                }
            }

        }
        return distList;

    }

    public static String[][] getCatgeriesBrandsLink(String brandQry, String mStrSelID, String mStrSelDesc) throws OfflineODataStoreException {

        String[][] distList = null;
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, brandQry);
            distList = new String[2][entities.size() + 1];
            distList[0][0] = "";
            distList[1][0] = Constants.All;
            int incVal = 1;
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(mStrSelID);
                    distList[0][incVal] = (String) property.getValue();
                    property = properties.get(mStrSelDesc);
                    distList[1][incVal] = (String) property.getValue();

                    incVal++;
                }
            }

        }
        return distList;

    }

    public static String[][] getBrands(String brandQry) throws OfflineODataStoreException {

        String[][] distList = null;
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, brandQry);
            distList = new String[2][entities.size() + 1];
            distList[0][0] = "";
            distList[1][0] = Constants.All;
            int incVal = 1;
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.BrandID);
                    distList[0][incVal] = (String) property.getValue();
                    property = properties.get(Constants.BrandDesc);
                    distList[1][incVal] = (String) property.getValue();
                    incVal++;
                }
            }

        }
        return distList;

    }

    public static Set<String> getValueByColumnNameCRSSKU(String mQry, String columnName) throws OfflineODataStoreException {
//        String mStrVal = "";
        Set<String> mSetOrderMatGrp = new HashSet<>();
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(columnName);
//                        mStrVal = (String) property.getValue();
                        mSetOrderMatGrp.add((String) property.getValue());
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mSetOrderMatGrp;

    }

    public static ArrayList<SalesOrderBean> getSSSoListFromDataValt(Context context, String mStrCpGuid, String mStrBeatGUID) throws OfflineODataStoreException {
        SalesOrderBean salesOrderBean;
        ArrayList<SalesOrderBean> salesOrderHeaderArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(context);
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.SecondarySOCreate, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                            && fetchJsonHeaderObject.getString(Constants.CPGUID).equalsIgnoreCase(Constants.convertStrGUID32to36(mStrCpGuid.toUpperCase()))&& fetchJsonHeaderObject.getString(Constants.FromCPGUID).equalsIgnoreCase((mStrBeatGUID.toUpperCase()))) {
                        salesOrderBean = new SalesOrderBean();
                        salesOrderBean.setDeviceNo(deviceNo);
                        salesOrderBean.setSSROGUID(fetchJsonHeaderObject.optString(Constants.SSSOGuid));
                        salesOrderBean.setOrderNo(fetchJsonHeaderObject.optString(Constants.OrderNo));
                        String convertDateFormat2 = UtilConstants.convertDateIntoDeviceFormat(context, UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.optString(Constants.OrderDate)), configDateFormat);
                        salesOrderBean.setOrderDate(convertDateFormat2);
                        salesOrderBean.setStatusID(fetchJsonHeaderObject.optString(Constants.StatusID));
                        try{
                        Log.d("NetAmount","decimalVAlue"+fetchJsonHeaderObject.optString(Constants.NetPrice));
                        salesOrderBean.setNetAmount(UtilConstants.removeLeadingZerowithTwoDecimal(fetchJsonHeaderObject.optString(Constants.NetPrice)));
                        Log.d("NetAmount","decimalVAlue"+salesOrderBean.getNetAmount());
                        }catch (Exception e){
                            e.printStackTrace();
                        }
                        salesOrderBean.setCurrency(fetchJsonHeaderObject.optString(Constants.Currency));
                        salesOrderBean.setDmsDivision(fetchJsonHeaderObject.optString(Constants.DmsDivision));
                        salesOrderBean.setDmsDivisionDesc(fetchJsonHeaderObject.optString(Constants.DmsDivisionDesc));
                        salesOrderBean.setOrderType(fetchJsonHeaderObject.optString(Constants.OrderType));
                        salesOrderHeaderArrayList.add(salesOrderBean);
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return sortingROList(salesOrderHeaderArrayList);

    }

    private static ArrayList<SalesOrderBean> sortingROList(ArrayList<SalesOrderBean> alReturnOrdList) {

        if (alReturnOrdList != null && alReturnOrdList.size() > 0) {
            Collections.sort(alReturnOrdList, new Comparator<SalesOrderBean>() {
                public int compare(SalesOrderBean one, SalesOrderBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getOrderNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getOrderNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getOrderNo().compareTo(one.getOrderNo());
                    }
                }
            });

        } else {
            alReturnOrdList = new ArrayList<>();
        }
        return alReturnOrdList;
    }

    public static List<SalesOrderBean> getSSSODetailsListFromDataValt(String mDeviceNo,Context context) throws OfflineODataStoreException {
        List<SalesOrderBean> SalesOrderBeanList = new ArrayList<>();
        SalesOrderBean returnOrderBean;
        String store = "";
        ArrayList<HashMap<String, String>> arrtable;
        try {
            store = ConstantsUtils.getFromDataVault(mDeviceNo,context);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        try {
            JSONObject fetchJsonHeaderObject = new JSONObject(store);
            String itemsString = fetchJsonHeaderObject.getString(Constants.ITEM_TXT);
            arrtable = UtilConstants.convertToArrayListMap(itemsString);
            for (int i = 0; i < arrtable.size(); i++) {
                HashMap<String, String> singleRow = arrtable.get(i);
                returnOrderBean = new SalesOrderBean();

                returnOrderBean.setMaterialNo(singleRow.get(Constants.MaterialNo));
                returnOrderBean.setMaterialDesc(singleRow.get(Constants.MaterialDesc));
                returnOrderBean.setOrderMaterialGroupID(singleRow.get(Constants.OrderMatGrp));
                returnOrderBean.setsItemNo(singleRow.get(Constants.ItemNo));
                returnOrderBean.setQAQty(singleRow.get(Constants.Quantity));
                try {
                    Log.d("NetAmount", "decimalVAlue" + singleRow.get(Constants.NetPrice));
                    returnOrderBean.setNetAmount(UtilConstants.removeLeadingZerowithTwoDecimal(singleRow.get(Constants.NetPrice)));
                    Log.d("NetAmount", "decimalVAlue" + returnOrderBean.getNetAmount());
                }catch (Exception e){
                    e.printStackTrace();
                }
                returnOrderBean.setCurrency(singleRow.get(Constants.Currency));
                returnOrderBean.setUom(singleRow.get(Constants.Uom));
                returnOrderBean.setOrderMaterialGroupDesc(singleRow.get(Constants.OrderMatGrpDesc));
                returnOrderBean.setIsfreeGoodsItem(singleRow.get(Constants.IsfreeGoodsItem));

//                returnOrderBean.setNetAmount(singleRow.get(Constants.GrossAmount));
                SalesOrderBeanList.add(returnOrderBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return SalesOrderBeanList;

    }

    public static String getRoutePlanKeyNew(String mQuery) throws OfflineODataStoreException {

        String mStrRouteKey = "";
        //Check if the offline oData store is initialized


        try {
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mQuery);
            ODataProperty property;
            ODataPropMap properties;
            ODataGuid RschGuid = null;
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.RouteSchGUID);
                    RschGuid = (ODataGuid) property.getValue();
                }
                if (RschGuid != null) {
                    String mStrRouteQry = Constants.RoutePlans + "?$filter=" + Constants.RschGuid + " eq guid'" + RschGuid.guidAsString36().toUpperCase() + "'" +
                            " and " + Constants.VisitDate + " eq datetime'" + UtilConstants.getNewDate() + "' ";

                    List<ODataEntity> routeEntities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrRouteQry);

                    if (routeEntities != null && routeEntities.size() > 0) {
                        for (ODataEntity entity : routeEntities) {
                            properties = entity.getProperties();
                            property = properties.get(Constants.RoutePlanKey);
                            mStrRouteKey = (String) property.getValue();
                        }
                    } else {
                        mStrRouteKey = "";
                    }
                } else {
                    mStrRouteKey = "";
                }
            } else {
                mStrRouteKey = "";
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }


        return mStrRouteKey;

    }

    public static void updateRetilerBatchReq(Hashtable<String, String> hashtable, String comingFrom, ODataPropMap oDataProperties) throws ODataParserException {
        ODataEntity channelPartnerEntity = null, cpDmsDivisionEntity = null;
        try {
            channelPartnerEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ChannelPartnerEntity);
            channelPartnerEntity.setResourcePath(Constants.ChannelPartners, Constants.ChannelPartners);
            offlineStore.allocateProperties(channelPartnerEntity, ODataStore.PropMode.Keys);
            offlineStore.allocateNavigationProperties(channelPartnerEntity);
            /*channelPartnerEntity.getProperties().put(Constants.CPGUID,
                    new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPGUID))));*/
            Set keySet = oDataProperties.keySet();
            Iterator itr = keySet.iterator();
            while (itr.hasNext()) {
                String key = itr.next().toString();
                try {
                    channelPartnerEntity.getProperties().put(key,
                            new ODataPropertyDefaultImpl(key, oDataProperties.get(key).getValue()));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

           /* if (comingFrom.equalsIgnoreCase(Constants.DOB)) {
                channelPartnerEntity.getProperties().put(Constants.DOB,
                        new ODataPropertyDefaultImpl(Constants.DOB, UtilConstants.convertDateFormat(hashtable.get(Constants.DOB))));
                try {
                    channelPartnerEntity.getProperties().put(Constants.Anniversary,
                            new ODataPropertyDefaultImpl(Constants.Anniversary, hashtable.get(Constants.Anniversary)));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (comingFrom.equalsIgnoreCase(Constants.Anniversary)) {
                channelPartnerEntity.getProperties().put(Constants.Anniversary,
                        new ODataPropertyDefaultImpl(Constants.Anniversary, UtilConstants.convertDateFormat(hashtable.get(Constants.Anniversary))));

                try {
                    channelPartnerEntity.getProperties().put(Constants.DOB,
                            new ODataPropertyDefaultImpl(Constants.DOB, hashtable.get(Constants.DOB)));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (comingFrom.equalsIgnoreCase(Constants.Latitude)) {
                try {
                    channelPartnerEntity.getProperties().put(Constants.Anniversary,
                            new ODataPropertyDefaultImpl(Constants.Anniversary, hashtable.get(Constants.Anniversary)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    channelPartnerEntity.getProperties().put(Constants.DOB,
                            new ODataPropertyDefaultImpl(Constants.DOB, hashtable.get(Constants.DOB)));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    channelPartnerEntity.getProperties().put(Constants.Anniversary,
                            new ODataPropertyDefaultImpl(Constants.Anniversary, UtilConstants.convertDateFormat(hashtable.get(Constants.Anniversary))));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    channelPartnerEntity.getProperties().put(Constants.DOB,
                            new ODataPropertyDefaultImpl(Constants.DOB, UtilConstants.convertDateFormat(hashtable.get(Constants.DOB))));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }*/
            /*try {
                channelPartnerEntity.getProperties().put(Constants.AccountGrp,
                        new ODataPropertyDefaultImpl(Constants.AccountGrp, oDataProperties.get(Constants.AccountGrp).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }try {
                channelPartnerEntity.getProperties().put(Constants.ActivationDate,
                        new ODataPropertyDefaultImpl(Constants.ActivationDate, oDataProperties.get(Constants.ActivationDate).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.Address2,
                        new ODataPropertyDefaultImpl(Constants.Address2, oDataProperties.get(Constants.Address2).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.Address3,
                        new ODataPropertyDefaultImpl(Constants.Address3, oDataProperties.get(Constants.Address3).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.Address4,
                        new ODataPropertyDefaultImpl(Constants.Address4, oDataProperties.get(Constants.Address4).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.ApprovedAt,
                        new ODataPropertyDefaultImpl(Constants.ApprovedAt, oDataProperties.get(Constants.ApprovedAt).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.ApprovedOn,
                        new ODataPropertyDefaultImpl(Constants.ApprovedOn, oDataProperties.get(Constants.ApprovedOn).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.ApprvlStatusDesc,
                        new ODataPropertyDefaultImpl(Constants.ApprvlStatusDesc, oDataProperties.get(Constants.ApprvlStatusDesc).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.BlockID,
                        new ODataPropertyDefaultImpl(Constants.BlockID, oDataProperties.get(Constants.BlockID).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.BlockName,
                        new ODataPropertyDefaultImpl(Constants.BlockName, oDataProperties.get(Constants.BlockName).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.BuiltupArea,
                        new ODataPropertyDefaultImpl(Constants.BuiltupArea, oDataProperties.get(Constants.BuiltupArea).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.BuiltupAreaUom,
                        new ODataPropertyDefaultImpl(Constants.BuiltupAreaUom, oDataProperties.get(Constants.BuiltupAreaUom).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.BusinessID1,
                        new ODataPropertyDefaultImpl(Constants.BusinessID1, oDataProperties.get(Constants.BusinessID1).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.BusinessID2,
                        new ODataPropertyDefaultImpl(Constants.BusinessID2, oDataProperties.get(Constants.BusinessID2).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.ConstructionStageDs,
                        new ODataPropertyDefaultImpl(Constants.ConstructionStageDs, oDataProperties.get(Constants.ConstructionStageDs).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.ConstructionStageID,
                        new ODataPropertyDefaultImpl(Constants.ConstructionStageID, oDataProperties.get(Constants.ConstructionStageID).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }*/
            /*try {
                channelPartnerEntity.getProperties().put(Constants.ConstructionType,
                        new ODataPropertyDefaultImpl(Constants.ConstructionType, oDataProperties.get(Constants.ConstructionType).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }*/

           /* try {
                channelPartnerEntity.getProperties().put(Constants.ApprovedBy,
                        new ODataPropertyDefaultImpl(Constants.ApprovedBy, oDataProperties.get(Constants.ApprovedBy).getValue()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.CreatedBy,
                        new ODataPropertyDefaultImpl(Constants.CreatedBy, hashtable.get(Constants.CreatedBy)));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.CreatedOn,
                        new ODataPropertyDefaultImpl(Constants.CreatedOn, hashtable.get(Constants.CreatedOn)));
            } catch (Exception e) {
                e.printStackTrace();
            }*/
            try {
                channelPartnerEntity.getProperties().put(Constants.Latitude,
                        new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));
                channelPartnerEntity.getProperties().put(Constants.Longitude,
                        new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));
            } catch (Exception e) {
                e.printStackTrace();
            }

          /*  try {
                channelPartnerEntity.getProperties().put(Constants.MobileNo,
                        new ODataPropertyDefaultImpl(Constants.MobileNo, hashtable.get(Constants.MobileNo)));
                channelPartnerEntity.getProperties().put(Constants.OutletName,
                        new ODataPropertyDefaultImpl(Constants.OutletName, hashtable.get(Constants.OutletName)));
                channelPartnerEntity.getProperties().put(Constants.OwnerName,
                        new ODataPropertyDefaultImpl(Constants.OwnerName, hashtable.get(Constants.OwnerName)));
                channelPartnerEntity.getProperties().put(Constants.RetailerProfile,
                        new ODataPropertyDefaultImpl(Constants.RetailerProfile, hashtable.get(Constants.RetailerProfile)));
                channelPartnerEntity.getProperties().put(Constants.Group2,
                        new ODataPropertyDefaultImpl(Constants.Group2, hashtable.get(Constants.Group2)));
                channelPartnerEntity.getProperties().put(Constants.PAN,
                        new ODataPropertyDefaultImpl(Constants.PAN, hashtable.get(Constants.PAN)));
                channelPartnerEntity.getProperties().put(Constants.VATNo,
                        new ODataPropertyDefaultImpl(Constants.VATNo, hashtable.get(Constants.VATNo)));
                channelPartnerEntity.getProperties().put(Constants.EmailID,
                        new ODataPropertyDefaultImpl(Constants.EmailID, hashtable.get(Constants.EmailID)));
                channelPartnerEntity.getProperties().put(Constants.PostalCode,
                        new ODataPropertyDefaultImpl(Constants.PostalCode, hashtable.get(Constants.PostalCode)));
                channelPartnerEntity.getProperties().put(Constants.Landmark,
                        new ODataPropertyDefaultImpl(Constants.Landmark, hashtable.get(Constants.Landmark)));
                channelPartnerEntity.getProperties().put(Constants.Address1,
                        new ODataPropertyDefaultImpl(Constants.Address1, hashtable.get(Constants.Address1)));
                channelPartnerEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));

                channelPartnerEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
                channelPartnerEntity.getProperties().put(Constants.ParentTypeID,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
                channelPartnerEntity.getProperties().put(Constants.ParentName,
                        new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
                channelPartnerEntity.getProperties().put(Constants.StateID,
                        new ODataPropertyDefaultImpl(Constants.StateID, hashtable.get(Constants.StateID)));
                channelPartnerEntity.getProperties().put(Constants.CityDesc,
                        new ODataPropertyDefaultImpl(Constants.CityDesc, hashtable.get(Constants.CityDesc)));
                channelPartnerEntity.getProperties().put(Constants.CityID,
                        new ODataPropertyDefaultImpl(Constants.CityID, hashtable.get(Constants.CityID)));
                channelPartnerEntity.getProperties().put(Constants.DistrictDesc,
                        new ODataPropertyDefaultImpl(Constants.DistrictDesc, hashtable.get(Constants.DistrictDesc)));
                channelPartnerEntity.getProperties().put(Constants.DistrictID,
                        new ODataPropertyDefaultImpl(Constants.DistrictID, hashtable.get(Constants.DistrictID)));
                channelPartnerEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
            *//*    channelPartnerEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*//*

                channelPartnerEntity.getProperties().put(Constants.StatusID,
                        new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));
                channelPartnerEntity.getProperties().put(Constants.ApprvlStatusID,
                        new ODataPropertyDefaultImpl(Constants.ApprvlStatusID, hashtable.get(Constants.ApprvlStatusID)));

                channelPartnerEntity.getProperties().put(Constants.CPUID,
                        new ODataPropertyDefaultImpl(Constants.CPUID, hashtable.get(Constants.CPUID)));
                channelPartnerEntity.getProperties().put(Constants.WeeklyOff,
                        new ODataPropertyDefaultImpl(Constants.WeeklyOff, hashtable.get(Constants.WeeklyOff)));
                channelPartnerEntity.getProperties().put(Constants.Tax1,
                        new ODataPropertyDefaultImpl(Constants.Tax1, hashtable.get(Constants.Tax1)));
                channelPartnerEntity.getProperties().put(Constants.TaxRegStatus,
                        new ODataPropertyDefaultImpl(Constants.TaxRegStatus, hashtable.get(Constants.TaxRegStatus)));
            } catch (Exception e) {
                e.printStackTrace();
            }*/

            channelPartnerEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
            if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                channelPartnerEntity.setEtag(hashtable.get(Constants.Etag));
            }

           /* try {
                if (hashtable.get(Constants.PartnerMgrGUID) != null && !hashtable.get(Constants.PartnerMgrGUID).equalsIgnoreCase("")) {
                    channelPartnerEntity.getProperties().put(Constants.PartnerMgrGUID,
                            new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.PartnerMgrGUID))));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }*/

            String contentId = "1";
            ODataRequestParamSingle batchItem = new ODataRequestParamSingleDefaultImpl();
            // Create change set
            ODataRequestChangeSet changeSetItem = new ODataRequestChangeSetDefaultImpl();
            batchItem.setResourcePath(hashtable.get(Constants.SetResourcePath));
            batchItem.setMode(ODataRequestParamSingle.Mode.Update);
            batchItem.setContentID(contentId);
            batchItem.setPayload(channelPartnerEntity);

            String cpDMSDivDetgry = Constants.CPDMSDivisions + "?$filter=" + Constants.CPGUID + " eq guid'" + hashtable.get(Constants.CPGUID) + "' ";
            List<ODataEntity> entities = null;

            try {
                entities = OfflineManager.getEntities(cpDMSDivDetgry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }

            if (entities != null && entities.size() > 0) {
                for (ODataEntity cpDmsDivEntity : entities) {
                    cpDmsDivisionEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPDMSDivisionEntity);
                    cpDmsDivisionEntity.setResourcePath(Constants.CPDMSDivisions, Constants.CPDMSDivisions);
                    offlineStore.allocateProperties(cpDmsDivisionEntity, ODataStore.PropMode.Keys);
                    offlineStore.allocateNavigationProperties(cpDmsDivisionEntity);
                    SetResourcePath = "";
                    cpDmsDivisionEntity = getCPDMSDivEntity(cpDMSDivDetgry, hashtable.get(Constants.CPGUID), cpDmsDivEntity, hashtable);
                    if (cpDmsDivisionEntity != null) {
                        ODataRequestParamSingle cpDmsDivBatchItem = new ODataRequestParamSingleDefaultImpl();
                        // Create change set
                        cpDmsDivBatchItem.setResourcePath(SetResourcePath);
                        cpDmsDivBatchItem.setMode(ODataRequestParamSingle.Mode.Update);
                        cpDmsDivBatchItem.setContentID("2");
                        if (hashtable.get(Constants.IsLatLongUpdate).equalsIgnoreCase("")) {
                            cpDmsDivBatchItem.setPayload(cpDmsDivisionEntity);
                        } else {
                            cpDmsDivBatchItem.setPayload(cpDmsDivEntity);
                        }
                        changeSetItem.add(cpDmsDivBatchItem);
                    }
                }
            }


            changeSetItem.add(batchItem);

            ODataRequestParamBatch requestParamBatch = new ODataRequestParamBatchDefaultImpl();
            requestParamBatch.add(changeSetItem);
            try {
                offlineStore.executeRequest(requestParamBatch);
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public static List<ODataEntity> getEntities(String strQry) throws OfflineODataStoreException {

        ODataEntity retailerEntity = null;

        List<ODataEntity> entities = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntity oDataEntity = (ODataEntity) response.getPayload();
                    retailerEntity = oDataEntity;
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        retailerEntity = entity;
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return entities;

    }

    private static ODataEntity getCPDMSDivEntity(String cpDMSDivDetgry, String mCPGUID, ODataEntity cpDmsDivEntity, Hashtable<String, String> hashtable) {
        ODataPropMap oDataProperties = null;
        ODataProperty oDataProperty = null;
        ODataEntity cpDmsDivisionEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPDMSDivisionEntity);

        /*ODataEntity cpDmsDivEntity = null;
        try {
            cpDmsDivEntity = OfflineManager.getRetDetails(cpDMSDivDetgry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }*/


        if (cpDmsDivEntity != null) {
            oDataProperties = cpDmsDivEntity.getProperties();

            Set keySet = oDataProperties.keySet();
            Iterator itr = keySet.iterator();
            while (itr.hasNext()) {
                String key = itr.next().toString();
                try {
                    cpDmsDivisionEntity.getProperties().put(key,
                            new ODataPropertyDefaultImpl(key, oDataProperties.get(key).getValue()));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            try {
                oDataProperty = oDataProperties.get(Constants.CP1GUID);

                cpDmsDivisionEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(mCPGUID.toUpperCase())));

                ODataGuid cpDmsDivGuid = (ODataGuid) oDataProperty.getValue();
                SetResourcePath = Constants.CPDMSDivisions + "(guid'" + cpDmsDivGuid.guidAsString36().toUpperCase() + "')";

                cpDmsDivisionEntity.getProperties().put(Constants.CP1GUID,
                        new ODataPropertyDefaultImpl(Constants.CP1GUID, ODataGuidDefaultImpl.initWithString32(cpDmsDivGuid.guidAsString36().toUpperCase())));
            } catch (Exception e) {
                SetResourcePath = "";
            }
           /* oDataProperty = oDataProperties.get(Constants.PartnerMgrGUID);
            try {
                ODataGuid cpParMgrGuid = (ODataGuid) oDataProperty.getValue();
                cpDmsDivisionEntity.getProperties().put(Constants.PartnerMgrGUID,
                        new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(cpParMgrGuid.guidAsString36().toUpperCase())));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                cpDmsDivisionEntity.getProperties().put(Constants.ParentName,
                        new ODataPropertyDefaultImpl(Constants.ParentName, (String) oDataProperties.get(Constants.ParentName).getValue() != null ? (String) oDataProperties.get(Constants.ParentName).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.PartnerMgrNo,
                        new ODataPropertyDefaultImpl(Constants.PartnerMgrNo, (String) oDataProperties.get(Constants.PartnerMgrNo).getValue() != null ? (String) oDataProperties.get(Constants.PartnerMgrNo).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.CPTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.CPTypeDesc, (String) oDataProperties.get(Constants.CPTypeDesc).getValue() != null ? (String) oDataProperties.get(Constants.CPTypeDesc).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, (String) oDataProperties.get(Constants.CPNo).getValue() != null ? (String) oDataProperties.get(Constants.CPNo).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, (String) oDataProperties.get(Constants.ParentID).getValue() != null ? (String) oDataProperties.get(Constants.ParentID).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.ParentTypeID,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeID, (String) oDataProperties.get(Constants.ParentTypeID).getValue() != null ? (String) oDataProperties.get(Constants.ParentTypeID).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.Name,
                        new ODataPropertyDefaultImpl(Constants.Name, (String) oDataProperties.get(Constants.Name).getValue() != null ?
                                (String) oDataProperties.get(Constants.Name).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.DMSDivision,
                        new ODataPropertyDefaultImpl(Constants.DMSDivision, (String) oDataProperties.get(Constants.DMSDivision).getValue() != null ?
                                (String) oDataProperties.get(Constants.DMSDivision).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.DMSDivisionDesc,
                        new ODataPropertyDefaultImpl(Constants.DMSDivisionDesc, (String) oDataProperties.get(Constants.DMSDivisionDesc).getValue() != null ?
                                (String) oDataProperties.get(Constants.DMSDivisionDesc).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.RouteID,
                        new ODataPropertyDefaultImpl(Constants.RouteID, (String) oDataProperties.get(Constants.RouteID).getValue() != null ?
                                (String) oDataProperties.get(Constants.RouteID).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.RouteDesc,
                        new ODataPropertyDefaultImpl(Constants.RouteDesc, (String) oDataProperties.get(Constants.RouteDesc).getValue() != null ?
                                (String) oDataProperties.get(Constants.RouteDesc).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.CPUID,
                        new ODataPropertyDefaultImpl(Constants.CPUID, (String) oDataProperties.get(Constants.CPUID).getValue() != null ?
                                (String) oDataProperties.get(Constants.CPUID).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.OwnerName,
                        new ODataPropertyDefaultImpl(Constants.OwnerName, (String) oDataProperties.get(Constants.OwnerName).getValue() != null ?
                                (String) oDataProperties.get(Constants.OwnerName).getValue() : ""));

                try {
                    cpDmsDivisionEntity.getProperties().put(Constants.SalesPersonMobileNo,
                            new ODataPropertyDefaultImpl(Constants.SalesPersonMobileNo, (String) oDataProperties.get(Constants.SalesPersonMobileNo).getValue() != null ?
                                    (String) oDataProperties.get(Constants.SalesPersonMobileNo).getValue() : ""));
                } catch (Exception e) {
                    e.printStackTrace();
                }



                if(hashtable.get(Constants.comingFrom).equalsIgnoreCase(Constants.RetailerChange)){
                    try {
                        cpDmsDivisionEntity.getProperties().put(Constants.RetailerProfile,
                                new ODataPropertyDefaultImpl(Constants.RetailerProfile, hashtable.get(Constants.RetailerProfile)));
                        cpDmsDivisionEntity.getProperties().put(Constants.Group4,
                                new ODataPropertyDefaultImpl(Constants.Group4, hashtable.get(Constants.Group4)));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }else{
                    cpDmsDivisionEntity.getProperties().put(Constants.RetailerProfile,
                            new ODataPropertyDefaultImpl(Constants.RetailerProfile, (String) oDataProperties.get(Constants.RetailerProfile).getValue() != null ?
                                    (String) oDataProperties.get(Constants.RetailerProfile).getValue() : ""));
                    cpDmsDivisionEntity.getProperties().put(Constants.Group4,
                            new ODataPropertyDefaultImpl(Constants.Group4, (String) oDataProperties.get(Constants.Group4).getValue() != null ?
                                    (String) oDataProperties.get(Constants.Group4).getValue() : ""));

                }

                cpDmsDivisionEntity.getProperties().put(Constants.Group2,
                        new ODataPropertyDefaultImpl(Constants.Group2, (String) oDataProperties.get(Constants.Group2).getValue() != null ?
                                (String) oDataProperties.get(Constants.Group2).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.Group3,
                        new ODataPropertyDefaultImpl(Constants.Group3, (String) oDataProperties.get(Constants.Group3).getValue() != null ?
                                (String) oDataProperties.get(Constants.Group3).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.Group5,
                        new ODataPropertyDefaultImpl(Constants.Group5, (String) oDataProperties.get(Constants.Group5).getValue() != null ?
                                (String) oDataProperties.get(Constants.Group5).getValue() : ""));
                cpDmsDivisionEntity.getProperties().put(Constants.StatusID,
                        new ODataPropertyDefaultImpl(Constants.StatusID, (String) oDataProperties.get(Constants.StatusID).getValue() != null ?
                                (String) oDataProperties.get(Constants.StatusID).getValue() : ""));
                cpDmsDivisionEntity.getProperties().put(Constants.ApprvlStatusID,
                        new ODataPropertyDefaultImpl(Constants.ApprvlStatusID, (String) oDataProperties.get(Constants.ApprvlStatusID).getValue() != null ?
                                (String) oDataProperties.get(Constants.ApprvlStatusID).getValue() : ""));
                cpDmsDivisionEntity.getProperties().put(Constants.Currency,
                        new ODataPropertyDefaultImpl(Constants.Currency, (String) oDataProperties.get(Constants.Currency).getValue() != null ?
                                (String) oDataProperties.get(Constants.Currency).getValue() : ""));*/
           /* } catch (Exception e) {
                e.printStackTrace();
            }*/

//            try {
               /* oDataProperty = oDataProperties.get(Constants.DiscountPer);
                if (oDataProperty != null) {
                    cpDmsDivisionEntity.getProperties().put(Constants.DiscountPer,
                            new ODataPropertyDefaultImpl(Constants.DiscountPer,oDataProperty.getValue()));
                }*/
               /* oDataProperty = oDataProperties.get(Constants.CreditLimit);
                if (oDataProperty != null) {
                    cpDmsDivisionEntity.getProperties().put(Constants.CreditLimit,
                            new ODataPropertyDefaultImpl(Constants.CreditLimit, oDataProperty.getValue()));
                }

                oDataProperty = oDataProperties.get(Constants.CreditDays);
                if (oDataProperty != null) {
                    cpDmsDivisionEntity.getProperties().put(Constants.CreditDays,
                            new ODataPropertyDefaultImpl(Constants.CreditDays, oDataProperty.getValue()));
                }

                oDataProperty = oDataProperties.get(Constants.CreditBills);
                if (oDataProperty != null) {
                    cpDmsDivisionEntity.getProperties().put(Constants.CreditBills,
                            new ODataPropertyDefaultImpl(Constants.CreditBills, oDataProperty.getValue()));
                }*/
//            } catch (Exception e) {
//                e.printStackTrace();
//            }

            cpDmsDivisionEntity.setResourcePath(SetResourcePath, SetResourcePath);
            if (cpDmsDivEntity.getEtag() != null) {
                cpDmsDivisionEntity.setEtag(cpDmsDivEntity.getEtag());
            }
        } else {
            return null;
        }


        return cpDmsDivisionEntity;
    }

    public static ArrayList<RetailerBean> getBeatListWithAll(String qry) throws OfflineODataStoreException {

        ArrayList<RetailerBean> retailerList = new ArrayList<>();
        RetailerBean retBean = new RetailerBean("");
        retBean.setRouteID("");
        retBean.setRouteDesc(Constants.All);
        retailerList.add(retBean);
        String rchGuidQry = "";
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RouteSchGUID);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();
                        if (!Constants.mSetTodayRouteSch.contains(RschGuid.guidAsString36().toUpperCase())) {
                            if (rchGuidQry.length() == 0)
                                rchGuidQry += " guid'" + RschGuid.guidAsString36().toUpperCase() + "'";
                            else
                                rchGuidQry += " or " + Constants.RouteSchGUID + " eq guid'" + RschGuid.guidAsString36().toUpperCase() + "'";
                        }

                    }
                    if (!TextUtils.isEmpty(rchGuidQry)) {
                        String qryForOthersBeat = Constants.RouteSchedules + "?$filter=(" +
                                Constants.RouteSchGUID + " eq " + rchGuidQry + ") and " + Constants.ApprovalStatus + " eq '03' and StatusID eq '01' &$orderby= Description asc";
                        ArrayList<RetailerBean> alRetailerList = new ArrayList<>();
                        List<RetailerBean> listRetailers = OfflineManager.getOtherBeatList(qryForOthersBeat, false);
                        alRetailerList = (ArrayList<RetailerBean>) listRetailers;
                        retailerList.addAll(alRetailerList);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return retailerList;
    }

    public static void createMerChndisingHeader(Hashtable<String, String> tableHdr, UIListener uiListener,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createMerchndisingHeaderEntity(tableHdr);
            //Send the request to create the new visit in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.MerchReviews,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.MerchReviews,context),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    private static ODataEntity createMerchndisingHeaderEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity headerEntity = null;
        try {
            if (hashtable != null) {
                // CreateOperation the parent Entity
                headerEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.MERCHINDISINGENTITY);
                if (!TextUtils.isEmpty(hashtable.get(Constants.MerchReviewGUID))) {
                    String resourcePath = UtilConstants.getEditResourcePath(Constants.MerchReviews, hashtable.get(Constants.MerchReviewGUID));
                    headerEntity.setResourcePath(resourcePath, resourcePath);
                }

                offlineStore.allocateProperties(headerEntity, ODataStore.PropMode.Keys);

                offlineStore.allocateNavigationProperties(headerEntity);

                headerEntity.getProperties().put(Constants.MerchReviewGUID,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.MerchReviewGUID))));
                headerEntity.getProperties().put(Constants.MerchReviewDate,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewDate, UtilConstants.convertDateFormat(hashtable.get(Constants.MerchReviewDate))));
                headerEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));
                headerEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                headerEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                headerEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
                headerEntity.getProperties().put(Constants.MerchReviewLat,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewLat, hashtable.get(Constants.MerchReviewLat)));
                headerEntity.getProperties().put(Constants.MerchReviewLong,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewLong, hashtable.get(Constants.MerchReviewLong)));
                headerEntity.getProperties().put(Constants.MerchReviewType,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewType, hashtable.get(Constants.MerchReviewType)));
                headerEntity.getProperties().put(Constants.MerchReviewTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewTypeDesc, hashtable.get(Constants.MerchReviewTypeDesc)));

            /*    headerEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/

                headerEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
               /* headerEntity.getProperties().put(Constants.ParentNo,
                        new ODataPropertyDefaultImpl(Constants.ParentNo, hashtable.get(Constants.ParentNo)));*/
                headerEntity.getProperties().put(Constants.ParentName,
                        new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
                headerEntity.getProperties().put(Constants.ParentTypeID,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
                headerEntity.getProperties().put(Constants.ParentTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeDesc, hashtable.get(Constants.ParentTypeDesc)));


                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    headerEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }

                try {
                    if (!hashtable.get(Constants.RouteGUID).equalsIgnoreCase("")) {
                        headerEntity.getProperties().put(Constants.RouteGUID,
                                new ODataPropertyDefaultImpl(Constants.RouteGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.RouteGUID))));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                headerEntity.getProperties().put(Constants.MerchReviewTime,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewTime, hashtable.get(Constants.MerchReviewTime)));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return headerEntity;

    }

    public static void createMerChndisingItem(Hashtable<String, String> tableItem, Hashtable<String, String> tableHdr, UIListener uiListener,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataRequestParamSingle oDataRequestParamSingle = createMerchndisingItemEntity(tableItem, tableHdr);
            //Send the request to create the new visit in the local database
            offlineStore.scheduleRequest(oDataRequestParamSingle, new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.MerchReviewImages,context));
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
    }

    private static ODataRequestParamSingle createMerchndisingItemEntity(Hashtable<String, String> hashTblItm, Hashtable<String, String> hashtable) throws ODataParserException {
//		ODataEntity itemEntity = null;
        ODataRequestParamSingle oDataRequestParamSingle = null;
        try {
            if (hashTblItm != null) {
                // CreateOperation the item Entity
                ODataPayload imagePayload = new ODataUploadMediaDefaultImpl(hashTblItm.get(Constants.ImagePath), hashTblItm.get(Constants.ImageMimeType));
                oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();
                oDataRequestParamSingle.setPayload(imagePayload);
                oDataRequestParamSingle.setMode(ODataRequestParamSingle.Mode.Create);
                oDataRequestParamSingle.setResourcePath(Constants.MerchReviewImages);
                oDataRequestParamSingle.setCustomTag(Constants.MerchReviews + "(guid'" + hashTblItm.get(Constants.MerchReviewGUID) + "')/" + Constants.MerchReviewImages + "");
                // Add headers
                Map<String, String> createHeaders = new HashMap<String, String>();
                createHeaders.put("Content-Type", hashTblItm.get(Constants.ImageMimeType));
                createHeaders.put("SLUG", Constants.MerchImageGUID + ":" + hashTblItm.get(Constants.MerchImageGUID).replace("-", "").toUpperCase() + ","
                        + Constants.MerchReviewGUID + ":" + hashTblItm.get(Constants.MerchReviewGUID).replace("-", "").toUpperCase() + ","
                        + Constants.FileName + ":" + hashTblItm.get(Constants.FileName) + "");

                oDataRequestParamSingle.getCustomHeaders().putAll(createHeaders);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return oDataRequestParamSingle;

    }

    public static ArrayList<MerchandisingBean> getMerchandisingList(Context mContext, String merQry, String getType) throws OfflineODataStoreException {

        ArrayList<MerchandisingBean> alMercReview = new ArrayList<>();
        //Check if the offline oData store is initialized
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(mContext);
        if (offlineStore != null) {
            MerchandisingBean merchReviewBean;
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = null;
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, merQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }

            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();

                    merchReviewBean = new MerchandisingBean();

                    property = properties.get(Constants.MerchReviewType);

                    merchReviewBean.setMerchReviewType((String) property.getValue());

                    property = properties.get(Constants.MerchReviewTypeDesc);
                    merchReviewBean.setMerchReviewTypeDesc((String) property.getValue());

                    property = properties.get(Constants.Remarks);
                    merchReviewBean.setRemarks((String) property.getValue());

                    property = properties.get(Constants.MerchReviewDate);
                    String convertDateFormat = UtilConstants.convertDateIntoDeviceFormat(mContext, (GregorianCalendar) property.getValue(), configDateFormat);
                    merchReviewBean.setMerchReviewDate(convertDateFormat);

                    property = properties.get(Constants.MerchReviewGUID);
                    ODataGuid mMerHeaderGUID = null;
                    try {
                        mMerHeaderGUID = (ODataGuid) property.getValue();
                        merchReviewBean.setMerchReviewGUID(mMerHeaderGUID.guidAsString36());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    merchReviewBean.setMerchReviewImgGUID(getValueByColumnName(Constants.MerchReviewImages
                            + "?$select=" + Constants.MerchImageGUID + " &$filter = " + Constants.MerchReviewGUID
                            + " eq guid'" + mMerHeaderGUID.guidAsString36().toUpperCase() + "'", Constants.MerchImageGUID));

                    merchReviewBean.setDocumentStore(getValueByColumnName(Constants.MerchReviewImages
                            + "?$select=" + Constants.DocumentStore + " &$filter = " + Constants.MerchReviewGUID
                            + " eq guid'" + mMerHeaderGUID.guidAsString36().toUpperCase() + "'", Constants.DocumentStore));
                    merchReviewBean.setEtag(entity.getEtag() != null ? entity.getEtag() : "");

                    if (getType.equalsIgnoreCase(Constants.Device)) {
                        merchReviewBean.setImagePath(Constants.getValueFromDataVault(mMerHeaderGUID.guidAsString36().toUpperCase(),mContext));
                    }

                    if (merchReviewBean.getEtag().equalsIgnoreCase("")) {
                        merchReviewBean.setMediaLink(getMediaLinkByColumn(Constants.MerchReviewImages
                                + "?$select=" + Constants.MerchImageGUID + " &$filter = " + Constants.MerchReviewGUID
                                + " eq guid'" + mMerHeaderGUID.guidAsString36().toUpperCase() + "'"));
                    } else {
                        merchReviewBean.setMediaLink("");
                    }

                    merchReviewBean.setResourcePath(entity.getResourcePath());
                    alMercReview.add(merchReviewBean);
                }
            }
        }
        return alMercReview;

    }

    public static String getMediaLinkByColumn(String retailerQry) throws OfflineODataStoreException {
        String mStrVal = "";
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retailerQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        mStrVal = entity.getMediaLink().toString();
                        break;
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrVal;

    }

    public static byte[] getImageList(String mediaLink) throws OfflineODataStoreException {

        final byte[][] bytes = {null};
        //Check if the offline oData store is initialized
        final boolean[] isDataAvailable = {false};
        if (offlineStore != null) {

            ODataDownloadMediaSyncListener oDataDownloadMediaListener = new ODataDownloadMediaSyncListener() {
                @Override
                public void mediaDownloadServerResponse(ODataDownloadMediaResult oDataDownloadMediaResult) {
                    oDataDownloadMediaResult.getAllHttpHeaders();

                    ODataDownloadMediaResultDefaultImpl oDataDownloadMediaResultDefault = (ODataDownloadMediaResultDefaultImpl) oDataDownloadMediaResult;


                    InputStream is = oDataDownloadMediaResultDefault.getInputStream();
                    byte[] buf = null;
                    try {
                        int len;
                        int size = 100 * 1024;


                        if (is instanceof ByteArrayInputStream) {
                            size = is.available();
                            buf = new byte[size];
                            len = is.read(buf, 0, size);
                        } else {
                            ByteArrayOutputStream bos = new ByteArrayOutputStream();
                            buf = new byte[size];
                            while ((len = is.read(buf, 0, size)) != -1)
                                bos.write(buf, 0, len);
                            buf = bos.toByteArray();


                        }
                    } catch (IOException e) {

                    }
                    isDataAvailable[0] = true;
                    bytes[0] = buf;


                }
            };


            URL mediaURL = null;
            try {
                mediaURL = new URL(mediaLink);
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }

            try {
                offlineStore.executeMediaDownload(mediaURL, oDataDownloadMediaListener);
            } catch (ODataException e) {
                e.printStackTrace();
            }
        }

        while (!isDataAvailable[0]) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        isDataAvailable[0] = false;
        return bytes[0];

    }

    public static ArrayList<CollectionHistoryBean> getCollectionHistoryList(String collectionListQry, Context context) throws OfflineODataStoreException {

        ArrayList<CollectionHistoryBean> alCollHistory = new ArrayList<CollectionHistoryBean>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(context);
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CollectionHistoryBean collectionHistoryBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(collectionListQry);
                //Send a request to read the Collections from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        collectionHistoryBean = new CollectionHistoryBean();

                        property = properties.get(Constants.InstrumentNo);
                        collectionHistoryBean.setInstrumentNo((String) property.getValue());

                        property = properties.get(Constants.BranchName);
                        collectionHistoryBean.setBranchName((String) property.getValue());
                        property = properties.get(Constants.BankID);
                        collectionHistoryBean.setBankID((String) property.getValue());
                        property = properties.get(Constants.BankName);
                        collectionHistoryBean.setBankName((String) property.getValue());
                        property = properties.get(Constants.Remarks);
                        collectionHistoryBean.setRemarks((String) property.getValue());

                        property = properties.get(Constants.InstrumentDate);
                        if (property != null) {
                            try {
                                String convertDateFormat = UtilConstants.convertDateIntoDeviceFormat(context, (GregorianCalendar) property.getValue(), configDateFormat);
                                collectionHistoryBean.setInstrumentDate(convertDateFormat);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }

                        property = properties.get(Constants.FIPDocNo);
                        collectionHistoryBean.setFIPDocNo((String) property.getValue());
                        property = properties.get(Constants.FIPDate);
//                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        String convertDateFormat2 = UtilConstants.convertDateIntoDeviceFormat(context, (GregorianCalendar) property.getValue(), configDateFormat);
                        collectionHistoryBean.setFIPDate(convertDateFormat2);
                        property = properties.get(Constants.Amount);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            collectionHistoryBean.setAmount(mStrAmount.toString());
                        }
                        property = properties.get(Constants.Currency);
                        collectionHistoryBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.PaymentModeDesc);
                        collectionHistoryBean.setPaymentModeDesc((String) property.getValue());
                        property = properties.get(Constants.PaymentModeID);
                        collectionHistoryBean.setPaymentModeID((String) property.getValue());


                        property = properties.get(Constants.FIPGUID);
                        ODataGuid mFIPGUID = null;
                        try {
                            mFIPGUID = (ODataGuid) property.getValue();
                            collectionHistoryBean.setFIPGUID("guid'" + mFIPGUID.guidAsString36().toUpperCase() + "'");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.FIPDate);
                        String convertFIPDate = "";
                        if (property != null) {
                            convertFIPDate = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                        }

                        if (!TextUtils.isEmpty(convertFIPDate)) {
                            try {
                                int dueDays = ConstantsUtils.getDueDays(convertFIPDate);
                                if (dueDays < 0) {
                                    collectionHistoryBean.setDueDays(String.valueOf(dueDays).replace("-", "") + "");
                                } else {
                                    collectionHistoryBean.setDueDays(String.valueOf(dueDays));
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        String ReferenceTypeDesc = getValueByColumnName(Constants.FinancialPostingItemDetails +
                                "?$select=" + Constants.ReferenceTypeDesc + " &$filter = " +
                                Constants.FIPGUID + " eq guid'" + mFIPGUID.guidAsString36().toUpperCase() + "'", Constants.ReferenceTypeDesc);
                        String ReferenceTypeID = getValueByColumnName(Constants.FinancialPostingItemDetails +
                                "?$select=" + Constants.ReferenceTypeID + " &$filter = " +
                                Constants.FIPGUID + " eq guid'" + mFIPGUID.guidAsString36().toUpperCase() + "'", Constants.ReferenceTypeID);

                        collectionHistoryBean.setReferenceTypeDesc(ReferenceTypeDesc);
                        collectionHistoryBean.setReferenceTypeID(ReferenceTypeID);
                        collectionHistoryBean.setDeviceStatus("");
                        collectionHistoryBean.setDeviceNo("");
                        alCollHistory.add(collectionHistoryBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alCollHistory != null && alCollHistory.size() > 0) {
            Collections.sort(alCollHistory, new Comparator<CollectionHistoryBean>() {
                public int compare(CollectionHistoryBean one, CollectionHistoryBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getFIPDocNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getFIPDocNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getFIPDocNo().compareTo(one.getFIPDocNo());
                    }
                }
            });

        }

        return alCollHistory;
    }

    public static ArrayList<CollectionHistoryBean> getCollectionItemDetails(Activity mContext, String collectionItemsQry) throws OfflineODataStoreException {

        ArrayList<CollectionHistoryBean> collectionItemsList = new ArrayList<CollectionHistoryBean>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(mContext);
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CollectionHistoryBean collectionHistoryBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(collectionItemsQry);
                //Send a request to read the Collection Items from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        collectionHistoryBean = new CollectionHistoryBean();

                        property = properties.get(Constants.ReferenceID);

                        String RefId = (String) property.getValue() != null ? (String) property.getValue() : "";

                        if (RefId.length() > 31) {
                            RefId = RefId.substring(0, 8) + "-" + RefId.substring(8, 12) + "-" + RefId.substring(12, 16) + "-" + RefId.substring(16, 20) + "-" + RefId.substring(20);
                            collectionHistoryBean.setInvoiceNo(getInvoiceNoFromRefId(Constants.SSINVOICES + "?$filter=" + Constants.InvoiceGUID + " eq guid'" + RefId + "'"));
                        } else {
                            collectionHistoryBean.setInvoiceNo((String) property.getValue());
                        }

                        property = properties.get(Constants.FIPItemNo);

                        collectionHistoryBean.setFIPItemNo((String) property.getValue());

                        property = properties.get(Constants.ReferenceTypeID);

                        collectionHistoryBean.setReferenceTypeID((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        collectionHistoryBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.InstrumentNo);
                        collectionHistoryBean.setInstrumentNo((String) property.getValue());

                        property = properties.get(Constants.PaymetModeDesc);
                        collectionHistoryBean.setPaymentModeDesc((String) property.getValue());

                        property = properties.get(Constants.ReferenceDate);
                        try {
                            if (property != null) {
                                String convertDateFormat = UtilConstants.convertDateIntoDeviceFormat(mContext, (GregorianCalendar) property.getValue(), configDateFormat);
                                collectionHistoryBean.setInvoiceDate(convertDateFormat);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.Amount);

                        BigDecimal mDoubleAmount = new BigDecimal("0.0"), mDoubleBalAmount = new BigDecimal("0.0");
                        if (property != null) {
                            mDoubleAmount = (BigDecimal) property.getValue();
//                            mDoubleAmount = mStrAmount.doubleValue();
                            collectionHistoryBean.setInvoiceAmount(mDoubleAmount.toString());
                        }

                        property = properties.get(Constants.BalanceAmount);

                        if (property != null) {
                            mDoubleBalAmount = (BigDecimal) property.getValue();
//                            mDoubleBalAmount = mStrAmount.doubleValue();
                            if (collectionHistoryBean.getReferenceTypeID().equalsIgnoreCase(Constants.str_01)) {
                                collectionHistoryBean.setInvoiceBalanceAmount(mDoubleBalAmount.toString());
                            } else {
                                collectionHistoryBean.setInvoiceBalanceAmount("0.0");
                            }
                        }
                        property = properties.get(Constants.CashDiscount);
                        BigDecimal mDiscountAmt = new BigDecimal("0");
                        if (property != null) {
                            mDiscountAmt = (BigDecimal) property.getValue();
                        }

//                        property = properties.get(Constants.ClearedAmount);
                        property = properties.get(Constants.FIPAmount);
                        BigDecimal mStrCollAmt = null;
                        if (property != null) {
                            mStrCollAmt = (BigDecimal) property.getValue();
//                            collectionHistoryBean.setInvoiceClearedAmount(String.valueOf(mStrCollAmt.add(mDiscountAmt)));
                            collectionHistoryBean.setInvoiceClearedAmount(String.valueOf(mStrCollAmt));
                        }

                        property = properties.get(Constants.CashDiscountPercentage);
                        BigDecimal mDiscountPer = new BigDecimal("0");
                        if (property != null) {
                            mDiscountPer = (BigDecimal) property.getValue();
                        }
                        collectionHistoryBean.setCashDiscountPercentage(String.valueOf(mDiscountPer));

                        collectionHistoryBean.setCashDiscount(String.valueOf(mDiscountAmt));
                        property = properties.get(Constants.ClearedAmount);
                        BigDecimal mStrClearedAmount = new BigDecimal("0.0");
                        if (property != null) {
                            mStrClearedAmount = (BigDecimal) property.getValue();
                        }/*

                        double mDouTotalPaidAmt = 0;
                        try {
//                            mDouTotalPaidAmt = mDoubleAmount - mDoubleBalAmount;
                            mDouTotalPaidAmt = mStrClearedAmount.doubleValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }*/
                        collectionHistoryBean.setTotalPaidAmount(String.valueOf(mStrClearedAmount));
                        BigDecimal mDouPaidAmt = new BigDecimal("0.0");
                        BigDecimal mCollectedAmt = mStrCollAmt.add(mDiscountAmt);
                        if (collectionHistoryBean.getReferenceTypeID().equalsIgnoreCase(Constants.str_01)) {
                            try {
                                mDouPaidAmt = mDoubleAmount.subtract(mDoubleBalAmount).subtract(mCollectedAmt);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        } else {
                            mDouPaidAmt = new BigDecimal("0.0");
                        }
                        BigDecimal payable = mDoubleAmount.subtract(mDouPaidAmt);
                        collectionHistoryBean.setPaidAmt(String.valueOf(mDouPaidAmt));
                        collectionHistoryBean.setPayable(String.valueOf(payable));
                        collectionHistoryBean.setNetPayable(String.valueOf(payable.subtract(mDiscountAmt)));


                        collectionHistoryBean.setIsDetailEnabled(false);
                        collectionItemsList.add(collectionHistoryBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return collectionItemsList;

    }

    public static String getInvoiceNoFromRefId(String invNoByRefIdQry) throws OfflineODataStoreException {
        String invNo = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(invNoByRefIdQry);
                //Send a request to read the invoice no from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        invNo = (String) (properties.get(Constants.InvoiceNo)).getValue() != null ?
                                (String) (properties.get(Constants.InvoiceNo)).getValue() : "";
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return invNo;
    }

    @SuppressLint("NewApi")
    public static ArrayList<OutstandingBean> getOutstandingList(String schemeQry, Context context, String status, String mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<OutstandingBean> alOutstanding = new ArrayList<OutstandingBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            OutstandingBean outstandingBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                if (!status.equalsIgnoreCase("5")) {
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(ODataRequestParamSingle.Mode.Read);
                    request.setResourcePath(schemeQry);
                    //Send a request to read the Outstanding invoices from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);
                    //Check if the response is an error
                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        //Retrieve the data from the response
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            outstandingBean = new OutstandingBean();

                            property = properties.get(Constants.InvoiceHisNo);
                            outstandingBean.setInvoiceNo((String) property.getValue());
                            property = properties.get(Constants.InvoiceTypeID);
                            outstandingBean.setInvoiceTypeID((String) property.getValue());
                            property = properties.get(Constants.InvoiceTypeDesc);
                            outstandingBean.setInvoiceTypeDesc((String) property.getValue());
                            property = properties.get(Constants.InvoiceDate);
                            String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                            outstandingBean.setInvoiceDate(convertDateFormat);
                            property = properties.get(Constants.NetAmount);
                            BigDecimal netAmount = new BigDecimal("0.0"), collamt = new BigDecimal("0.0"), devcollamt = new BigDecimal("0.0");
                            if (property != null) {


                                netAmount = (BigDecimal) property.getValue();
//                                netAmount = mStrAmount.doubleValue();
                                outstandingBean.setInvoiceAmount(netAmount.toString());
                            }

                            property = properties.get(Constants.CollectionAmount);

                            if (property != null) {


                                collamt = (BigDecimal) property.getValue();
//                                collamt = mStrAmount.doubleValue();
                                outstandingBean.setCollectionAmount(collamt.toString());
                            }
                            property = properties.get(Constants.PaymentStatusID);
                            outstandingBean.setInvoiceStatus((String) property.getValue());
                            property = properties.get(Constants.StatusID);
                            outstandingBean.setDueDateStatus((String) property.getValue());

                            property = properties.get(Constants.Currency);
                            outstandingBean.setCurrency((String) property.getValue());

                            property = properties.get(Constants.InvoiceGUID);
                            String mStrInvoiceGUID32 = "";
                            try {
                                ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                                outstandingBean.setInvoiceGuid(mInvoiceGUID.guidAsString36());
                                mStrInvoiceGUID32 = mInvoiceGUID.guidAsString32().toUpperCase();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            property = properties.get(Constants.SoldToID);
                            String soldTOID = (String) property.getValue();


                            try {
                                devcollamt = getDeviceCollAmt(context, soldTOID, mStrInvoiceGUID32);
                                outstandingBean.setDevCollAmount(devcollamt + "");
                            } catch (Exception e) {
                                outstandingBean.setDevCollAmount("0.0");
                            }

                            outstandingBean.setDeviceNo("");
                            outstandingBean.setDeviceStatus("");


                            BigDecimal outAmt = netAmount.subtract(collamt.add(devcollamt));
                            BigDecimal collAmount = collamt.subtract(devcollamt);
                            outstandingBean.setInvoiceBalanceAmount(String.valueOf(outAmt));
                            outstandingBean.setCollectionAmount(String.valueOf(collAmount));
                            property = properties.get(Constants.InvoiceDate);
                            String convertFIPDate = "";
                            if (property != null) {
                                convertFIPDate = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                            }

                            if (!TextUtils.isEmpty(convertFIPDate)) {
                                try {
                                    int dueDays = ConstantsUtils.getDueDays(convertFIPDate);
                                    if (dueDays < 0) {
                                        outstandingBean.setDueDays(String.valueOf(dueDays).replace("-", "") + "");
                                    } else {
                                        outstandingBean.setDueDays(String.valueOf(dueDays));
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }

                            if (outAmt.compareTo(netAmount) != -1) {//outAmt >= netAmount
                                alOutstanding.add(outstandingBean);

                            } else if (outAmt.compareTo(new BigDecimal("0")) != 1) {//outAmt <= 0


                            } else if (outAmt.compareTo(new BigDecimal("0")) == 1 && outAmt.compareTo(netAmount) == -1) {//outAmt > 0 && outAmt < netAmount
                                alOutstanding.add(outstandingBean);

                            }
                        }
                    } else {
                        throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alOutstanding != null && alOutstanding.size() > 0) {
            Collections.sort(alOutstanding, new Comparator<OutstandingBean>() {
                public int compare(OutstandingBean one, OutstandingBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
                    }
                }
            });

        }
        return alOutstanding;
    }

    public static BigDecimal getDeviceCollAmt(Context context, String cpNO) {

        BigDecimal mDoubleDevCollAmout = new BigDecimal(0.0);

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.FinancialPostings, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.FinancialPostings)
                                && fetchJsonHeaderObject.getString(Constants.CPNo).equalsIgnoreCase(cpNO)
                                && fetchJsonHeaderObject.getString(Constants.FIPDocType1).equalsIgnoreCase(Constants.str_01)) {
                            mDoubleDevCollAmout = mDoubleDevCollAmout.add(new BigDecimal(fetchJsonHeaderObject.getString(Constants.Amount)));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevCollAmout;
    }

    public static ArrayList<InvoiceBean> getInvoices(List<ODataEntity> entities, String mStrBundleCPGUID, String mStrBundleRetID, Context context) throws OfflineODataStoreException {

        ArrayList<InvoiceBean> invoiceList = new ArrayList<InvoiceBean>();
        InvoiceBean invoiceBean;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {

                        invoiceBean = new InvoiceBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ShipToName);
                        property = properties.get(Constants.InvoiceNo);
                        String invNo = (String) property.getValue();
                        invoiceBean.setInvoiceNo(invNo);

                        property = properties.get(Constants.Currency);
                        invoiceBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.InvoiceGUID);
                        String mStrInvGuid = "";

                        try {
                            ODataGuid mInvGUID = (ODataGuid) property.getValue();
                            mStrInvGuid = mInvGUID.guidAsString32();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        invoiceBean.setInvoiceGUID(mStrInvGuid);

                        property = properties.get(Constants.NetAmount);
                        String invAmtStr = "0";
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            invAmtStr = mStrAmount.toString();
                        }


                        property = properties.get(Constants.CollectionAmount);
                        String collAmtStr = "0";
                        if (property != null) {
                            try {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                collAmtStr = mStrAmount.toString();
                            } catch (Exception e) {
                                collAmtStr = "0";
                            }
                        }

//						String mStrCollAmount= getInvCollectedAmount(Constants.FinancialPostings
//								+ "?$filter=" + Constants.CPNo + " eq '" + mStrBundleRetID + "' ",mStrInvGuid.toUpperCase());
                        String mStrPendingAmount = "0";
                        BigDecimal mPaidAmount = new BigDecimal("0.0");
                        try {
                            mPaidAmount = new BigDecimal(collAmtStr).add(getDeviceCollAmt(context, mStrBundleRetID, mStrInvGuid.toUpperCase()));
                            //TODO logic changed 22092016 (column name is miss matched retilerNo is name property)
                            BigDecimal doublePenAmt = new BigDecimal(invAmtStr).subtract(mPaidAmount);
                            mStrPendingAmount = String.valueOf(doublePenAmt);
                        } catch (NumberFormatException e) {
                            mStrPendingAmount = "0";
                            e.printStackTrace();
                        }

                        invoiceBean.setInvoiceOutstanding(String.valueOf(ConstantsUtils.decimalRoundOff(new BigDecimal(mStrPendingAmount + ""), 2)));
                        invoiceBean.setItemSelected(false);
                        invoiceBean.setInputInvAmount("0");
                        invoiceBean.setInvoiceAmount(invAmtStr);
                        invoiceBean.setDeviceInvStatus("");
                        property = properties.get(Constants.InvoiceDate);
                        String invDate = "";
                        if (property != null) {
                            invDate = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        } else {
                            invDate = "";
                        }

                        invoiceBean.setInvoiceDate(invDate);

                        property = properties.get(Constants.InvoiceDate);
                        String convertDate = "";
                        if (property != null) {
                            convertDate = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                        }

                        if (!TextUtils.isEmpty(convertDate)) {
                            try {
                                int dueDays = ConstantsUtils.getDueDays(convertDate);
                                if (dueDays < 0) {
                                    invoiceBean.setDueDays(String.valueOf(dueDays).replace("-", "") + "");
                                } else {
                                    invoiceBean.setDueDays(String.valueOf(dueDays));
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }


                        invoiceBean.setCollectionAmount(collAmtStr);


                        invoiceBean.setPaidAmount(String.valueOf(mPaidAmount));
                        if (Double.parseDouble(mStrPendingAmount) > 0) {
                            invoiceList.add(invoiceBean);
                        }
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (invoiceList != null && invoiceList.size() > 0) {
            Collections.sort(invoiceList, new Comparator<InvoiceBean>() {
                public int compare(InvoiceBean one, InvoiceBean other) {
                    Integer i1 = null;
                    Integer i2 = null;
                    try {
                        i1 = Integer.parseInt(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = Integer.parseInt(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getInvoiceNo().compareTo(other.getInvoiceNo());
                    }
                }
            });
        }

        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.InvList, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SSInvoice) && fetchJsonHeaderObject.getString(Constants.SoldToID).equalsIgnoreCase(mStrBundleRetID)) {
                        invoiceBean = new InvoiceBean();
                        invoiceBean.setInvoiceNo(fetchJsonHeaderObject.getString(Constants.InvoiceNo) != null ? fetchJsonHeaderObject.getString(Constants.InvoiceNo) : "");
                        invoiceBean.setInvoiceGUID(fetchJsonHeaderObject.getString(Constants.InvoiceGUID));
                        invoiceBean.setInvoiceAmount(fetchJsonHeaderObject.getString(Constants.NetAmount));
                        String mStrPendingAmount = "0";
                        try {
                            BigDecimal doublePenAmt = new BigDecimal(fetchJsonHeaderObject.getString(Constants.NetAmount)).subtract(getDeviceCollAmt(context, fetchJsonHeaderObject.getString(Constants.SoldToID),
                                    fetchJsonHeaderObject.getString(Constants.InvoiceGUID).replace("-", "").toUpperCase()));
                            mStrPendingAmount = String.valueOf(doublePenAmt);
                        } catch (NumberFormatException e) {
                            mStrPendingAmount = "0";
                            e.printStackTrace();
                        }
                        invoiceBean.setInvoiceOutstanding(mStrPendingAmount);
                        invoiceBean.setInputInvAmount("0");
                        invoiceBean.setDeviceInvStatus(Constants.X);
                        invoiceBean.setInvoiceDate(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.optString(Constants.InvoiceDate)));
                        if (Double.parseDouble(mStrPendingAmount) > 0) {
                            invoiceList.add(invoiceBean);
                        }
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }

        return invoiceList;

    }

    public static double getAdvnceAmtFromCP(String mCPQry, String mStrOpenAdvanceAmt) {
        double mDouAdvAmtFromCP = 0.0;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = null;
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mCPQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            try {
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(mStrOpenAdvanceAmt);
                        try {
                            BigDecimal mBigDecVal = (BigDecimal) property.getValue();
                            mDouAdvAmtFromCP = mBigDecVal.doubleValue();
                        } catch (Exception e) {
                            mDouAdvAmtFromCP = 0.0;
                        }

                    }
                }
            } catch (Exception e) {
                mDouAdvAmtFromCP = 0.0;
            }

        }
        return mDouAdvAmtFromCP;
    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceAdvAmtOrAdjustAmt(Context context, String cpNO, String mColRefTypeID) {

        double mDoubleDevCollAmout = 0.0;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.FinancialPostings, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.FinancialPostings)
                                && fetchJsonHeaderObject.getString(Constants.CPNo).equalsIgnoreCase(cpNO)
                                && fetchJsonHeaderObject.getString(Constants.FIPDocType).equalsIgnoreCase(mColRefTypeID)) {
                            mDoubleDevCollAmout = mDoubleDevCollAmout + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.Amount));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevCollAmout;
    }

    public static ArrayList<CollectionHistoryBean> getDevCollHisList(Context context, String mStrCpGuid) throws OfflineODataStoreException {
        CollectionHistoryBean collectionHistoryBean;
        ArrayList<CollectionHistoryBean> alCollHistory = new ArrayList<CollectionHistoryBean>();
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(context);
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.FinancialPostings, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.FinancialPostings)
                            && fetchJsonHeaderObject.getString(Constants.CPGUID).equalsIgnoreCase(Constants.convertStrGUID32to36(mStrCpGuid.toUpperCase()))) {
                        try {
                            collectionHistoryBean = new CollectionHistoryBean();
                            collectionHistoryBean.setDeviceStatus(Constants.X);
                            collectionHistoryBean.setDeviceNo(deviceNo);
                            collectionHistoryBean.setFIPDocNo(fetchJsonHeaderObject.getString(Constants.FIPDocNo) != null ? fetchJsonHeaderObject.getString(Constants.FIPDocNo) : "");

                            collectionHistoryBean.setInstrumentNo(fetchJsonHeaderObject.getString(Constants.InstrumentNo));
                            String mFipDate = "";
                            if (fetchJsonHeaderObject.getString(Constants.FIPDate) != null && !fetchJsonHeaderObject.getString(Constants.FIPDate).equalsIgnoreCase("")) {
                                mFipDate = UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.getString(Constants.FIPDate));
                                String convertDateFormat2 = UtilConstants.convertDateIntoDeviceFormat(context, mFipDate, configDateFormat);
                                collectionHistoryBean.setFIPDate(convertDateFormat2);
                            } else {
                                collectionHistoryBean.setFIPDate("");
                            }

                            String convertFIPDate = "";

                            if (!TextUtils.isEmpty(mFipDate)) {
                                convertFIPDate = ConstantsUtils.convertDateIntoDisplayFormat(mFipDate);
                            } else {
                                convertFIPDate = "";
                            }

                            if (!TextUtils.isEmpty(convertFIPDate)) {
                                try {
                                    int dueDays = ConstantsUtils.getDueDays(convertFIPDate);
                                    if (dueDays < 0) {
                                        collectionHistoryBean.setDueDays(String.valueOf(dueDays).replace("-", "") + "");
                                    } else {
                                        collectionHistoryBean.setDueDays(String.valueOf(dueDays));
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }

                            collectionHistoryBean.setAmount(fetchJsonHeaderObject.getString(Constants.Amount));
                            collectionHistoryBean.setCurrency(fetchJsonHeaderObject.getString(Constants.Currency));
                            collectionHistoryBean.setFIPGUID(fetchJsonHeaderObject.getString(Constants.FIPGUID));
                            collectionHistoryBean.setPaymentModeID(fetchJsonHeaderObject.getString(Constants.PaymentModeID));
                            collectionHistoryBean.setPaymentModeDesc(fetchJsonHeaderObject.getString(Constants.PaymentModeDesc));
                            collectionHistoryBean.setReferenceTypeDesc(fetchJsonHeaderObject.getString(Constants.ReferenceTypeDesc));
                            collectionHistoryBean.setReferenceTypeID(fetchJsonHeaderObject.getString(Constants.ReferenceTypeID));
                            collectionHistoryBean.setIsDetailEnabled(false);
                            collectionHistoryBean.setBankID(fetchJsonHeaderObject.getString(Constants.BankID));
                            collectionHistoryBean.setBankName(fetchJsonHeaderObject.getString(Constants.BankName));
                            collectionHistoryBean.setRemarks(fetchJsonHeaderObject.getString(Constants.Remarks));
                            collectionHistoryBean.setBranchName(fetchJsonHeaderObject.getString(Constants.BranchName));
                            if (fetchJsonHeaderObject.getString(Constants.InstrumentDate) != null && !TextUtils.isEmpty(fetchJsonHeaderObject.getString(Constants.InstrumentDate))) {
                                String instDate = UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.getString(Constants.FIPDate));
                                String convertDateFormat = UtilConstants.convertDateIntoDeviceFormat(context, instDate, configDateFormat);
                                collectionHistoryBean.setInstrumentDate(convertDateFormat);
                            }
                            alCollHistory.add(collectionHistoryBean);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return alCollHistory;

    }

    public static ArrayList<CollectionHistoryBean> getCollDetailsListFromDataValt(Activity mContext, String mDeviceNo) throws OfflineODataStoreException {
        ArrayList<CollectionHistoryBean> alCollHisDetails = new ArrayList<>();
        String store = "";
        ArrayList<HashMap<String, String>> arrtable;
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(mContext);
        try {
            store = ConstantsUtils.getFromDataVault(mDeviceNo,mContext);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        try {
            JSONObject fetchJsonHeaderObject = new JSONObject(store);
            String itemsString = fetchJsonHeaderObject.getString(Constants.ITEM_TXT);
            String fipDocType = fetchJsonHeaderObject.getString(Constants.FIPDocType);
            String refTypeID = fetchJsonHeaderObject.getString(Constants.ReferenceTypeID);
            String fipDocDate = fetchJsonHeaderObject.getString(Constants.FIPDate);
            CollectionHistoryBean collHisBean;
            arrtable = UtilConstants.convertToArrayListMap(itemsString);
            for (int i = 0; i < arrtable.size(); i++) {
                HashMap<String, String> singleRow = arrtable.get(i);

                collHisBean = new CollectionHistoryBean();
                collHisBean.setFIPItemNo("" + (i + 1));
                collHisBean.setCurrency(singleRow.get(Constants.Currency));
                collHisBean.setInvoiceDate(UtilConstants.convertDateIntoDeviceFormat(mContext, UtilConstants.getConvetDDMMYYYYY(fipDocDate), configDateFormat));
                if (refTypeID.equalsIgnoreCase(Constants.str_01)) {
                    collHisBean.setInvoiceNo(singleRow.get(Constants.InvoiceNo));
                    collHisBean.setInvoiceAmount(singleRow.get(Constants.Amount));
                    collHisBean.setInvoiceClearedAmount(singleRow.get(Constants.FIPAmount));
                    BigDecimal balanceAmout = new BigDecimal("0"), mDouTotBalAmt = new BigDecimal("0"), mDouPaidAmt = new BigDecimal("0"), payableAmt = new BigDecimal("0");
                    try {
                        balanceAmout = new BigDecimal(singleRow.get(Constants.OutstandingAmt)).subtract(new BigDecimal(singleRow.get(Constants.FIPAmount)));
                        mDouTotBalAmt = new BigDecimal(singleRow.get(Constants.Amount)).subtract(balanceAmout);
                    } catch (NumberFormatException e) {

                        e.printStackTrace();
                    }


                    if (refTypeID.equalsIgnoreCase(Constants.str_01)) {
                        try {
                            mDouPaidAmt = new BigDecimal(singleRow.get(Constants.Amount)).subtract(balanceAmout).subtract(new BigDecimal(singleRow.get(Constants.FIPAmount)));
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else {
                        mDouPaidAmt = new BigDecimal("0");
                    }
                    try {
                        payableAmt = new BigDecimal(singleRow.get(Constants.Amount)).subtract(mDouPaidAmt);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    BigDecimal cashDiscound = new BigDecimal("0");
                    BigDecimal netPayable = new BigDecimal("0");

                    try {
                        if (singleRow.get(Constants.CashDiscount) != null && !TextUtils.isEmpty(singleRow.get(Constants.CashDiscount))) {
                            cashDiscound = new BigDecimal(singleRow.get(Constants.CashDiscount));
                            balanceAmout = balanceAmout.subtract(cashDiscound);
                        }
                        netPayable = new BigDecimal(singleRow.get(Constants.FIPAmount));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    collHisBean.setPaidAmt(mDouPaidAmt + "");
                    if (singleRow.get(Constants.CashDiscountPercentage) != null && !TextUtils.isEmpty(singleRow.get(Constants.CashDiscountPercentage)))
                        collHisBean.setCashDiscountPercentage(singleRow.get(Constants.CashDiscountPercentage));
                    else
                        collHisBean.setCashDiscountPercentage("0");
                    if (singleRow.get(Constants.CashDiscount) != null)
                        collHisBean.setCashDiscount(singleRow.get(Constants.CashDiscount));

                    collHisBean.setTotalPaidAmount(mDouTotBalAmt + "");
                    collHisBean.setInvoiceBalanceAmount(balanceAmout + "");
                    collHisBean.setPayable(String.valueOf(payableAmt));
                    collHisBean.setNetPayable(String.valueOf(netPayable));
                    collHisBean.setIsDetailEnabled(false);
                } else {
                    collHisBean.setInvoiceNo("");
                    collHisBean.setInvoiceAmount("");
                    collHisBean.setInvoiceClearedAmount(singleRow.get(Constants.FIPAmount));
                    collHisBean.setInvoiceBalanceAmount("");
                    collHisBean.setTotalPaidAmount("");
                    collHisBean.setPayable("");
                    collHisBean.setNetPayable("");
                    collHisBean.setIsDetailEnabled(false);
                }
                collHisBean.setInstrumentNo(singleRow.get(Constants.InstrumentNo));
                collHisBean.setPaymentModeDesc(singleRow.get(Constants.PaymetModeDesc));
                collHisBean.setIsDetailEnabled(false);
                collHisBean.setReferenceTypeID(refTypeID);
                alCollHisDetails.add(collHisBean);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return alCollHisDetails;

    }

    public static ArrayList<FeedbackBean> getFeedBackList(String feedbackListQry, Context mContext) throws OfflineODataStoreException {

        ArrayList<FeedbackBean> alFeedback = new ArrayList<FeedbackBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            FeedbackBean feedBackBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(mContext);
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(feedbackListQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        feedBackBean = new FeedbackBean();
                        property = properties.get(Constants.FeebackGUID);
                        try {
                            ODataGuid mFeedbackGuid = (ODataGuid) property.getValue();
                            feedBackBean.setFeebackGUID(mFeedbackGuid.guidAsString36());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.FeedbackNo);
                        feedBackBean.setFeedbackNo((String) property.getValue());

                        property = properties.get(Constants.FeedbackType);
                        feedBackBean.setFeedbackType((String) property.getValue());

                        property = properties.get(Constants.FeedbackTypeDesc);
                        feedBackBean.setFeedbackTypeDesc((String) property.getValue());

                        property = properties.get(Constants.Remarks);
                        feedBackBean.setRemarks((String) property.getValue());

                        property = properties.get(Constants.FeedbackDate);
                        feedBackBean.setFeedbackDate(UtilConstants.convertDateIntoDeviceFormat(mContext, (GregorianCalendar) property.getValue(), configDateFormat));
                        alFeedback.add(feedBackBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return alFeedback;

    }

    public static ArrayList<FeedbackBean> getDeviceFeedBackList(Context context, String mStrCPGUID,String parentId) throws OfflineODataStoreException {

        ArrayList<FeedbackBean> alFeedback = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            FeedbackBean feedBackBean;
            try {
                String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(context);
                Set<String> set = new HashSet<>();
                SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
                set = sharedPreferences.getStringSet(Constants.Feedbacks, null);
                if (set != null && !set.isEmpty()) {
                    Iterator itr = set.iterator();
                    while (itr.hasNext()) {
                        String store = null, deviceNo = "";
                        try {
                            deviceNo = itr.next().toString();
                            store = ConstantsUtils.getFromDataVault(deviceNo,context);
                        } catch (Throwable e) {
                            e.printStackTrace();
                        }
                        try {
                            JSONObject fetchJsonHeaderObject = new JSONObject(store);
                            if (fetchJsonHeaderObject.getString(Constants.entityType).equalsIgnoreCase(Constants.Feedbacks)
                                    && fetchJsonHeaderObject.getString(Constants.CPGUID).equalsIgnoreCase(mStrCPGUID)/*&& fetchJsonHeaderObject.getString(Constants.ParentID).equalsIgnoreCase(parentId)*/) {
                                feedBackBean = new FeedbackBean();
                                feedBackBean.setDeviceStatus("X");
                                feedBackBean.setDeviceNo(deviceNo);
                                feedBackBean.setFeedbackNo(fetchJsonHeaderObject.getString(Constants.FeedbackNo) != null
                                        ? fetchJsonHeaderObject.getString(Constants.FeedbackNo) : "");

                                feedBackBean.setFeedbackType(fetchJsonHeaderObject.getString(Constants.FeedbackType));
                                feedBackBean.setFeedbackTypeDesc(fetchJsonHeaderObject.getString(Constants.FeedbackTypeDesc));
                                feedBackBean.setBTSID(fetchJsonHeaderObject.optString(Constants.BTSID));
                                feedBackBean.setLocation1(fetchJsonHeaderObject.optString(Constants.Location1));
                                feedBackBean.setFeebackGUID(fetchJsonHeaderObject.optString(Constants.FeebackGUID));

                                feedBackBean.setFeedbackDate(UtilConstants.convertDateIntoDeviceFormat(context, UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.optString(Constants.FeedbackDate)), configDateFormat));
                                feedBackBean.setRemarks(fetchJsonHeaderObject.optString(Constants.Remarks));
                                alFeedback.add(feedBackBean);
                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return alFeedback;

    }

    public static ArrayList<DocumentsBean> getDocuments(Context mContext, String docQuery) throws OfflineODataStoreException {
        ArrayList<DocumentsBean> documentsList = new ArrayList<>();
        if (offlineStore != null) {
            DocumentsBean documentsBean;
            ODataProperty oDataProperty;
            ODataPropMap properties;
            String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(mContext);
            try {
                //Define the resource path
                ODataRequestParamSingle oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();
                oDataRequestParamSingle.setMode(ODataRequestParamSingle.Mode.Read);
                oDataRequestParamSingle.setResourcePath(docQuery);

                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle responseSingle = (ODataResponseSingle) offlineStore.executeRequest(oDataRequestParamSingle);
                //Check if the response is an error
                if (responseSingle.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            responseSingle.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                } else if (responseSingle.getPayloadType() == ODataPayload.Type.EntitySet) {

                    ODataEntitySet feed = (ODataEntitySet) responseSingle.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        oDataProperty = properties.get(Constants.DocumentID);
                        documentsBean = new DocumentsBean();
                        documentsBean.setDocumentID((String) oDataProperty.getValue());
                        oDataProperty = properties.get(Constants.DocumentSt);
                        documentsBean.setDocumentStore((String) oDataProperty.getValue());
                        oDataProperty = properties.get(Constants.DocumentMimeType);
                        documentsBean.setDocumentMimeType((String) oDataProperty.getValue());
                        oDataProperty = properties.get(Constants.Application);
                        documentsBean.setApplication((String) oDataProperty.getValue());
                        oDataProperty = properties.get(Constants.DocumentLink);
                        documentsBean.setDocumentLink((String) oDataProperty.getValue());
                        oDataProperty = properties.get(Constants.CreatedOn);
                        if (oDataProperty != null) {
                            String convertDateFormat2 = UtilConstants.convertDateIntoDeviceFormat(mContext, (GregorianCalendar) oDataProperty.getValue(), configDateFormat);//ConstantsUtils.getLastSeenDateFormat(mContext,(GregorianCalendar) oDataProperty.getValue(),configDateFormat);//UtilConstants.convertDateIntoDeviceFormat(mContext, (GregorianCalendar) oDataProperty.getValue(), configDateFormat);
                            documentsBean.setCreatedOn(convertDateFormat2);
                        }
                        oDataProperty = properties.get(Constants.DocumentName);
                        documentsBean.setFileName((String) oDataProperty.getValue());
                        if (!TextUtils.isEmpty(documentsBean.getFileName())) {
                            String displayName = documentsBean.getFileName().substring(0, documentsBean.getFileName().lastIndexOf("."));
                            displayName = displayName.substring(0, 1).toUpperCase() + displayName.substring(1);
                            documentsBean.setDisplayName(displayName);
                        }
                        documentsBean.setMediaLink(entity.getMediaLink() + "");
                        documentsBean.setImagePath(setImageIntoImageView(mContext, documentsBean.getMediaLink(), documentsBean.getDocumentMimeType(), documentsBean.getFileName().toLowerCase()));
                        documentsList.add(documentsBean);
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + responseSingle.getPayloadType().name());
                }
            } catch (Exception listex) {
                listex.printStackTrace();
            }
        }
        return documentsList;
    }

    private static String setImageIntoImageView(Context mContext, String mStrImagePath, String mimeType, String filename) {
        try {
            byte[] imageByteArray = OfflineManager.getImageList(mStrImagePath);
            if (imageByteArray != null) {
                if (Constants.MimeTypePng.equalsIgnoreCase(mimeType) || Constants.MimeTypeJpg.equalsIgnoreCase(mimeType) || Constants.MimeTypeJpeg.equalsIgnoreCase(mimeType)) {
                    try {
                        File myDirectory = new File(Environment.getExternalStorageDirectory(), Constants.FolderName);
                        if (!myDirectory.exists()) {
                            myDirectory.mkdirs();
                        }

                        File data = new File(myDirectory, "/" + filename);

                        OutputStream op = new FileOutputStream(data);
                        op.write(imageByteArray);
                        System.out.println("File Created");
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        System.out.println("Excep:" + ex.toString());
                    }

                    File dir = Environment.getExternalStorageDirectory();
                    final File file = new File(dir + "/" + Constants.FolderName + "/" + filename);
                    return file + "";
                } else if (Constants.MimeTypeMP4.equalsIgnoreCase(mimeType)) {
                    try {
                        File myDirectory = new File(Environment.getExternalStorageDirectory(), Constants.FolderName);
                        if (!myDirectory.exists()) {
                            myDirectory.mkdirs();
                        }
                        File data = new File(myDirectory, "/" + filename);
                        OutputStream op = new FileOutputStream(data);
                        op.write(imageByteArray);
                        System.out.println("File Created");
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        System.out.println("Excep:" + ex.toString());
                    }
                    File dir = Environment.getExternalStorageDirectory();
                    File file = new File(dir + "/" + Constants.FolderName + "/" + filename);
                    return file + "";

                }
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static ArrayList<OutstandingBean> getOutstandingDetails(String outstandingQry) throws OfflineODataStoreException {

        ArrayList<OutstandingBean> alOutstandingDetails = new ArrayList<OutstandingBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            OutstandingBean outstandingBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(outstandingQry);
                //Send a request to read the Outstandin Details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        outstandingBean = new OutstandingBean();

                        property = properties.get(Constants.InvoiceHisMatNo);
                        outstandingBean.setMatCode((String) property.getValue());
                        property = properties.get(Constants.InvoiceHisMatDesc);
                        outstandingBean.setMatDesc((String) property.getValue());
                        property = properties.get(Constants.ZZIsBomMaterial);
                        outstandingBean.setZZIsBomMaterial((String) property.getValue());
                        property = properties.get(Constants.HigherLevelItm);
                        outstandingBean.setHigherLevelItm((String) property.getValue());

                        property = properties.get(Constants.ItemNo);
                        outstandingBean.setItemNo((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        outstandingBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.ItemStatus);
                        outstandingBean.setItemInvoiceStatus((String) property.getValue());

                        property = properties.get(Constants.NetAmount);

                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            outstandingBean.setInvoiceAmount(mStrAmount.toString());
                        }
                        property = properties.get(Constants.InvoiceHisQty);
                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }

                        property = properties.get(Constants.UOM);
                        outstandingBean.setUom((String) property.getValue());

                        if (checkNoUOMZero(String.valueOf(property.getValue()))) {
                            //outstandingBean.setInvQty(trimQtyDecimalPlace(qty));
                            outstandingBean.setInvQty(qty);
                        }
                        else
                            outstandingBean.setInvQty(qty);

                        outstandingBean.setIsDetailEnabled(false);
                        property = properties.get(Constants.OrderMatGrpDesc);
                        outstandingBean.setOrderMatGrpDesc(String.valueOf(property.getValue()));

                        alOutstandingDetails.add(outstandingBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alOutstandingDetails != null && alOutstandingDetails.size() > 0) {
            Collections.sort(alOutstandingDetails, new Comparator<OutstandingBean>() {
                public int compare(OutstandingBean one, OutstandingBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getItemNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getItemNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getItemNo().compareTo(other.getItemNo());
                    }
                }
            });

        }
        return alOutstandingDetails;
    }

    public static ArrayList<RetailerStockBean> getDBStockMaterials(List<ODataEntity> entities, ArrayList<RetailerStockBean> oldDisplayingStockList, Context mContext, ArrayList<RetailerStockBean> oldStkList, String typesetUOM) throws OfflineODataStoreException {
        ArrayList<RetailerStockBean> retailerStockList = new ArrayList<>();
        ArrayList<String> tempArrList = new ArrayList<>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(mContext);
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                ArrayList<String> uomList = new ArrayList<>();
                RetailerStockBean retailerStockBean = new RetailerStockBean();
                properties = entity.getProperties();

                property = properties.get(Constants.StockOwner);
                retailerStockBean.setStockOwner((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupID);
                String orderMatGroup = (String) property.getValue();
                retailerStockBean.setOrderMaterialGroupID(orderMatGroup);
                property = properties.get(Constants.OrderMaterialGroupDesc);
                retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());

                property = properties.get(Constants.Currency);
                retailerStockBean.setCurrency((String) property.getValue() != null ? (String) property.getValue() : "");


                property = properties.get(Constants.MRP);
                if (property != null) {
                    BigDecimal mStrMrp = (BigDecimal) property.getValue();
                    if (mStrMrp != null) {
                        retailerStockBean.setMRP(mStrMrp.toString());
                    } else {
                        retailerStockBean.setMRP("0.0");
                    }
                }
                property = properties.get(Constants.CPStockItemGUID);
                ODataGuid mCPStkItmGuid = null;
                try {
                    mCPStkItmGuid = (ODataGuid) property.getValue();
                    retailerStockBean.setCPStockItemGUID(mCPStkItmGuid.guidAsString36().toUpperCase());
                } catch (Exception e) {
                    e.printStackTrace();
                }

                property = properties.get(Constants.LandingPrice);
                if (property != null) {
                    BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                    if (mStrLandingPrice != null) {
                        retailerStockBean.setLandingPrice(mStrLandingPrice.toString());
                    } else {
                        retailerStockBean.setLandingPrice("0.0");
                    }
                }
                String unrestrictedQty = "0";
                property = properties.get(Constants.UnrestrictedQty);
                if (property != null) {
                    BigDecimal mStrQty = (BigDecimal) property.getValue();
                    if (mStrQty != null) {
                        unrestrictedQty = mStrQty.toString();
                    } else {
                        unrestrictedQty = "0";
                    }
                }

                if (entity.getEtag() != null) {
                    retailerStockBean.setEtag(entity.getEtag());
                } else {
                    retailerStockBean.setEtag("");
                }


                property = properties.get(Constants.AsOnDate);
                String convertDateFormat = "";
                if (property != null) {
                    try {
                        convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        String convertDateFormat1 = UtilConstants.convertDateIntoDeviceFormat(mContext, (GregorianCalendar) property.getValue(), configDateFormat);
                        retailerStockBean.setDisplayAsOnDate(convertDateFormat1);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                retailerStockBean.setAsOnDate(convertDateFormat);

//                String unrestrictedQty = getDBStk(Constants.CPStockItems
//                        + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.OrderMaterialGroupID + " eq '" + orderMatGroup + "' and " + Constants.StockOwner + " eq '01' ");

//                String unrestrictedQty = "0";

                /*if(TextUtils.isEmpty(isNewStk)) {
                    String unrestrictedQty = getDBStk(Constants.CPStockItems
                            + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.OrderMaterialGroupID + " eq '" + orderMatGroup + "' and  "
                            + Constants.CPNo + " eq '" + mStrCPNo + "' and " + Constants.StockOwner + " eq '02' ");

//                String unrestrictedQty = "0";

                    property = properties.get(Constants.UOM);
                    retailerStockBean.setUom((String) property.getValue() != null ? (String) property.getValue() : "");
                    if (checkNoUOMZero(String.valueOf(property.getValue())))
                        retailerStockBean.setQAQty(trimQtyDecimalPlace(unrestrictedQty));
                    else
                        retailerStockBean.setQAQty(unrestrictedQty);
                }
*/

                property = properties.get(Constants.UOM);
                retailerStockBean.setUom((String) property.getValue() != null ? (String) property.getValue() : "");
                property = properties.get(Constants.AlternativeUOM1);
                retailerStockBean.setAlternativeUOM1((String) property.getValue() != null ? (String) property.getValue() : "");
                property = properties.get(Constants.AlternativeUOM2);
                retailerStockBean.setAlternativeUOM2((String) property.getValue() != null ? (String) property.getValue() : "");
                if (retailerStockBean.getStockOwner().equalsIgnoreCase("02")) {
                    if (checkNoUOMZero(retailerStockBean.getUom()))
                        retailerStockBean.setQAQty(trimQtyDecimalPlace(unrestrictedQty));
                    else
                        retailerStockBean.setQAQty(unrestrictedQty);
                } else {
                    retailerStockBean.setDisplayAsOnDate("");
                }

                if (!TextUtils.isEmpty(retailerStockBean.getUom()))
                    uomList.add(retailerStockBean.getUom());
                if (!TextUtils.isEmpty(retailerStockBean.getAlternativeUOM1()) && !uomList.contains(retailerStockBean.getAlternativeUOM1()))
                    uomList.add(retailerStockBean.getAlternativeUOM1());
                if (!TextUtils.isEmpty(retailerStockBean.getAlternativeUOM2()) && !uomList.contains(retailerStockBean.getAlternativeUOM2()))
                    uomList.add(retailerStockBean.getAlternativeUOM2());
                retailerStockBean.setEnterdUOM(typesetUOM);

                retailerStockBean.setUomList(uomList);


                RetailerStockBean orderMatgrpPresent1 = containsId(retailerStockBean.getOrderMaterialGroupID(), oldStkList);
                if (orderMatgrpPresent1 != null) {
                    retailerStockBean = orderMatgrpPresent1;
                } else {
                    retailerStockBean.setStockType("Dist");
                }
                RetailerStockBean orderMatgrpPresent = containsId(retailerStockBean.getOrderMaterialGroupID(), oldDisplayingStockList);
                if (tempArrList.size() == 0 && orderMatgrpPresent == null) {
                    retailerStockList.add(retailerStockBean);
                    tempArrList.add(retailerStockBean.getOrderMaterialGroupID());
                } else if (!tempArrList.contains(retailerStockBean.getOrderMaterialGroupID()) && orderMatgrpPresent == null) {
                    retailerStockList.add(retailerStockBean);
                    tempArrList.add(retailerStockBean.getOrderMaterialGroupID());
                }
            }
        }
      /*  final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Collections.sort(retailerStockList, new Comparator<RetailerStockBean>() {
            public int compare(RetailerStockBean o1, RetailerStockBean o2) {
                String strDt1 = o1.getAsOnDate();
                String strDt2 = o2.getAsOnDate();
                if (TextUtils.isEmpty(strDt1) || TextUtils.isEmpty(strDt2)) {
                    return 0;
                } else {
                    Date d1 = null;
                    Date d2 = null;
                    try {
                        d1 = sdf.parse(strDt1);
                        d2 = sdf.parse(strDt2);
                        return d1.compareTo(d2);
                    } catch (ParseException e) {
                        e.printStackTrace();
                        return 0;
                    }

                }
            }
        });*/
        /*for(RetailerStockBean retailerStockBean :retailerStockList) {
            boolean orderMatgrpPresent = containsId(retailerStockBean.getOrderMaterialGroupID(), oldRetailerStockList);
            if (tempArrList.size() == 0 && !orderMatgrpPresent) {
                finalRetailerStockList.add(retailerStockBean);
                tempArrList.add(retailerStockBean.getOrderMaterialGroupID());
            } else if (!tempArrList.contains(retailerStockBean.getOrderMaterialGroupID()) && !orderMatgrpPresent) {
                finalRetailerStockList.add(retailerStockBean);
                tempArrList.add(retailerStockBean.getOrderMaterialGroupID());
            }
        }*/

        return retailerStockList;
    }

    private static RetailerStockBean containsId(String materialId, ArrayList<RetailerStockBean> retailerStockList) {
        for (RetailerStockBean retailerStockBean : retailerStockList) {
            if (retailerStockBean.getOrderMaterialGroupID().equals(materialId)) {
                return retailerStockBean;
            }
        }
        return null;
    }

    public static ArrayList<RetailerStockBean> getDBStockMaterials(List<ODataEntity> entities, Context mContext, String typesetUOM) throws OfflineODataStoreException {
        ArrayList<RetailerStockBean> retailerStockList = new ArrayList<>();
        ArrayList<String> tempArrList = new ArrayList<>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(mContext);
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                ArrayList<String> uomList = new ArrayList<>();
                RetailerStockBean retailerStockBean = new RetailerStockBean();
                properties = entity.getProperties();

                property = properties.get(Constants.StockOwner);
                retailerStockBean.setStockOwner((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupID);
                String orderMatGroup = (String) property.getValue();
                retailerStockBean.setOrderMaterialGroupID(orderMatGroup);
                property = properties.get(Constants.OrderMaterialGroupDesc);
                retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());

                property = properties.get(Constants.Currency);
                retailerStockBean.setCurrency((String) property.getValue() != null ? (String) property.getValue() : "");


                property = properties.get(Constants.MRP);
                if (property != null) {
                    BigDecimal mStrMrp = (BigDecimal) property.getValue();
                    if (mStrMrp != null) {
                        retailerStockBean.setMRP(mStrMrp.toString());
                    } else {
                        retailerStockBean.setMRP("0.0");
                    }
                }
                property = properties.get(Constants.CPStockItemGUID);
                ODataGuid mCPStkItmGuid = null;
                try {
                    mCPStkItmGuid = (ODataGuid) property.getValue();
                    retailerStockBean.setCPStockItemGUID(mCPStkItmGuid.guidAsString36().toUpperCase());
                } catch (Exception e) {
                    e.printStackTrace();
                }

                property = properties.get(Constants.LandingPrice);
                if (property != null) {
                    BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                    if (mStrLandingPrice != null) {
                        retailerStockBean.setLandingPrice(mStrLandingPrice.toString());
                    } else {
                        retailerStockBean.setLandingPrice("0.0");
                    }
                }
                String unrestrictedQty = "0";
                property = properties.get(Constants.UnrestrictedQty);
                if (property != null) {
                    BigDecimal mStrQty = (BigDecimal) property.getValue();
                    if (mStrQty != null) {
                        unrestrictedQty = mStrQty.toString();
                    } else {
                        unrestrictedQty = "0";
                    }
                }

                if (entity.getEtag() != null) {
                    retailerStockBean.setEtag(entity.getEtag());
                } else {
                    retailerStockBean.setEtag("");
                }
                retailerStockBean.setStockType("");

                property = properties.get(Constants.AsOnDate);
                String convertDateFormat = "";
                if (property != null) {
                    try {
                        convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        String convertDateFormat1 = UtilConstants.convertDateIntoDeviceFormat(mContext, (GregorianCalendar) property.getValue(), configDateFormat);
                        retailerStockBean.setDisplayAsOnDate(convertDateFormat1);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                retailerStockBean.setAsOnDate(convertDateFormat);
                property = properties.get(Constants.UOM);
                retailerStockBean.setUom((String) property.getValue() != null ? (String) property.getValue() : "");
                property = properties.get(Constants.AlternativeUOM1);
                retailerStockBean.setAlternativeUOM1((String) property.getValue() != null ? (String) property.getValue() : "");
                property = properties.get(Constants.AlternativeUOM2);
                retailerStockBean.setAlternativeUOM2((String) property.getValue() != null ? (String) property.getValue() : "");

                if (checkNoUOMZero(retailerStockBean.getUom()))
                    retailerStockBean.setQAQty(trimQtyDecimalPlace(unrestrictedQty));
                else
                    retailerStockBean.setQAQty(unrestrictedQty);

                if (!TextUtils.isEmpty(retailerStockBean.getUom()))
                    uomList.add(retailerStockBean.getUom());
                if (!TextUtils.isEmpty(retailerStockBean.getAlternativeUOM1()) && !uomList.contains(retailerStockBean.getAlternativeUOM1()))
                    uomList.add(retailerStockBean.getAlternativeUOM1());
                if (!TextUtils.isEmpty(retailerStockBean.getAlternativeUOM2()) && !uomList.contains(retailerStockBean.getAlternativeUOM2()))
                    uomList.add(retailerStockBean.getAlternativeUOM2());
                retailerStockBean.setEnterdUOM(typesetUOM);

                retailerStockBean.setUomList(uomList);

                if (!tempArrList.contains(retailerStockBean.getOrderMaterialGroupID())) {
                    retailerStockList.add(retailerStockBean);
                    tempArrList.add(retailerStockBean.getOrderMaterialGroupID());
                }

            }
        }
        final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Collections.sort(retailerStockList, new Comparator<RetailerStockBean>() {
            public int compare(RetailerStockBean o1, RetailerStockBean o2) {
                String strDt1 = o1.getAsOnDate();
                String strDt2 = o2.getAsOnDate();
                if (TextUtils.isEmpty(strDt1) || TextUtils.isEmpty(strDt2)) {
                    return 0;
                } else {
                    Date d1 = null;
                    Date d2 = null;
                    try {
                        d1 = sdf.parse(strDt1);
                        d2 = sdf.parse(strDt2);
                        return d1.compareTo(d2);
                    } catch (ParseException e) {
                        e.printStackTrace();
                        return 0;
                    }

                }
            }
        });
        /*for(RetailerStockBean retailerStockBean :retailerStockList) {
            boolean orderMatgrpPresent = containsId(retailerStockBean.getOrderMaterialGroupID(), oldRetailerStockList);
            if (tempArrList.size() == 0 && !orderMatgrpPresent) {
                finalRetailerStockList.add(retailerStockBean);
                tempArrList.add(retailerStockBean.getOrderMaterialGroupID());
            } else if (!tempArrList.contains(retailerStockBean.getOrderMaterialGroupID()) && !orderMatgrpPresent) {
                finalRetailerStockList.add(retailerStockBean);
                tempArrList.add(retailerStockBean.getOrderMaterialGroupID());
            }
        }*/

        return retailerStockList;
    }

    public static ArrayList<RemarkReasonBean> getRemarksReason(String query) throws OfflineODataStoreException {


        RemarkReasonBean tempstoList;
        ArrayList<RemarkReasonBean> reasonList = new ArrayList<>();
        reasonList.add(new RemarkReasonBean(Constants.str_00, Constants.None));
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        tempstoList = new RemarkReasonBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        tempstoList.setReasonCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.Description);
                        tempstoList.setReasonDesc(property.getValue().toString());
                        reasonList.add(tempstoList);
                    }
                } else {
                    reasonList.add(new RemarkReasonBean(Constants.str_01, "Key Person Not Available"));
                    reasonList.add(new RemarkReasonBean(Constants.str_02, "Outlet Closed"));
                    reasonList.add(new RemarkReasonBean(Constants.str_03, "No order received due to financial issue"));
                    reasonList.add(new RemarkReasonBean(Constants.str_04, "No order received due to high stock hold"));
                    reasonList.add(new RemarkReasonBean(Constants.str_05, "Market Closed"));
                    reasonList.add(new RemarkReasonBean(Constants.str_06, "Others"));
                }


            }
        }
        return reasonList;
    }

    private static ODataResponseSingle readSingleOdataRequest(String retListQry) throws OfflineODataStoreException {
        //Define the resource path
        ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
        request.setMode(ODataRequestParamSingle.Mode.Read);
        request.setResourcePath(retListQry);
        //Send a request to read the ChannelPartners from the local database
        ODataResponseSingle response = null;
        try {
            response = (ODataResponseSingle) offlineStore.
                    executeRequest(request);
            //Check if the response is an error
            if (response.getPayloadType() == ODataPayload.Type.Error) {
                ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                        response.getPayload();
                throw new OfflineODataStoreException(error.getMessage());
                //Check if the response contains EntitySet
            }
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        return response;
    }

    public static void createVisitStartEnd(Hashtable<String, String> table,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createVisitEntityEndRemarks(table);

            offlineStore.scheduleCreateEntity(newEntity, Constants.Visits,
                    new OfflineRequestListener(Operation.Create.getValue(), null, Constants.Visits,context),
                    null);


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    private static ODataEntity createVisitEntityEndRemarks(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                //new
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.VISITENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }


                newEntity.getProperties().put(Constants.VISITKEY,
                        new ODataPropertyDefaultImpl(Constants.VISITKEY, hashtable.get(Constants.VISITKEY)));
                newEntity.getProperties().put(Constants.STARTDATE,
                        new ODataPropertyDefaultImpl(Constants.STARTDATE, UtilConstants.convertDateFormat(hashtable.get(Constants.STARTDATE))));

                newEntity.getProperties().put(Constants.STARTTIME,
                        new ODataPropertyDefaultImpl(Constants.STARTTIME, hashtable.get(Constants.STARTTIME)));

                try {
                    newEntity.getProperties().put(Constants.StartLat,
                            new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));
                    newEntity.getProperties().put(Constants.StartLong,
                            new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                if (!hashtable.get(Constants.ENDDATE).equalsIgnoreCase("")) {
                    try {
                        newEntity.getProperties().put(Constants.EndLat,
                                new ODataPropertyDefaultImpl(Constants.EndLat, hashtable.get(Constants.EndLat)));
                        newEntity.getProperties().put(Constants.EndLong,
                                new ODataPropertyDefaultImpl(Constants.EndLong, hashtable.get(Constants.EndLong)));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    newEntity.getProperties().put(Constants.ENDDATE,
                            new ODataPropertyDefaultImpl(Constants.ENDDATE, UtilConstants.convertDateFormat(hashtable.get(Constants.ENDDATE))));

                    newEntity.getProperties().put(Constants.ENDTIME,
                            new ODataPropertyDefaultImpl(Constants.ENDTIME, hashtable.get(Constants.ENDTIME)));


                    newEntity.getProperties().put(Constants.VisitDate,
                            new ODataPropertyDefaultImpl(Constants.VisitDate, UtilConstants.convertDateFormat(hashtable.get(Constants.VisitDate))));

                    newEntity.getProperties().put(Constants.StatusID,
                            new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));

                    try {
                        if (hashtable.get(Constants.VisitSeq) != null) {
                            newEntity.getProperties().put(Constants.VisitSeq,
                                    new ODataPropertyDefaultImpl(Constants.VisitSeq, hashtable.get(Constants.VisitSeq)));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    //new 28112016
                    newEntity.getProperties().put(Constants.Remarks,
                            new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));

                    try {
                        newEntity.getProperties().put(Constants.REASON,
                                new ODataPropertyDefaultImpl(Constants.REASON, hashtable.get(Constants.REASON)));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    newEntity.getProperties().put(Constants.CPGUID,
                            new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
                }

               /* newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));

                try {
                    newEntity.getProperties().put(Constants.VisitCatID,
                            new ODataPropertyDefaultImpl(Constants.VisitCatID, hashtable.get(Constants.VisitCatID)));
                } catch (Exception e) {
                    e.printStackTrace();
                }


                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
                if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

                if (!hashtable.get(Constants.ROUTEPLANKEY).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.ROUTEPLANKEY,
                            new ODataPropertyDefaultImpl(Constants.ROUTEPLANKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.ROUTEPLANKEY))));
                }


                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static ArrayList<RetailerBean> getCPListFromVisit(String visitQry) {
        ArrayList<RetailerBean> alRetBean = new ArrayList<>();
        HashMap<String, ArrayList<RetailerBean>> distMap = new HashMap<>();
        ArrayList<RetailerBean> alRetBeanTemp = new ArrayList<>();
        if (offlineStore != null) {
            Set setCPList = new HashSet();
            ArrayList<String> beatGuidList = new ArrayList();
            RetailerBean customerBean = null;
            ODataProperty property;
            ODataPropMap properties;

            String mStrStartTime = "", mStrEndTime = "";
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, visitQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        alRetBeanTemp = new ArrayList<>();
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPNo);
                        customerBean = new RetailerBean();
                        customerBean.setCPNo((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        try {
                            customerBean.setCPGUID(Constants.convertStrGUID32to36((String) property.getValue()));
                            customerBean.setCpGuidStringFormat((String) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.CPName);
                        customerBean.setRetailerName((String) property.getValue());

                        property = properties.get(Constants.BeatGUID);
                        ODataGuid beatGuid = (ODataGuid) property.getValue();
                        if(beatGuid!=null) {
                            customerBean.setRouteGuid36(beatGuid.guidAsString36());
                        }

                        property = properties.get(Constants.StartTime);

                        ODataDuration oDataDuration = null;
                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        mStrStartTime = UtilConstants.convertTimeOnly(oDataDuration.toString());

                        property = properties.get(Constants.EndTime);

                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        mStrEndTime = UtilConstants.convertTimeOnly(oDataDuration.toString());

                        customerBean.setTimeTaken(ConstantsUtils.getDiffTime(mStrStartTime, mStrEndTime));


                        if(!beatGuidList.contains(customerBean.getRouteGuid36()+":"+customerBean.getCPGUID())){
                         //   setCPList.add(customerBean.getCPGUID());
                            beatGuidList.add(customerBean.getRouteGuid36()+":"+customerBean.getCPGUID());
                            alRetBean.add(customerBean);
                        }

                      /*  if (!setCPList.contains(customerBean.getCPGUID())) {
                            setCPList.add(customerBean.getCPGUID());
                            beatGuidList.add(customerBean.getRouteGuid36());
                            alRetBean.add(customerBean);
                        }else {
                            if(setCPList.contains(customerBean.getCPGUID()) && !beatGuidList.contains(customerBean.getRouteGuid36())){
                                setCPList.add(customerBean.getCPGUID());
                                beatGuidList.add(customerBean.getRouteGuid36());
                                alRetBean.add(customerBean);
                            }
                        }*/
                        /*if(distMap.containsKey(customerBean.getCPGUID())){
                            ArrayList<RetailerBean> beatList=  distMap.get(customerBean.getCPGUID());
                            beatList.add(customerBean);
                            if(!beatGuidList.contains(customerBean.getRouteGuid36())) {
                                beatGuidList.add(customerBean.getRouteGuid36());
                                distMap.put(customerBean.getCPGUID(), beatList);
                            }
                        }else {
                            alRetBeanTemp.add(customerBean);
                            if(!beatGuidList.contains(customerBean.getRouteGuid36())) {
                                beatGuidList.add(customerBean.getRouteGuid36());
                                distMap.put(customerBean.getCPGUID(), alRetBeanTemp);
                            }

                        }*/
                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }

        /*try {
            Set keys = distMap.keySet();
            Iterator itr = keys.iterator();
            String key;
            ArrayList<RetailerBean> value;

            while (itr.hasNext()) {
                key = (String) itr.next();
                value =  distMap.get(key);
                alRetBean.addAll(value);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }*/
        return alRetBean;
    }

    public static ArrayList<VisitSummaryBean> getVisitSummaryVal(Context context,
                                                                 ArrayList<RetailerBean> alTodayRetailers,
                                                                 MyTargetsBean salesKpi,
                                                                 MyTargetsBean tlsdKPI,
                                                                 String mSOOrderType, String mStrCPDMSDIVQry) throws OfflineODataStoreException {
        ArrayList<VisitSummaryBean> retailerStockList = new ArrayList<>();


        for (int incVal = 0; incVal < alTodayRetailers.size(); incVal++) {
            VisitSummaryBean visitSummaryBean = new VisitSummaryBean();

            if (alTodayRetailers.get(incVal).getRetailerName() != null && !alTodayRetailers.get(incVal).getRetailerName().equalsIgnoreCase("")) {
                visitSummaryBean.setRetailerName(alTodayRetailers.get(incVal).getRetailerName());
            } else {
                String mRetName = "";
                try {
                    mRetName = OfflineManager.getValueByColumnName(Constants.ChannelPartners + "?$select=" + Constants.RetailerName + " &$filter = "
                            + Constants.CPGUID + " eq guid'" +Constants.convertStrGUID32to36(alTodayRetailers.get(incVal).getCpGuidStringFormat()) + "'", Constants.RetailerName);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
                visitSummaryBean.setRetailerName(mRetName);
            }


            String mStrOrderVal = Constants.getOrderValByRetiler(alTodayRetailers.get(incVal).getCPNo(), UtilConstants.getNewDate(), mSOOrderType, context,alTodayRetailers.get(incVal).getRouteGuid36());


            visitSummaryBean.setTimeTaken(alTodayRetailers.get(incVal).getTimeTaken());
//            visitSummaryBean.setOrderValue(UtilConstants.removeLeadingZerowithTwoDecimal(mStrOrderVal));
            visitSummaryBean.setOrderValue(mStrOrderVal);

            // getTodayTLSd logic start
            String parentID =OfflineManager.getParentID(Constants.CPDMSDivisions + "?$select=" + Constants.ParentID + " &$filter="
                    + Constants.CPNo + " eq '" +alTodayRetailers.get(incVal).getCPNo() +"' and "+Constants.RouteGUID+" eq guid'"+alTodayRetailers.get(incVal).getRouteGuid36()+"'");
            String tempParentID="";
            if(!TextUtils.isEmpty(parentID)){
                tempParentID = String.valueOf(Integer.parseInt(parentID));
            }

            double mDobDeviceTlsd = getTLSDByRetailer(Constants.SecondarySOCreate, context,
                    UtilConstants.getNewDate(), alTodayRetailers.get(incVal).getCPNo(),parentID);


            String mStrSSOQry = makeSssoQry(Constants.SSSOs + "?$select=" + Constants.SSSOGuid + " " +
                    "&$filter=" + Constants.SoldToCPGUID + " eq guid'" + alTodayRetailers.get(incVal).getCPGUID().toUpperCase() + "' " +
                    "and " + Constants.OrderDate + " eq datetime'" + UtilConstants.getNewDate() + "' and " + Constants.OrderType + " eq '" +
                    Constants.getSOOrderType() + "' and "+ Constants.SPGUID + " eq guid'" + Constants.getSPGUID() +  "' and "+ Constants.FromCPGUID + " eq '" + tempParentID + "'");

            String mStrOfflineTLSD = "0";
            if (!mStrSSOQry.equalsIgnoreCase("")) {
                String itmQry = Constants.SSSoItemDetails + "?$filter=" + Constants.IsfreeGoodsItem + " ne '" + Constants.X + "' and " + mStrSSOQry + " ";
                try {
                    mStrOfflineTLSD = OfflineManager.getCountTLSDFromDatabase(itmQry);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }

            }
            double mDouSumOfTLSD = 0.0;
            try {
                mDouSumOfTLSD = mDobDeviceTlsd + Double.parseDouble(mStrOfflineTLSD);
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }

            visitSummaryBean.setTodayTlsd(UtilConstants.removeLeadingZeroVal(mDouSumOfTLSD + ""));

            //  getTodayTLSd logic end

            String cpQry = Constants.SoldToID + " eq '" + alTodayRetailers.get(incVal).getCPNo() + "'";

            String mStrAchivedFrmInv = Constants.getTotalOrderValueByCurrentMonth(Constants.getFirstDateOfCurrentMonth(), cpQry, mStrCPDMSDIVQry);

            double mDoubleDayTarget = 0.0, mDoubleDayAchived = 0.0;
            if (salesKpi != null) {
                ArrayList<MyTargetsBean> alMyTargets = getMyTargetsByKPI(salesKpi,
                        alTodayRetailers.get(incVal).getCpGuidStringFormat().toUpperCase());

                Map<String, MyTargetsBean> mapSalesKPIVal = getALMyTargetList(alMyTargets);

                mDoubleDayTarget = Double.parseDouble(mapSalesKPIVal.get(salesKpi.getKPICode()).getMonthTarget());

                mDoubleDayAchived = Double.parseDouble(mStrAchivedFrmInv);
            }

            double mDoubleTLSDVal = 0.0;

//            String TLSDTillDateInv = Constants.getDeviceAndDataVaultTLSD(alTodayRetailers.get(incVal).getCPNo(), mStrCPDMSDIVQry,alTodayRetailers.get(incVal).getRouteGuid36());

            String mStrSSOtillCurrentMonthQry = makeSssoQry(Constants.SSSOs + "?$select=" + Constants.SSSOGuid + " " +
                    "&$filter=" + Constants.SoldToCPGUID + " eq guid'" + alTodayRetailers.get(incVal).getCPGUID().toUpperCase() + "' " +
                    "and " + Constants.OrderDate + " ge datetime'" + Constants.getFirstDateOfCurrentMonth()+"' and "+ Constants.OrderDate+" lt datetime'" + UtilConstants.getNewDate() + "' and " + Constants.OrderType + " eq '" +
                    Constants.getSOOrderType() + "' and "+ Constants.SPGUID + " eq guid'" + Constants.getSPGUID() +  "' and "+ Constants.FromCPGUID + " eq '" + tempParentID + "'");
            String TLSDTillDateInv="0.0";
            if (!mStrSSOtillCurrentMonthQry.equalsIgnoreCase("")) {
                String itmQry = Constants.SSSoItemDetails + "?$filter=" + Constants.IsfreeGoodsItem + " ne '" + Constants.X + "' and " + mStrSSOtillCurrentMonthQry + " ";
                try {
                    TLSDTillDateInv = OfflineManager.getCountTLSDFromDatabase(itmQry);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }

            }
            int mIntBalVisitRet = 0;
            String mStrBalVisitQry = Constants.RouteSchedulePlans + "?$filter = " + Constants.VisitCPGUID + " eq '"
                    + alTodayRetailers.get(incVal).getCpGuidStringFormat().toUpperCase() + "' ";
            try {
                mIntBalVisitRet = OfflineManager.getBalanceRetVisitRoute(mStrBalVisitQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            Double mDoubDayTarget = 0.0;

            try {
                if (mDoubleDayTarget > 0) {
                    mDoubDayTarget = (mDoubleDayTarget - mDoubleDayAchived) / mIntBalVisitRet;
                }
            } catch (Exception e) {
                mDoubDayTarget = 0.0;
            }
            if (mDoubDayTarget.isInfinite() || mDoubDayTarget.isNaN()) {
                mDoubDayTarget = 0.0;
            }

//            visitSummaryBean.setDayTarget(UtilConstants.removeLeadingZerowithTwoDecimal(mDoubDayTarget + ""));
            visitSummaryBean.setDayTarget(mDoubDayTarget + "");

            // Till date TLSD
            Double mIntTillDateTlsd = 0.0;

            try {
                mIntTillDateTlsd = mDoubleTLSDVal + Double.parseDouble(TLSDTillDateInv) + mDouSumOfTLSD;
            } catch (Exception e) {
                mIntTillDateTlsd = 0.0;
            }
            if (mIntTillDateTlsd.isInfinite() || mIntTillDateTlsd.isNaN()) {
                mIntTillDateTlsd = 0.0;
            }
            visitSummaryBean.setTlsdTilldate(UtilConstants.removeLeadingZeroVal(mIntTillDateTlsd + ""));

            //  Month Target
//            visitSummaryBean.setMonthTarget(UtilConstants.removeLeadingZerowithTwoDecimal(mDoubleDayTarget + ""));
            visitSummaryBean.setMonthTarget(mDoubleDayTarget + "");

            //  Achived Target
            visitSummaryBean.setAchMTD(UtilConstants.removeLeadingZerowithTwoDecimal(mDoubleDayAchived + ""));

            //  MTD %
            Double mMTDPer = 0.0;

            try {
                mMTDPer = (mDoubleDayAchived / mDoubleDayTarget) * 100;
            } catch (Exception e) {
                mMTDPer = 0.0;
            }
            if (mMTDPer.isNaN() || mMTDPer.isInfinite()) {
                mMTDPer = 0.0;
            }
            visitSummaryBean.setMTDPer(UtilConstants.removeLeadingZerowithTwoDecimal(mMTDPer + ""));


            retailerStockList.add(visitSummaryBean);
//            }
        }


        return retailerStockList;
    }

    /**
     * returns order amount for device SO(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceTotalOrderAmtByRetailer(String createType, Context context, String mStrCurrentDate, String alTodayRetailer, String mStrBeatGuid) {

        double mDoubleDevOrderValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRetailer.equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SoldToId))&& mStrBeatGuid.equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.BeatGuid))) {
                            mDoubleDevOrderValue = mDoubleDevOrderValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.NetPrice));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrderValue;
    }

    public static String makeSssoQry(String ssoQry) throws OfflineODataStoreException {

        String ssoListQry = "";
        ArrayList<InvoiceHistoryBean> soHeaderArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, ssoQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    invoiceBean = new InvoiceHistoryBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.SSSOGuid);
                    try {
                        ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                        invoiceBean.setInvoiceGuid(mInvoiceGUID.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    soHeaderArrayList.add(invoiceBean);

                }
            }
        }


        if (soHeaderArrayList != null && soHeaderArrayList.size() > 0) {
            for (int i = 0; i < soHeaderArrayList.size(); i++) {
                if (i == 0 && i == soHeaderArrayList.size() - 1) {
                    ssoListQry = ssoListQry
                            + "(" + Constants.SSSOGuid + "%20eq%20guid'"
                            + soHeaderArrayList.get(i).getInvoiceGuid() + "')";

                } else if (i == 0) {
                    ssoListQry = ssoListQry
                            + "(" + Constants.SSSOGuid + "%20eq%20guid'"
                            + soHeaderArrayList.get(i).getInvoiceGuid() + "'";

                } else if (i == soHeaderArrayList.size() - 1) {
                    ssoListQry = ssoListQry
                            + "%20or%20" + Constants.SSSOGuid + "%20eq%20guid'"
                            + soHeaderArrayList.get(i).getInvoiceGuid() + "')";
                } else {
                    ssoListQry = ssoListQry
                            + "%20or%20" + Constants.SSSOGuid + "%20eq%20guid'"
                            + soHeaderArrayList.get(i).getInvoiceGuid() + "'";
                }
            }
        } else {
            ssoListQry = "";
        }

        return ssoListQry;
    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getTLSDByRetailer(String createType, Context context, String mStrCurrentDate, String selRetailer, String beatGUid) {

        double mDoubleDevTLSDValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && selRetailer.equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SoldToId))&& beatGUid.equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.FromCPGUID))) {
                            mDoubleDevTLSDValue = mDoubleDevTLSDValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.TLSD));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevTLSDValue;
    }

    /**
     * Update an existing CPStockitems in the local database
     *
     * @throws OfflineODataStoreException
     */
    public static void createCPStockItems(Hashtable<String, String> table, UIListener uiListener,Context context) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createCPStockItemsEntity(table);
            //Send the request to update attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.CPStockItems,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.CPStockItems,context),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*Creates entity to create cpstock items in offline store*/
    private static ODataEntity createCPStockItemsEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPStockItemEntity);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPStockItemGUID,
                        new ODataPropertyDefaultImpl(Constants.CPStockItemGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPStockItemGUID))));
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
            /*    newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/
                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashtable.get(Constants.CPName)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.DMSDivision,
                        new ODataPropertyDefaultImpl(Constants.DMSDivision, hashtable.get(Constants.DMSDivision)));
                newEntity.getProperties().put(Constants.DmsDivisionDesc,
                        new ODataPropertyDefaultImpl(Constants.DmsDivisionDesc, hashtable.get(Constants.DmsDivisionDesc)));

                newEntity.getProperties().put(Constants.StockOwner,
                        new ODataPropertyDefaultImpl(Constants.StockOwner, hashtable.get(Constants.StockOwner)));

                newEntity.getProperties().put(Constants.UnrestrictedQty,
                        new ODataPropertyDefaultImpl(Constants.UnrestrictedQty, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.UnrestrictedQty)))));
//				newEntity.getProperties().put(Constants.QAQty,
//						new ODataPropertyDefaultImpl(Constants.QAQty, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.QAQty)))));

                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, hashtable.get(Constants.UOM)));

                newEntity.getProperties().put(Constants.MRP,
                        new ODataPropertyDefaultImpl(Constants.MRP, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.MRP).equalsIgnoreCase("") ? "0.0" : hashtable.get(Constants.MRP)))));
                newEntity.getProperties().put(Constants.LandingPrice,
                        new ODataPropertyDefaultImpl(Constants.LandingPrice, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.LandingPrice).equalsIgnoreCase("") ? "0.0" : hashtable.get(Constants.LandingPrice)))));
                newEntity.getProperties().put(Constants.StockValue,
                        new ODataPropertyDefaultImpl(Constants.StockValue, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.StockValue).equalsIgnoreCase("") ? "0.0" : hashtable.get(Constants.StockValue)))));

                newEntity.getProperties().put(Constants.OrderMaterialGroupID,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupID, hashtable.get(Constants.OrderMaterialGroupID)));
                newEntity.getProperties().put(Constants.OrderMaterialGroupDesc,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupDesc, hashtable.get(Constants.OrderMaterialGroupDesc)));

                newEntity.getProperties().put(Constants.AsOnDate,
                        new ODataPropertyDefaultImpl(Constants.AsOnDate, UtilConstants.convertDateFormat(hashtable.get(Constants.AsOnDate))));
                newEntity.getProperties().put(Constants.AlternativeUOM2,
                        new ODataPropertyDefaultImpl(Constants.AlternativeUOM2, hashtable.get(Constants.AlternativeUOM2)));
                newEntity.getProperties().put(Constants.AlternativeUOM1,
                        new ODataPropertyDefaultImpl(Constants.AlternativeUOM1, hashtable.get(Constants.AlternativeUOM1)));

                if (!TextUtils.isEmpty(hashtable.get(Constants.CPStockItemGUID))) {
                    String resourcePath = Constants.getGUIDEditResourcePath(Constants.CPStockItems, hashtable.get(Constants.CPStockItemGUID));
                    newEntity.setResourcePath(resourcePath, resourcePath);
                }


            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * Update an existing CPStockitems in the local database
     *
     * @throws OfflineODataStoreException
     */
    public static void updateCPStockItems(Hashtable<String, String> table, UIListener uiListener,Context context) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateCPStockItemsEntity(table);
            //Send the request to update attendance in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.CPStockItems,context), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*Creates entity to update attendance in offline store*/
    private static ODataEntity updateCPStockItemsEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPStockItemEntity);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPStockItemGUID,
                        new ODataPropertyDefaultImpl(Constants.CPStockItemGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPStockItemGUID))));
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
             /*   newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/
                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashtable.get(Constants.CPName)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.DMSDivision,
                        new ODataPropertyDefaultImpl(Constants.DMSDivision, hashtable.get(Constants.DMSDivision)));
                newEntity.getProperties().put(Constants.DmsDivisionDesc,
                        new ODataPropertyDefaultImpl(Constants.DmsDivisionDesc, hashtable.get(Constants.DmsDivisionDesc)));

//				newEntity.getProperties().put(Constants.MaterialNo,
//						new ODataPropertyDefaultImpl(Constants.MaterialNo, hashtable.get(Constants.MaterialNo)));
//				newEntity.getProperties().put(Constants.MaterialDesc,
//						new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));
                newEntity.getProperties().put(Constants.UnrestrictedQty,
                        new ODataPropertyDefaultImpl(Constants.UnrestrictedQty, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.UnrestrictedQty)))));
                newEntity.getProperties().put(Constants.StockOwner,
                        new ODataPropertyDefaultImpl(Constants.StockOwner, hashtable.get(Constants.StockOwner)));
//				newEntity.getProperties().put(Constants.QAQty,
//						new ODataPropertyDefaultImpl(Constants.QAQty, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.QAQty)))));
                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, hashtable.get(Constants.UOM)));
                newEntity.getProperties().put(Constants.MRP,
                        new ODataPropertyDefaultImpl(Constants.MRP, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.MRP)))));
                newEntity.getProperties().put(Constants.LandingPrice,
                        new ODataPropertyDefaultImpl(Constants.LandingPrice, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.LandingPrice)))));
                newEntity.getProperties().put(Constants.StockValue,
                        new ODataPropertyDefaultImpl(Constants.StockValue, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.StockValue)))));
                newEntity.getProperties().put(Constants.OrderMaterialGroupID,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupID, hashtable.get(Constants.OrderMaterialGroupID)));
                newEntity.getProperties().put(Constants.OrderMaterialGroupDesc,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupDesc, hashtable.get(Constants.OrderMaterialGroupDesc)));
                newEntity.getProperties().put(Constants.AlternativeUOM2,
                        new ODataPropertyDefaultImpl(Constants.AlternativeUOM2, hashtable.get(Constants.AlternativeUOM2)));
                newEntity.getProperties().put(Constants.AlternativeUOM1,
                        new ODataPropertyDefaultImpl(Constants.AlternativeUOM1, hashtable.get(Constants.AlternativeUOM1)));

                newEntity.getProperties().put(Constants.AsOnDate,
                        new ODataPropertyDefaultImpl(Constants.AsOnDate, UtilConstants.convertDateFormat(hashtable.get(Constants.AsOnDate))));

                if (!TextUtils.isEmpty(hashtable.get(Constants.CPStockItemGUID))) {
                    String resourcePath = Constants.getGUIDEditResourcePath(Constants.CPStockItems, hashtable.get(Constants.CPStockItemGUID));
                    newEntity.setResourcePath(resourcePath, resourcePath);
                }

                if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static ArrayList<ValueHelpBean> getCompNames(List<ODataEntity> entities, String propName) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ArrayList<ValueHelpBean> valueHelpArrayList = new ArrayList<>();
        ValueHelpBean valueHelp;
        ODataProperty property;
        ODataPropMap properties;
        try {
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    valueHelp = new ValueHelpBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.CompName);
                    valueHelp.setDescription((String) property.getValue());
                    property = properties.get(Constants.CompGUID);
                    valueHelp.setID((String) property.getValue());
                    valueHelp.setDisplayData(valueHelp.getDescription());
                    valueHelpArrayList.add(valueHelp);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new OfflineODataStoreException(e);
        }
        if (valueHelpArrayList.size() != 1) {
            valueHelp = new ValueHelpBean();
            valueHelp.setDisplayData(Constants.None);
            valueHelpArrayList.add(0, valueHelp);
        }

        return valueHelpArrayList;
    }

    public static void createCompetitorInfo(Hashtable<String, String> table, UIListener uiListener,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            // Creates the entity payload
            ODataEntity newEntity = createCompetitorInfoEntity(table);
            // Send the request to create the new visit in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.CompetitorInfos,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.CompetitorInfos,context),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    private static ODataEntity createCompetitorInfoEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CompetitorInfoEntity);

               /* try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }*/

                newEntity.getProperties().put(Constants.CompInfoGUID,
                        new ODataPropertyDefaultImpl(Constants.CompInfoGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CompInfoGUID))));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));

                try {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.CompName,
                            new ODataPropertyDefaultImpl(Constants.CompName, hashtable.get(Constants.CompName)));
                } finally {

                }

                try {
                    newEntity.getProperties().put(Constants.MRP,
                            new ODataPropertyDefaultImpl(Constants.MRP, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.MRP)))));
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }
                try {
                    newEntity.getProperties().put(Constants.Margin,
                            new ODataPropertyDefaultImpl(Constants.Margin, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.Margin)))));
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.MaterialDesc,
                            new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.ConsumerOffer,
                            new ODataPropertyDefaultImpl(Constants.ConsumerOffer, hashtable.get(Constants.ConsumerOffer)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.TradeOffer,
                            new ODataPropertyDefaultImpl(Constants.TradeOffer, hashtable.get(Constants.TradeOffer)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.ShelfLife,
                            new ODataPropertyDefaultImpl(Constants.ShelfLife, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.ShelfLife)))));
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.Remarks,
                            new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));
                } catch (Exception e) {
                    e.printStackTrace();
                }


                try {
                    newEntity.getProperties().put(Constants.Earnings,
                            new ODataPropertyDefaultImpl(Constants.Earnings, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.Earnings)))));
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.SchemeName,
                            new ODataPropertyDefaultImpl(Constants.SchemeName, hashtable.get(Constants.SchemeName)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.Currency,
                            new ODataPropertyDefaultImpl(Constants.Currency, hashtable.get(Constants.Currency)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.UpdatedOn,
                            new ODataPropertyDefaultImpl(Constants.UpdatedOn, UtilConstants.convertDateFormat(hashtable.get(Constants.UpdatedOn))));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.LandingPrice,
                            new ODataPropertyDefaultImpl(Constants.LandingPrice, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.LandingPrice)))));
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.WholeSalesLandingPrice,
                            new ODataPropertyDefaultImpl(Constants.WholeSalesLandingPrice, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.WholeSalesLandingPrice)))));
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.Period,
                            new ODataPropertyDefaultImpl(Constants.Period, hashtable.get(Constants.Period)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if (!TextUtils.isEmpty(hashtable.get(Constants.CompInfoGUID))) {
                        String resourcePath = UtilConstants.getEditResourcePath(Constants.CompetitorInfos, hashtable.get(Constants.CompInfoGUID));
                        newEntity.setResourcePath(resourcePath, resourcePath);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return newEntity;
        //END
    }

    public static ArrayList<RetailerBean> getRetailerApprovalList(List<ODataEntity> entities) {
        ArrayList<RetailerBean> retailerList = new ArrayList<>();
        ArrayList<RetailerBean> finalRetailerList = new ArrayList<>();
        ArrayList<RetailerBean> otherRetailerList = new ArrayList<>();
        RetailerBean retBean;
        ODataProperty property;
        ODataPropMap properties;
        String lastRoutId = "";
        RetailerBean rb1 = null;
        for (ODataEntity entity : entities) {
            properties = entity.getProperties();

            property = properties.get(Constants.EntityKeyID);
            retBean = new RetailerBean((String) property.getValue());
            retBean.setCPNo((String) property.getValue());
            property = properties.get(Constants.EntityKeyDesc);
            retBean.setRetailerName((String) property.getValue());
            property = properties.get(Constants.EntityKey);
            String mCpGuid = null;
            try {
                mCpGuid = (String) property.getValue();
                retBean.setCPGUID(mCpGuid.toUpperCase());
            } catch (Exception e) {
                e.printStackTrace();
            }
            property = properties.get(Constants.EntityAttribute1);
            retBean.setMobileNumber((String) property.getValue());

            property = properties.get(Constants.InstanceID);
            retBean.setInstanceId((String) property.getValue());


//            property = properties.get(Constants.Address1);
//            retBean.setAddress1((String) property.getValue());
//            property = properties.get(Constants.Address2);
//            retBean.setAddress2((String) property.getValue());
//            property = properties.get(Constants.Address3);
//            retBean.setAddress3((String) property.getValue());
//            property = properties.get(Constants.TownDesc);
//            if (property != null)
//                retBean.setTownDesc((String) property.getValue());

//            property = properties.get(Constants.DistrictDesc);
//            if (property != null)
//                retBean.setDistrictDesc((String) property.getValue());
//
//            property = properties.get(Constants.Landmark);
//            if (property != null)
//                retBean.setLandMark((String) property.getValue());

//            property = properties.get(Constants.Latitude);
//            if (property != null) {
//                BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property
//
//                if (mDecimalLatitude != null) {
//                    retBean.setLatVal(mDecimalLatitude.doubleValue());
//                } else {
//                    retBean.setLatVal(0.0);
//                }
//            }

//            property = properties.get(Constants.Longitude);
//            if (property != null) {
//                BigDecimal mDecimalLongitude = (BigDecimal) property.getValue();  //---------> Decimal property
//
//                if (mDecimalLongitude != null) {
//                    retBean.setLongVal(mDecimalLongitude.doubleValue());
//                } else {
//                    retBean.setLongVal(0.0);
//                }
//            }

//            property = properties.get(Constants.CityDesc);
//            if (property != null)
//                retBean.setCity((String) property.getValue());
//
//            property = properties.get(Constants.PostalCode);
//            if (property != null)
//                retBean.setPostalCode((String) property.getValue());
//
//            property = properties.get(Constants.MobileNo1);
//            retBean.setMobileNumber((String) property.getValue());
//
//            property = properties.get(Constants.CPUID);
//            retBean.setUID((String) property.getValue());

//            property = properties.get(Constants.DOB);
//            if (property != null)
//                retBean.setCustDOB(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));
//
//            property = properties.get(Constants.Anniversary);
//            if (property != null)
//                retBean.setAnniversary(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));
//
//            property = properties.get(Constants.OwnerName);
//            if (property != null)
//                retBean.setOwnerName((String) property.getValue());
//            property = properties.get(Constants.Group3Desc);
//            if (property != null)
//                retBean.setGroup3Desc((String) property.getValue());

            // retBean.setEditResourceURL(entity.getEditResourcePath());
            //    retBean.setIsAddressEnabled(false);


            otherRetailerList.add(retBean);
            /*else if (!retBean.getRouteID().equalsIgnoreCase(lastRoutId)) {

                if (rb1 != null) {
                    retailerList.add(rb1);
                }
                rb1 = new RetailerBean();
                property = properties.get(Constants.RouteID);
                rb1.setRouteID((String) property.getValue());
                rb1.setTitle(true);
                property = properties.get(Constants.RouteDesc);
                rb1.setRouteDesc((String) property.getValue());
                ArrayList<RetailerBean> tempRetailerList1 = new ArrayList<>();
                tempRetailerList1.add(retBean);
                rb1.setItemList(tempRetailerList1);
                lastRoutId = rb1.getRouteID();
               *//* if (!tempRetailerList.isEmpty()) {
                    Collections.sort(tempRetailerList, new Comparator<RetailerBean>() {
                        public int compare(RetailerBean one, RetailerBean other) {
                            return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
                        }
                    });
                    retailerList.addAll(tempRetailerList);
                    tempRetailerList.clear();
                }

                retailerList.add(rb1);
                tempRetailerList.add(retBean);*//*
            }
            else {
                if (rb1 != null) {
                    ArrayList<RetailerBean> tempRetailerList1 = rb1.getItemList();
                    tempRetailerList1.add(retBean);
                    rb1.setItemList(tempRetailerList1);
                }
//                tempRetailerList.add(retBean);
            }*/
        }
        if (rb1 != null) {
            retailerList.add(rb1);
        }
        Collections.sort(retailerList, new Comparator<RetailerBean>() {
            public int compare(RetailerBean one, RetailerBean other) {
                return one.getRouteDesc().toLowerCase().compareTo(other.getRouteDesc().toLowerCase());
            }
        });

        for (RetailerBean retailerBean : retailerList) {
            ArrayList<RetailerBean> tempArr = retailerBean.getItemList();
            Collections.sort(tempArr, new Comparator<RetailerBean>() {
                public int compare(RetailerBean one, RetailerBean other) {
                    return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
                }
            });
            retailerBean.setItemList(tempArr);
            retailerBean.setRetailerCount(String.valueOf(tempArr.size()));
//            finalRetailerList.add(retailerBean);
//            finalRetailerList.addAll(tempArr);
        }
        /*if (!tempRetailerList.isEmpty()) {
            Collections.sort(tempRetailerList, new Comparator<RetailerBean>() {
                public int compare(RetailerBean one, RetailerBean other) {
                    return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
                }
            });
            retailerList.addAll(tempRetailerList);
            tempRetailerList.clear();
        }*/
        if (!otherRetailerList.isEmpty()) {
            rb1 = new RetailerBean();
            rb1.setRouteID("");
            rb1.setTitle(true);
            rb1.setRouteDesc("");
            rb1.setRetailerCount(String.valueOf(otherRetailerList.size()));


            Collections.sort(otherRetailerList, new Comparator<RetailerBean>() {
                public int compare(RetailerBean one, RetailerBean other) {
                    return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
                }
            });
            rb1.setItemList(otherRetailerList);
            retailerList.add(rb1);
//            finalRetailerList.addAll(otherRetailerList);
        }
        return retailerList;
    }


    public static String[][] getConfigListWithDefaultValAndNone(String qry, String typeSetVal) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if (entities.size() > 0) {
                        configVal = new String[5][entities.size() + 1];
                        configVal[0][0] = "";
                        configVal[1][0] = Constants.None;
                        configVal[2][0] = "";
                        configVal[3][0] = Constants.str_false;
                        configVal[4][0] = "";
                        int incVal = 1;
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();
                            property = properties.get(Constants.ID);
                            configVal[0][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";
                            String propIDVal = (String) property.getValue() != null ? (String) property.getValue() : "";
                            property = properties.get(Constants.DESCRIPTION);
                            configVal[1][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";
                            String mStrTypeVal = Constants.getConfigTypeIndicator(Constants.ConfigTypsetTypeValues,
                                    Constants.TypeValue, Constants.Types, propIDVal, Constants.Typeset, typeSetVal);
                            configVal[2][incVal] = mStrTypeVal;
                            property = properties.get(Constants.IsDefault);
                            Boolean boolVal = null;
                            try {
                                boolVal = (Boolean) property.getValue();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            configVal[3][incVal] = boolVal.toString();
                            property = properties.get(Constants.ParentID);
                            configVal[4][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";
                            incVal++;
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }


    public static String[][] getOrderedMaterialGroupsTemp(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            HashMap<String, String> mapSKU = new HashMap<>();

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response


                    String skuGrp = "";
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.OrderMaterialGroupID);
//                        configVal[0][incVal] = (String) property.getValue();
                        skuGrp = (String) property.getValue();
                        property = properties.get(Constants.OrderMaterialGroupDesc);
//                        configVal[1][incVal] = (String) property.getValue();
                        mapSKU.put((String) property.getValue(),skuGrp);
//                        incVal++;
                    }
                    if (!mapSKU.isEmpty()) {
                        configVal = new String[2][mapSKU.size() + 1];
                        configVal[0][0] = "";
                        configVal[1][0] = "None";
                        Map<String, String> map = Constants.sortByValues(mapSKU);
                        Set set2 = map.entrySet();
                        Iterator iterator2 = set2.iterator();
                        int incVal = 1;
                        while (iterator2.hasNext()) {
                            Map.Entry me2 = (Map.Entry) iterator2.next();
                            configVal[0][incVal] = me2.getValue().toString();
                            configVal[1][incVal] = me2.getKey().toString();
                            ;
                            incVal++;
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    public static ArrayList<ComplaintCreateBeanUOMandDescription> getStockOwnerGroups(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        List<String> duplicationRemoval = new ArrayList<>();
        ArrayList<ComplaintCreateBeanUOMandDescription> complaintCreateBeanUOMandDescriptionslist = new ArrayList<>();
        complaintCreateBeanUOMandDescriptionslist.clear();

        ComplaintCreateBeanUOMandDescription complaintCreateBeanUOMandDescription = null;

        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            HashMap<String, String> mapSKU = new HashMap<>();
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    String skuGrp = "";
                    for (ODataEntity entity : entities) {
                        complaintCreateBeanUOMandDescription = new ComplaintCreateBeanUOMandDescription();
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialNo);
                        complaintCreateBeanUOMandDescription.setmStrSelectedCRSItem((String) property.getValue());
                        //skuGrp =  (String) property.getValue();
                        property = properties.get(Constants.MaterialDesc);
                        complaintCreateBeanUOMandDescription.setmStrSelectedCRSItemDesc((String) property.getValue());
                        //  mapSKU.put(skuGrp,(String) property.getValue());
                        ArrayList<String> uomList = new ArrayList<>();

                        property = properties.get(Constants.UOM);
                        complaintCreateBeanUOMandDescription.setUOM((String) property.getValue());
                        if (!TextUtils.isEmpty(complaintCreateBeanUOMandDescription.getUOM()))
                            uomList.add(complaintCreateBeanUOMandDescription.getUOM());
                        property = properties.get(Constants.AlternativeUOM1);
                        complaintCreateBeanUOMandDescription.setAlternativeUOM1((String) property.getValue());
                        if (!TextUtils.isEmpty(complaintCreateBeanUOMandDescription.getAlternativeUOM1()) && !uomList.contains(complaintCreateBeanUOMandDescription.getAlternativeUOM1()))
                            uomList.add(complaintCreateBeanUOMandDescription.getAlternativeUOM1());
                        complaintCreateBeanUOMandDescription.setUOMList(uomList);
                        if(!duplicationRemoval.contains(complaintCreateBeanUOMandDescription.getmStrSelectedCRSItem())) {
                            duplicationRemoval.add(complaintCreateBeanUOMandDescription.getmStrSelectedCRSItem());
                            complaintCreateBeanUOMandDescriptionslist.add(complaintCreateBeanUOMandDescription);

                        }

                    }

                    if (complaintCreateBeanUOMandDescriptionslist.size() != 1) {
                        complaintCreateBeanUOMandDescription = new ComplaintCreateBeanUOMandDescription();
                        complaintCreateBeanUOMandDescription.setmStrSelectedCRSItemDesc(Constants.None);
                        complaintCreateBeanUOMandDescriptionslist.add(0, complaintCreateBeanUOMandDescription);
                    }
//                    if(!mapSKU.isEmpty()) {
//                        configVal = new String[2][mapSKU.size() + 1];
//                        configVal[0][0] = "";
//                        configVal[1][0] = "None";
//
//                        int incVal = 1;
//                        Iterator iterator = mapSKU.keySet().iterator();
//                        while (iterator.hasNext()) {
//                            String key = iterator.next().toString();
//                            configVal[0][incVal] = key;
//                            configVal[1][incVal] =  mapSKU.get(key);
//                            incVal++;
//                        }
//                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return complaintCreateBeanUOMandDescriptionslist;

    }

    public static ArrayList<String> getStockOwnerUOM(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        ArrayList<String> list = new ArrayList<>();


        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            HashMap<String, String> mapSKU = new HashMap<>();
            HashMap<String, String> uom = new HashMap<>();
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    String skuGrp = "";
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.AlternativeUOM1);
                        list.add((String) property.getValue());
//                        incVal++;
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return list;

    }

    public static void createCustomerComplaints(Hashtable<String, String> table, UIListener uiListener,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createComplaintsEntity(table);
            //Send the request to create the new attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.Complaints,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Complaints,context),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    private static ODataEntity createComplaintsEntity(Hashtable<String, String> hashTable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashTable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ComplaintEntity);

                newEntity.getProperties().put(Constants.ComplaintGUID,
                        new ODataPropertyDefaultImpl(Constants.ComplaintGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.ComplaintGUID))));

                newEntity.getProperties().put(Constants.ComplaintNo,
                        new ODataPropertyDefaultImpl(Constants.ComplaintNo, hashTable.get(Constants.ComplaintNo)));

                newEntity.getProperties().put(Constants.ComplaintCategoryID,
                        new ODataPropertyDefaultImpl(Constants.ComplaintCategoryID, hashTable.get(Constants.ComplaintCategoryID)));

                newEntity.getProperties().put(Constants.ComplainCategoryDesc,
                        new ODataPropertyDefaultImpl(Constants.ComplainCategoryDesc, hashTable.get(Constants.ComplainCategoryDesc)));
                try {
                    newEntity.getProperties().put(Constants.ParentNo,
                            new ODataPropertyDefaultImpl(Constants.ParentNo, hashTable.get(Constants.ParentNo)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.ComplaintTypeID,
                        new ODataPropertyDefaultImpl(Constants.ComplaintTypeID, hashTable.get(Constants.ComplaintTypeID)));

                newEntity.getProperties().put(Constants.ComplaintTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.ComplaintTypeDesc, hashTable.get(Constants.ComplaintTypeDesc)));

                newEntity.getProperties().put(Constants.ComplaintPriorityID,
                        new ODataPropertyDefaultImpl(Constants.ComplaintPriorityID, hashTable.get(Constants.ComplaintPriorityID)));

                newEntity.getProperties().put(Constants.ComplaintPriorityDesc,
                        new ODataPropertyDefaultImpl(Constants.ComplaintPriorityDesc, hashTable.get(Constants.ComplaintPriorityDesc)));

                newEntity.getProperties().put(Constants.SPGUID,
                        new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.SPGUID))));

                newEntity.getProperties().put(Constants.SPNo,
                        new ODataPropertyDefaultImpl(Constants.SPNo, hashTable.get(Constants.SPNo)));

                newEntity.getProperties().put(Constants.SPName,
                        new ODataPropertyDefaultImpl(Constants.SPName, hashTable.get(Constants.SPName)));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashTable.get(Constants.CPTypeID)));

                newEntity.getProperties().put(Constants.CPTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.CPTypeDesc, hashTable.get(Constants.CPTypeDesc)));

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashTable.get(Constants.CPGUID)));

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashTable.get(Constants.CPNo)));

                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashTable.get(Constants.CPName)));

                newEntity.getProperties().put(Constants.Batch,
                        new ODataPropertyDefaultImpl(Constants.Batch, hashTable.get(Constants.Batch)));

                if (hashTable.get(Constants.MFD).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.MFD,
                            new ODataPropertyDefaultImpl(Constants.MFD, UtilConstants.convertDateFormat(hashTable.get(Constants.MFD))));
                }

                newEntity.getProperties().put(Constants.OrderMaterialGroupID,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupID, hashTable.get(Constants.OrderMaterialGroupID)));

                newEntity.getProperties().put(Constants.OrderMaterialGroupDesc,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupDesc, hashTable.get(Constants.OrderMaterialGroupDesc)));

                newEntity.getProperties().put(Constants.MaterialGrp,
                        new ODataPropertyDefaultImpl(Constants.MaterialGrp, hashTable.get(Constants.MaterialGrp)));

                newEntity.getProperties().put(Constants.MaterialGrpDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialGrpDesc, hashTable.get(Constants.MaterialGrpDesc)));

                newEntity.getProperties().put(Constants.Material,
                        new ODataPropertyDefaultImpl(Constants.Material, hashTable.get(Constants.Material)));

                newEntity.getProperties().put(Constants.MaterialDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashTable.get(Constants.MaterialDesc)));

                newEntity.getProperties().put(Constants.ComplaintDate,
                        new ODataPropertyDefaultImpl(Constants.ComplaintDate, UtilConstants.convertDateFormat(hashTable.get(Constants.ComplaintDate))));

                newEntity.getProperties().put(Constants.ComplaintStatusID,
                        new ODataPropertyDefaultImpl(Constants.ComplaintStatusID, hashTable.get(Constants.ComplaintStatusID)));

                newEntity.getProperties().put(Constants.ComplaintStatusDesc,
                        new ODataPropertyDefaultImpl(Constants.ComplaintStatusDesc, hashTable.get(Constants.ComplaintStatusDesc)));
                if (!hashTable.get(Constants.Quantity).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.Quantity,
                            new ODataPropertyDefaultImpl(Constants.Quantity, BigDecimal.valueOf(Double.parseDouble(hashTable.get(Constants.Quantity)))));
                }
                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, hashTable.get(Constants.UOM)));

                newEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashTable.get(Constants.Remarks)));

                newEntity.getProperties().put(Constants.CreatedBy,
                        new ODataPropertyDefaultImpl(Constants.CreatedBy, hashTable.get(Constants.CreatedBy)));

                newEntity.setResourcePath(hashTable.get(Constants.SetResourcePath), hashTable.get(Constants.SetResourcePath));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static ArrayList<ComplaintListModel> getComplaintList(String retListQry) throws OfflineODataStoreException {
        ArrayList<ComplaintListModel> retailerList = new ArrayList<>();
        if (offlineStore != null) {
            ComplaintListModel retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {


                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {

                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        retBean = new ComplaintListModel();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ComplaintNo);
                        retBean.setComplaintNo((String) property.getValue());

                        property = properties.get(Constants.ComplaintCategoryID);
                        retBean.setComplaintCategoryID((String) property.getValue());

                        property = properties.get(Constants.ComplaintTypeID);
                        retBean.setComplaintTypeID((String) property.getValue());

                        property = properties.get(Constants.ComplaintTypeDesc);
                        retBean.setComplaintTypeDesc((String) property.getValue());

                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        retBean.setOrderMaterialGroupDesc((String) property.getValue());

                        property = properties.get(Constants.MaterialDesc);
                        retBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.Batch);
                        retBean.setBatch((String) property.getValue());

                        property = properties.get(Constants.Quantity);
                        retBean.setQuantiity(String.valueOf(property.getValue()));

                        property = properties.get(Constants.ComplaintDate);
                        if (property != null) {

                            String convertFIPDate = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                            retBean.setComplaintDate(convertFIPDate);

                            // convertFIPDate = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                            //retBean.setComplaintDate(convertFIPDate);
                        }
                        property = properties.get("ComplaintPriorityDesc");
                        retBean.setComplaintPriorityDesc((String) property.getValue());
                        property = properties.get(Constants.Remarks);
                        retBean.setRemarks((String) property.getValue());
                        property = properties.get(Constants.ComplainCategoryDesc);
                        retBean.setComplainCategoryDesc((String) property.getValue());


//                        property = properties.get("FIPDocNo");
//                        retBean.setFIPDocNo((String) property.getValue());
//                        property = properties.get(Constants.Amount);
//                        if (property != null) {
//                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
//                            retBean.setAmount(mStrAmount.toString());
//                        }
//                        property = properties.get("FIPDate");
//                        String convertFIPDate="";
//                        if (property != null) {
//                            convertFIPDate = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
//                            retBean.setFIPDate(convertFIPDate);
//                        }
//                        if(!TextUtils.isEmpty(convertFIPDate)) {
//                            try {
//                                int dueDays = ConstantsUtils.getDueDays(convertFIPDate);
//                                if (dueDays < 0) {
//                                    retBean.setDueDays(String.valueOf(dueDays).replace("-", "") + "");
//                                } else {
//                                    retBean.setDueDays(String.valueOf(dueDays));
//                                }
//                            } catch (Exception e) {
//                                e.printStackTrace();
//                            }
//                        }
//                        property = properties.get(Constants.FIPGUID);
//                        ODataGuid mFIPGUID = null;
//                        try {
//                            mFIPGUID = (ODataGuid) property.getValue();
//                            retBean.setFIPGUID("guid'" + mFIPGUID.guidAsString36().toUpperCase() + "'");
//                        } catch (Exception e) {
//                            e.printStackTrace();
//                        }
//
//                        String ReferenceTypeDesc = getValueByColumnName(Constants.FinancialPostingItemDetails +
//                                "?$select=" + Constants.ReferenceTypeDesc + " &$filter = " +
//                                Constants.FIPGUID + " eq guid'" + mFIPGUID.guidAsString36().toUpperCase() + "'", Constants.ReferenceTypeDesc);
//
//                        retBean.setRemarks(ReferenceTypeDesc);
//
//
//                        String ReferenceTypeID = getValueByColumnName(Constants.FinancialPostingItemDetails +
//                                "?$select=" + Constants.ReferenceTypeID + " &$filter = " +
//                                Constants.FIPGUID + " eq guid'" + mFIPGUID.guidAsString36().toUpperCase() + "'", Constants.ReferenceTypeID);
//


                        retailerList.add(retBean);

                    }
                } else {
                    //    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                e.printStackTrace();
                //throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }


    public static ArrayList<SchemeListBean> getSchemesListGrp(Context context, String schemeQry) throws OfflineODataStoreException {
        ArrayList<SchemeListBean> schemeListBeanArrayList = new ArrayList<>();
        boolean overAllConditionStatus = false;
        DmsDivQryBean dmsDivQryBean = Constants.getDMSDIVForSchemes("");
        String mDMSDivQry = dmsDivQryBean.getDMSDivisionQry();
        String mSPGUID = Constants.getSPGUID();
        ArrayList<CPDMSDivisionBean> cpDMSDivisionList = new ArrayList<>();
        if (!Constants.CPGUIDVAL.equalsIgnoreCase("")) {
            cpDMSDivisionList = OfflineManager.getCPDMSDivisionList(Constants.CPDMSDivisions + "?$filter=" + Constants.PartnerMgrGUID + " eq guid'" + mSPGUID.toUpperCase() + "' and " + Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(Constants.CPGUIDVAL) + "' and " + mDMSDivQry + " ");
        }
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SchemeListBean schemeBean = null;
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = null;

            if (TextUtils.isEmpty(schemeQry)) {
                HashSet<String> hashSet = new HashSet<>();
                entities = GetSalesOrderListBasedOnScheme.getValidScheme(hashSet);
            } else {
                String queryFinal = Constants.Schemes + "?$filter = " + schemeQry + " ";
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, queryFinal);
            }

            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeListBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.SchemeName);
                    schemeBean.setSchemeName((String) property.getValue());
                    property = properties.get(Constants.SchemeID);
                    schemeBean.setSchemeId((String) property.getValue());
                    property = properties.get(Constants.SchemeTypeDesc);
                    schemeBean.setSchemeDesc((String) property.getValue());
                    schemeBean.setSchemeNameTitle(context.getResources().getString(R.string.lbl_scheme_name));
                    schemeBean.setSchemeTypeName(context.getResources().getString(R.string.lbl_scheme_type));
                    schemeBean.setSchemeApplicableTitle(context.getResources().getString(R.string.lbl_scheme_applicable));
                    property = properties.get(ConstantsUtils.TargetBasedID);
                    String targetIds = (String) property.getValue();
                    if (targetIds.equalsIgnoreCase("01")) {
                        schemeBean.setSlabTitle(context.getResources().getString(R.string.lbl_scheme_slabs, "Qty"));
                    } else {
                        schemeBean.setSlabTitle(context.getResources().getString(R.string.lbl_scheme_slabs, "Amount"));
                    }

                    property = properties.get(Constants.ValidTo);
                    String validTo = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    schemeBean.setValidDate(validTo);
                    property = properties.get(Constants.ValidFrom);
                    String validFrom = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    schemeBean.setValidFrom(validFrom);
                    property = properties.get(Constants.SchemeTypeID);
                    schemeBean.setSchemeTypeID((String) property.getValue());

                    property = properties.get(Constants.SchemeGUID);
                    ODataGuid mSchemeGuid = null;

                    try {
                        mSchemeGuid = (ODataGuid) property.getValue();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    overAllConditionStatus = false;
                    if (!Constants.CPGUIDVAL.equalsIgnoreCase("")) {
                        overAllConditionStatus = GetSalesOrderListBasedOnScheme.checkConditionOne(Constants.SchemeSalesAreas + "?$filter=" + Constants.SchemeGUID +
                                " eq guid'" + mSchemeGuid.guidAsString36().toUpperCase() + "' and " + dmsDivQryBean.getDMSDivisionIDQry() + " ", "", Constants.CPGUIDVAL, mSPGUID, cpDMSDivisionList);
                    } else {
                        overAllConditionStatus = GetSalesOrderListBasedOnScheme.checkConditionOne(Constants.SchemeSalesAreas + "?$filter=" + Constants.SchemeGUID +
                                " eq guid'" + mSchemeGuid.guidAsString36().toUpperCase() + "' and " + dmsDivQryBean.getDMSDivisionIDQry() + " ", "", "", mSPGUID, null);
                    }

//                    if (overAllConditionStatus) {
                        try {
                            schemeBean.setSchemeGuid(mSchemeGuid.guidAsString36().toUpperCase());
                            schemeBean.setSalesAreaBeanArrayList(getSchemeSalesAreas(schemeBean.getSchemeGuid()));
                            if (schemeBean.getSalesAreaBeanArrayList() != null) {
                               /* if(schemeBean.getSalesAreaBeanArrayList().size()>3){
                                    schemeBean.setSchemeApplicableFor(schemeBean.getSalesAreaBeanArrayList().get(0).getFinalGroupDesc()+", "+schemeBean.getSalesAreaBeanArrayList().get(1).getFinalGroupDesc()+", "+schemeBean.getSalesAreaBeanArrayList().get(2).getFinalGroupDesc()+"...");
                                }else if(schemeBean.getSalesAreaBeanArrayList().size()==3){
                                    schemeBean.setSchemeApplicableFor(schemeBean.getSalesAreaBeanArrayList().get(0).getFinalGroupDesc()+", "+schemeBean.getSalesAreaBeanArrayList().get(1).getFinalGroupDesc()+", "+schemeBean.getSalesAreaBeanArrayList().get(2).getFinalGroupDesc());
                                }else if(schemeBean.getSalesAreaBeanArrayList().size()==2){
                                    schemeBean.setSchemeApplicableFor(schemeBean.getSalesAreaBeanArrayList().get(0).getFinalGroupDesc()+", "+schemeBean.getSalesAreaBeanArrayList().get(1).getFinalGroupDesc());
                                }else if(schemeBean.getSalesAreaBeanArrayList().size()==1){
                                    schemeBean.setSchemeApplicableFor(schemeBean.getSalesAreaBeanArrayList().get(0).getFinalGroupDesc());
                                }*/
                                StringBuilder sb = new StringBuilder();
                                int i = 0;
                                int totalSize = schemeBean.getSalesAreaBeanArrayList().size();
                                for (SchemeSalesAreaBean schemeSalesAreaBean : schemeBean.getSalesAreaBeanArrayList()) {
                                    sb.append(schemeSalesAreaBean.getFinalGroupDesc());
                                    if (totalSize - 1 != i) {
                                        sb.append(", \n");
                                    }
                                    i++;
                                }
                                schemeBean.setSchemeApplicableFor(sb.toString());
                            }
                            schemeBean.setItemListBeanArrayList(getSchemeDisplayItemDetails(schemeBean.getSchemeGuid(), schemeBean));
                            if (schemeBean.getItemListBeanArrayList() != null) {
                               /* if(schemeBean.getItemListBeanArrayList().size()>1){
                                    schemeBean.setSchemeOnSaleOF(Constants.getOnSaleOfDescConcatString(schemeBean.getItemListBeanArrayList()));
                                }else{
                                    schemeBean.setSchemeOnSaleOF(schemeBean.getItemListBeanArrayList().get(0).getOnSalesDesc());
                                }*/
                                StringBuilder sb = new StringBuilder();
                                int i = 0;
                                int totalSize = schemeBean.getItemListBeanArrayList().size();
                                for (SchemeItemListBean schemeItemListBean : schemeBean.getItemListBeanArrayList()) {
                                    sb.append(schemeItemListBean.getOnSalesDesc());
                                    if (totalSize - 1 != i) {
                                        sb.append(", \n");
                                    }
                                    i++;
                                }
                                schemeBean.setSchemeOnSaleOF(sb.toString());
                            }
                            schemeBean.setSchemeSlabBeanArrayList(getSchemeSlabItem(schemeBean.getSchemeGuid(), schemeBean));

                            if (schemeBean.getSchemeSlabBeanArrayList() != null) {
                                String mStrCurr = "";
                                try {
                                    mStrCurr = schemeBean.getSchemeSlabBeanArrayList().get(0).getCurrency().equalsIgnoreCase("") ? "INR" : schemeBean.getSchemeSlabBeanArrayList().get(0).getCurrency();
                                } catch (Exception e) {
                                    mStrCurr = "INR";
                                    e.printStackTrace();
                                }
                                if (schemeBean.getSchemeSlabBeanArrayList().size() > 1) {
                                    if (schemeBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeDiscountAmount)) {
                                        String fromAmount = Constants.getCurrencySymbol(mStrCurr, schemeBean.getSchemeSlabBeanArrayList().get(0).getPayoutAmount());
                                        String toAmount = Constants.getCurrencySymbol(mStrCurr, schemeBean.getSchemeSlabBeanArrayList().get(schemeBean.getSchemeSlabBeanArrayList().size() - 1).getPayoutAmount());
                                        //  GET 5 INR - 6 INR BACK
                                        schemeBean.setSchemeSlabRule("Get " + fromAmount + " - " + toAmount + " back on");
                                    } else if (schemeBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeDiscountPercentage)) {
                                        String fromDiscPer = schemeBean.getSchemeSlabBeanArrayList().get(0).getPayoutAmount();
                                        String toDiscPer = schemeBean.getSchemeSlabBeanArrayList().get(schemeBean.getSchemeSlabBeanArrayList().size() - 1).getPayoutAmount();
                                        //  GET 5 % - 6 % BACK
                                        schemeBean.setSchemeSlabRule("Get " + fromDiscPer + "% - " + toDiscPer + "% back on");
                                    } else {
                                        String mStrFreeQtyUOM = schemeBean.getSchemeSlabBeanArrayList().get(0).getFreeQtyUOM();
                                        String fromQty = schemeBean.getSchemeSlabBeanArrayList().get(0).getPayoutAmount();
                                        String toQty = schemeBean.getSchemeSlabBeanArrayList().get(schemeBean.getSchemeSlabBeanArrayList().size() - 1).getPayoutAmount();
                                        //  GET 5 PC - 6 PC BACK
                                        schemeBean.setSchemeSlabRule("Get " + fromQty + " " + mStrFreeQtyUOM + " - " + toQty + " " + mStrFreeQtyUOM + " back on");
                                    }


                                } else {
                                    if (schemeBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeDiscountAmount)) {
                                        String fromAmount = Constants.getCurrencySymbol(mStrCurr, schemeBean.getSchemeSlabBeanArrayList().get(0).getPayoutAmount());
                                        //  GET 5 INR - 6 INR BACK
                                        schemeBean.setSchemeSlabRule("Get " + fromAmount + " back on");
                                    } else if (schemeBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeDiscountPercentage)) {
                                        String fromDiscPer = schemeBean.getSchemeSlabBeanArrayList().get(0).getPayoutAmount();
                                        //  GET 5 % BACK
                                        schemeBean.setSchemeSlabRule("Get " + fromDiscPer + "% back on");
                                    } else {
                                        String mStrFreeQtyUOM = schemeBean.getSchemeSlabBeanArrayList().get(0).getFreeQtyUOM();
                                        String fromQty = schemeBean.getSchemeSlabBeanArrayList().get(0).getPayoutAmount();
                                        //  GET 5 PC BACK
                                        schemeBean.setSchemeSlabRule("Get " + fromQty + " " + mStrFreeQtyUOM + " back on");
                                    }
                                }
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        schemeListBeanArrayList.add(schemeBean);
//                    }
                }
            }
        }
        return schemeListBeanArrayList;
    }

    /*
 to get scheme sales area details
  */
    private static ArrayList<SchemeSalesAreaBean> getSchemeSalesAreas(String crSkuGuid) {
        ArrayList<SchemeSalesAreaBean> SchSalAreaList = new ArrayList<>();
        String SalesAreaQuery = Constants.SchemeSalesAreas + "?$filter= " + Constants.SchemeGUID + " eq guid'" + crSkuGuid.toLowerCase() + "'";
        if (offlineStore != null) {
            HashSet<String> cpGroup;
            SchemeSalesAreaBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, SalesAreaQuery);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        cpGroup = new HashSet<>();
                        skuGrpBean = new SchemeSalesAreaBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPGroup1ID);
                        skuGrpBean.setCPGroup1ID((String) property.getValue());
                        property = properties.get(Constants.CPGroup2ID);
                        skuGrpBean.setCPGroup2ID((String) property.getValue());
                        property = properties.get(Constants.CPGroup3ID);
                        skuGrpBean.setCPGroup3ID((String) property.getValue());
                        property = properties.get(Constants.CPGroup4ID);
                        skuGrpBean.setCPGroup4ID((String) property.getValue());

                        property = properties.get(Constants.CPGroup1Desc);
                        String group1 = (String) property.getValue();
                        if (!TextUtils.isEmpty(group1)) {
                            cpGroup.add(group1);
                        }
                        property = properties.get(Constants.CPGroup2Desc);
                        String group2 = (String) property.getValue();
                        if (!TextUtils.isEmpty(group2)) {
                            cpGroup.add(group2);
                        }
                        property = properties.get(Constants.CPGroup3Desc);
                        String group3 = (String) property.getValue();
                        if (!TextUtils.isEmpty(group3)) {
                            cpGroup.add(group3);
                        }
                        property = properties.get(Constants.CPGroup4Desc);
                        String group4 = (String) property.getValue();
                        if (!TextUtils.isEmpty(group4)) {
                            cpGroup.add(group4);
                        }
                        String grp = TextUtils.join("-", cpGroup);

                        skuGrpBean.setFinalGroupDesc(grp);
                        SchSalAreaList.add(skuGrpBean);
                    }
                }

            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }
        return SchSalAreaList;
    }

    /*
to get scheme sales area details
*/
    private static ArrayList<SchemeItemListBean> getSchemeDisplayItemDetails(String crSkuGuid, SchemeListBean schemeListBean) {
        ArrayList<SchemeItemListBean> SchSalAreaList = new ArrayList<>();
        boolean isSchemeBasket = Constants.isSchemeBasketOrNot(crSkuGuid);
        String mStrOnSaleOnDesc = "";
        String SalesAreaQuery = Constants.SchemeItemDetails + "?$filter= " + Constants.SchemeGUID + " eq guid'" + crSkuGuid + "' &$orderby = ItemNo asc";
        if (offlineStore != null) {
            SchemeItemListBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, SalesAreaQuery);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        skuGrpBean = new SchemeItemListBean();
                        properties = entity.getProperties();
                        property = properties.get(ConstantsUtils.OnSaleOfCatDesc);
                        schemeListBean.setOnSaleOfCatDesc((String) property.getValue());
                        property = properties.get(ConstantsUtils.OnSaleOfCatID);
                        skuGrpBean.setOnSaleOfCatID((String) property.getValue());
                        if (skuGrpBean.getOnSaleOfCatID().equalsIgnoreCase(Constants.OnSaleOfBanner)) {
                            property = properties.get(ConstantsUtils.BannerDesc);
                        } else if (skuGrpBean.getOnSaleOfCatID().equalsIgnoreCase(Constants.OnSaleOfBrand)) {
                            property = properties.get(Constants.BrandDesc);
                        } else if (skuGrpBean.getOnSaleOfCatID().equalsIgnoreCase(Constants.OnSaleOfProdCat)) {
                            property = properties.get(ConstantsUtils.ProductCatDesc);
                        } else if (skuGrpBean.getOnSaleOfCatID().equalsIgnoreCase(Constants.OnSaleOfSchemeMatGrp)) {
                            property = properties.get(Constants.SKUGroupDesc);
                        } else if (skuGrpBean.getOnSaleOfCatID().equalsIgnoreCase(Constants.OnSaleOfOrderMatGrp)) {
                            property = properties.get(Constants.OrderMaterialGroupDesc);
                       //     property = properties.get(Constants.SKUGroupDesc);
                        //    property = properties.get(ConstantsUtils.OnSaleOfCatDesc);
                        } else {
                            property = properties.get(Constants.MaterialDesc);
                        }
                        mStrOnSaleOnDesc = (String) property.getValue();
                        if (!isSchemeBasket) {
                            skuGrpBean.setOnSalesDesc((String) property.getValue());
                        } else {
                            property = properties.get(Constants.ItemCatID);
                            String mStrItemCatID = (String) property.getValue();

                            if (mStrItemCatID.equalsIgnoreCase("000002")) {
                                skuGrpBean.setOnSalesDesc(Constants.BasketHeadingName);
                            } else {
                                skuGrpBean.setOnSalesDesc(mStrOnSaleOnDesc);
                            }
                        }

                        property = properties.get(ConstantsUtils.ItemMin);
                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }

                        property = properties.get(Constants.UOM);
                        skuGrpBean.setUOM((String) property.getValue());

                        if (checkNoUOMZero(String.valueOf(property.getValue()))) {
                            if (properties.get(ConstantsUtils.ItemMin) != null)
                                skuGrpBean.setItemMin(trimQtyDecimalPlace(qty));
                            else
                                skuGrpBean.setItemMin("0");
                        } else {
                            if (properties.get(ConstantsUtils.ItemMin) != null)
                                skuGrpBean.setItemMin(qty);
                            else
                                skuGrpBean.setItemMin("0.000");
                        }
                        SchSalAreaList.add(skuGrpBean);
                    }
                }

            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }
        return SchSalAreaList;
    }

    /*get scheme slab item*/
    private static ArrayList<SchemeSlabBean> getSchemeSlabItem(String schemeGUID, SchemeListBean schemeListBean) {
        ArrayList<SchemeSlabBean> SchSalAreaList = new ArrayList<>();
        String SalesAreaQuery = Constants.SchemeSlabs + "?$filter= " + Constants.SchemeItemGUID + " eq guid'" + schemeGUID + "' &$orderby = SubItem asc";
        if (offlineStore != null) {
            SchemeSlabBean slabBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, SalesAreaQuery);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        slabBean = new SchemeSlabBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.SaleUnitID);
                        String mStrSlabUnitID = (String) property.getValue();
                        property = properties.get(Constants.SlabTypeDesc);
                        String mStrSlabTypeDesc = (String) property.getValue();
                        property = properties.get(Constants.SlabRuleDesc);
                        schemeListBean.setSlabRuleDesc((String) property.getValue() + " (" + mStrSlabTypeDesc + ")");
                        property = properties.get(Constants.SlabRuleID);
                        schemeListBean.setSlabRuleID((String) property.getValue());
                        property = properties.get(Constants.MaterialDesc);
                        slabBean.setMaterialDesc((String) property.getValue());
                        property = properties.get(Constants.SlabGUID);


                        ODataGuid mSchemeGuid = null;
                        String schemeSlabGUID = "";
                        try {
                            mSchemeGuid = (ODataGuid) property.getValue();
                            schemeSlabGUID = mSchemeGuid.guidAsString36().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.UOM);
                        String mStrUom = (String) property.getValue();

                        property = properties.get(Constants.Currency);
                        slabBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.FreeQtyUOM);
                        String mStrFreeQtyUOM = (String) property.getValue();
                        slabBean.setFreeQtyUOM(mStrFreeQtyUOM);
                        if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeDiscountAmount)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.DISC_AMOUNT);
                            property = properties.get(Constants.PayoutAmount);
                            BigDecimal payoutPer = (BigDecimal) property.getValue();
                            if (payoutPer != null) {
                                slabBean.setPayoutAmount(payoutPer.toString());
                            } else {
                                slabBean.setPayoutAmount("0.0");
                            }
                        } else if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeDiscountPercentage)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.DISC_PERCENTAGE);
                            property = properties.get(Constants.PayoutPerc);
                            BigDecimal payoutPer = (BigDecimal) property.getValue();
                            if (payoutPer != null) {
                                slabBean.setPayoutAmount(payoutPer.toString());
                            } else {
                                slabBean.setPayoutAmount("0.0");
                            }
                        } else if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeProduct)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.FREE_QTY);
                            property = properties.get(Constants.FreeQty);
                            String stFreeQty = "";
                            if (checkNoUOMZero(mStrFreeQtyUOM))
                                stFreeQty = trimQtyDecimalPlace(property.getValue().toString());
                            else
                                stFreeQty = property.getValue().toString();

                            slabBean.setPayoutAmount(stFreeQty);


                        } else if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeSKUGroup)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.FREE_QTY);
                            property = properties.get(Constants.FreeQty);
                            String stFreeQty = "";
                            if (checkNoUOMZero(mStrFreeQtyUOM))
                                stFreeQty = trimQtyDecimalPlace(property.getValue().toString());
                            else
                                stFreeQty = property.getValue().toString();

                            property = properties.get(Constants.SKUGroupID);
                            String mStrSKUGroupID = (String) property.getValue();

                            String materialDesc = getValueByColumnName(Constants.SchemeFreeMatGrpMaterials + "?$select=" + Constants.MaterialGrpDesc + " &$filter = "
                                    + Constants.SchFreeMatGrpGUID + " eq guid'" + Constants.convertStrGUID32to36(mStrSKUGroupID) + "' &$orderby = ItemNo asc &$top=1", Constants.MaterialGrpDesc);
                            slabBean.setPayoutAmount(stFreeQty);
                            slabBean.setMaterialDesc(materialDesc);


                        } else if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeCRSSKUGroup)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.FREE_QTY);
                            property = properties.get(Constants.FreeQty);
                            String stFreeQty = "";
                            if (checkNoUOMZero(mStrFreeQtyUOM))
                                stFreeQty = trimQtyDecimalPlace(property.getValue().toString());
                            else
                                stFreeQty = property.getValue().toString();

                            property = properties.get(Constants.OrderMaterialGroupDesc);
                            String orderMatGroupDesc = (String) property.getValue();
                            slabBean.setPayoutAmount(stFreeQty);
                            slabBean.setMaterialDesc(orderMatGroupDesc);


                        } else if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeScratchCard)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.FREE_QTY);
                            property = properties.get(Constants.CardTitle);
                            String cardTitle = (String) property.getValue();

                            property = properties.get(Constants.NoOfCards);

                            String noOfCards = "";
                            if (checkNoUOMZero(mStrFreeQtyUOM))
                                noOfCards = trimQtyDecimalPlace(property.getValue().toString());
                            else
                                noOfCards = property.getValue().toString();

                            slabBean.setPayoutAmount(noOfCards);


                            slabBean.setMaterialDesc(cardTitle);
                            property = properties.get(Constants.ScratchCardDesc);
                            slabBean.setScratchCardDesc((String) property.getValue());
                            slabBean.setMaterialDesc((String) property.getValue());

                        } else if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeFreeArticle)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.FREE_QTY);
                            property = properties.get(Constants.FreeQty);
                            String stFreeQty = "";
                            if (checkNoUOMZero(mStrFreeQtyUOM))
                                stFreeQty = trimQtyDecimalPlace(property.getValue().toString());
                            else
                                stFreeQty = property.getValue().toString();

                            property = properties.get(Constants.FreeArticle);
                            String freeArticle = (String) property.getValue();
                            slabBean.setPayoutAmount(stFreeQty);


                            property = properties.get(Constants.FreeArticleDesc);
                            slabBean.setFreeArticleDesc((String) property.getValue());
                            slabBean.setMaterialDesc((String) property.getValue());
                        } else {
                            schemeListBean.setSlabRuleType(ConstantsUtils.FREE_QTY);
                            property = properties.get(Constants.FreeQty);
                            String stFreeQty = "";
                            if (checkNoUOMZero(mStrFreeQtyUOM))
                                stFreeQty = trimQtyDecimalPlace(property.getValue().toString());
                            else
                                stFreeQty = property.getValue().toString();

                            slabBean.setPayoutAmount(stFreeQty);
                        }
                        if (mStrSlabUnitID.equalsIgnoreCase(Constants.SaleUnitIDAmountWise)) {
                            property = properties.get(Constants.FromValue);
                        } else {
                            property = properties.get(Constants.FromQty);
                        }

                        String stFromQty = "";
                        if (checkNoUOMZero(mStrUom))
                            stFromQty = trimQtyDecimalPlace(property.getValue().toString());
                        else
                            stFromQty = property.getValue().toString();
                        slabBean.setFromQty(stFromQty);
                        if (mStrSlabUnitID.equalsIgnoreCase(Constants.SaleUnitIDAmountWise)) {
                            property = properties.get(Constants.ToValue);
                        } else {
                            property = properties.get(Constants.ToQty);
                        }
                        String stToQty = "";
                        if (checkNoUOMZero(mStrUom))
                            stToQty = trimQtyDecimalPlace(property.getValue().toString());
                        else
                            stToQty = property.getValue().toString();

                        if (mStrSlabUnitID.equalsIgnoreCase(Constants.SaleUnitIDAmountWise)) {
                            slabBean.setToQty(UtilConstants.removeLeadingZerowithTwoDecimal(slabBean.getFromQty()) + "-" + UtilConstants.removeLeadingZerowithTwoDecimal(stToQty));
                        } else {
                            slabBean.setToQty(slabBean.getFromQty() + "-" + stToQty);
                        }


                        SchSalAreaList.add(slabBean);
                    }
                }

            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }
        return SchSalAreaList;
    }

    public static SOListBean getRODetails(String qry) {
        SOListBean soListBean = null;
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntitySet feed;
                    soListBean = new SOListBean();
                    ODataEntity entity = (ODataEntity) response.getPayload();
                    //Retrieve the data from the response
                    properties = entity.getProperties();
                    property = properties.get(Constants.SONo);

                    if (property != null)
                        soListBean.setSONo(property.getValue().toString());

                    property = properties.get(Constants.TotalAmount);
                    if (property != null)
                        soListBean.setTotalAmt(property.getValue().toString());

                    property = properties.get(Constants.StatusID);
                    if (property != null) {
                        soListBean.setStatus((String) property.getValue());
                    }

                    property = properties.get(Constants.Currency);
                    if (property != null)
                        soListBean.setCurrency(property.getValue().toString());

                    property = properties.get(Constants.NetAmount);
                    if (property != null)
                        soListBean.setNetPrice(property.getValue().toString());

                    property = properties.get(Constants.OrderNo);
                    if (property != null)
                        soListBean.setOrderNo(property.getValue().toString());
                    property = properties.get(Constants.SalesAreaDesc);
                    if (property != null)
                        soListBean.setSalesAreaDesc(property.getValue().toString());
                    property = properties.get(Constants.SalesArea);
                    if (property != null)
                        soListBean.setSalesArea(property.getValue().toString());
                    property = properties.get(Constants.OrderTypeDesc);
                    if (property != null)
                        soListBean.setOrderTypeDesc(property.getValue().toString());
                    property = properties.get(Constants.OrderType);
                    if (property != null)
                        soListBean.setOrderType(property.getValue().toString());

                    property = properties.get(Constants.ShipToPartyName);
                    if (property != null)
                        soListBean.setShipToName(property.getValue().toString());

                    property = properties.get(Constants.ShipToParty);
                    if (property != null)
                        soListBean.setShipTo(property.getValue().toString());

                    property = properties.get(Constants.TransporterName);
                    if (property != null)
                        soListBean.setTransportName(property.getValue().toString());
                    property = properties.get(Constants.TransporterID);
                    if (property != null)
                        soListBean.setTransportNameID(property.getValue().toString());

                    property = properties.get(Constants.Plant);
                    if (property != null) {
                        soListBean.setPlant((String) property.getValue());
                    }

                    property = properties.get(Constants.UnloadingPoint);
                    if (property != null) {
                        soListBean.setUnloadingPointDesc((String) property.getValue());
                    }

                    property = properties.get(Constants.ReceivingPoint);
                    if (property != null) {
                        soListBean.setReceivingPointDesc((String) property.getValue());
                    }
                    property = properties.get(Constants.PaytermDesc);
                    if (property != null) {
                        soListBean.setPaymentTermDesc(property.getValue().toString());
                    }
                    property = properties.get(Constants.Payterm);
                    if (property != null) {
                        soListBean.setPaymentTerm(property.getValue().toString());
                    }
                    property = properties.get(Constants.Incoterm1Desc);
                    if (property != null) {
                        soListBean.setIncoterm1Desc(property.getValue().toString());
                    }
                    property = properties.get(Constants.Incoterm1);
                    if (property != null) {
                        soListBean.setIncoTerm1(property.getValue().toString());
                    }
                    property = properties.get(Constants.Incoterm2);
                    if (property != null) {
                        soListBean.setIncoterm2(property.getValue().toString());
                    }
                    property = properties.get(Constants.ShippingTypeID);
                    if (property != null) {
                        soListBean.setShippingPoint(property.getValue().toString());
                    }
                    property = properties.get(Constants.ShippingTypeDesc);
                    if (property != null) {
                        soListBean.setShippingPointDesc(property.getValue().toString());
                    }
                    property = properties.get(Constants.SalesOffice);
                    if (property != null) {
                        soListBean.setSalesOfficeId(property.getValue().toString());
                    }
                    property = properties.get(Constants.SaleOffDesc);
                    if (property != null) {
                        soListBean.setSaleOffDesc(property.getValue().toString());
                    }

                    property = properties.get(Constants.SalesGroup);
                    if (property != null) {
                        soListBean.setSalesGroup(property.getValue().toString());
                    }
                    property = properties.get(Constants.SaleGrpDesc);
                    if (property != null) {
                        soListBean.setSaleGrpDesc(property.getValue().toString());
                    }
                    soListBean.setAddress(SOUtils.getAddressValue(properties));

                    property = properties.get(Constants.CustomerPO);
                    if (property != null) {
                        soListBean.setPONo(property.getValue().toString());
                    }
                    property = properties.get(Constants.CustomerNo);
                    if (property != null) {
                        soListBean.setSoldTo(property.getValue().toString());
                    }
                    property = properties.get(Constants.CustomerName);
                    if (property != null) {
                        soListBean.setSoldToName(property.getValue().toString());
                    }

                    property = properties.get(Constants.ApprovalStatus);
                    if (property != null) {
                        soListBean.setDelvStatus(property.getValue().toString());
                    }
                    property = properties.get(Constants.MeansOfTranstyp);
                    if (property != null) {
                        soListBean.setMeansOfTranstyp(property.getValue().toString());
                    }
                    property = properties.get(Constants.MeansOfTranstypDesc);
                    if (property != null) {
                        soListBean.setMeansOfTranstypDesc(property.getValue().toString());
                    }

                    property = properties.get(Constants.DmsDivision);
                    if (property != null)
                        soListBean.setDmsDivision(property.getValue().toString());

                    property = properties.get(Constants.DmsDivisionDesc);
                    if (property != null)
                        soListBean.setDMSDivisionDesc(property.getValue().toString());

                    property = properties.get(Constants.SalesDist);
                    if (property != null)
                        soListBean.setSalesDist(property.getValue().toString());
                    property = properties.get(Constants.SalesDistDesc);
                    if (property != null)
                        soListBean.setSalesDistDesc(property.getValue().toString());
                    property = properties.get(Constants.OrderDate);
                    if (property != null) {
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        soListBean.setOrderDate(convertDateFormat);
                    }
                    property = properties.get(Constants.CustomerPODate);
                    if (property != null) {
                        String customerPoDate = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        soListBean.setPODate(customerPoDate);
                    }

                    ODataNavigationProperty soItemDetailsProp = entity.getNavigationProperty(Constants.SSROItemDetails);
                    feed = (ODataEntitySet) soItemDetailsProp.getNavigationContent();
                    List<ODataEntity> feedEntities = feed.getEntities();
                    ArrayList<SOItemBean> soItemBeanArrayList = new ArrayList<>();
                    SOItemBean soItemBean;

                    for (ODataEntity soItemEntity : feedEntities) {
                        soItemBean = new SOItemBean();
                        properties = soItemEntity.getProperties();
                        property = properties.get(Constants.MaterialNo);
                        if (property != null)
                            soItemBean.setMatCode(property.getValue().toString());
                        property = properties.get(Constants.MaterialDesc);
                        if (property != null)
                            soItemBean.setMatDesc(property.getValue().toString());
                        property = properties.get(Constants.UOM);
                        if (property != null)
                            soItemBean.setUom(property.getValue().toString());
                        property = properties.get(Constants.Quantity);
                        if (property != null) {
//                            if (checkNoUOMZero(String.valueOf(soItemBean.getUom()))) {
//                                soItemBean.setSoQty(trimQtyDecimalPlace(property.getValue().toString()));
//                            } else {
                                soItemBean.setSoQty(property.getValue().toString());
//                            }
                        }

                        property = properties.get(Constants.UnitPrice);
                        if (property != null)
                            soItemBean.setUnitPrice(property.getValue().toString());
                        property = properties.get(Constants.NetAmount);
                        if (property != null)
                            soItemBean.setNetAmount(property.getValue().toString());
                        property = properties.get(Constants.Plant);
                        if (property != null)
                            soItemBean.setPlantId(property.getValue().toString());
                        property = properties.get(Constants.PlantDesc);
                        if (property != null)
                            soItemBean.setPlantDesc(property.getValue().toString());
                        property = properties.get(Constants.Currency);
                        if (property != null)
                            soItemBean.setCurrency(property.getValue().toString());
                        property = properties.get(Constants.ItemNo);
                        if (property != null)
                            soItemBean.setItemNo(property.getValue().toString());
                        property = properties.get(Constants.SONo);
                        if (property != null)
                            soItemBean.setSetSONo(property.getValue().toString());
                        property = properties.get(Constants.Status);
                        if (property != null)
                            soItemBean.setStatus(property.getValue().toString());


                        property = properties.get(Constants.RejectionReasonDesc);
                        if (property != null)
                            soItemBean.setRejectionReasonDesc(property.getValue().toString());

                        property = properties.get(Constants.RejectionReasonID);
                        if (property != null)
                            soItemBean.setRejectionReasonID(property.getValue().toString());

                        property = properties.get(Constants.RefDocNo);
                        if (property != null)
                            soItemBean.setRefDocNo(property.getValue().toString());

                        property = properties.get(Constants.DelvQty);
                        if (property != null)
                            soItemBean.setDelvQty(property.getValue().toString());

                        property = properties.get(Constants.OpenQty);
                        if (property != null)
                            soItemBean.setOpenQty(property.getValue().toString());

                        property = properties.get(Constants.Quantity);
                        if (property != null)
                            soItemBean.setQuantity(property.getValue().toString());

                        soItemBeanArrayList.add(soItemBean);
                    }
                    Collections.sort(soItemBeanArrayList, new Comparator<SOItemBean>() {
                        @Override
                        public int compare(SOItemBean arg0, SOItemBean arg1) {

                            return arg0.getItemNo().compareTo(arg1.getItemNo());
                        }
                    });
                    soListBean.setSoItemBeanArrayList(soItemBeanArrayList);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return soListBean;
    }

    public static ArrayList<MyPerformanceBean> getMyPerfomnceList(String myPerfQry) throws OfflineODataStoreException {

        ArrayList<MyPerformanceBean> myPerfList = new ArrayList<MyPerformanceBean>();


        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MyPerformanceBean myPerfBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(myPerfQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        myPerfBean = new MyPerformanceBean();

                        property = properties.get(Constants.PerformanceOnID);
                        myPerfBean.setMaterialNo((String) property.getValue());
                        property = properties.get(Constants.PerformanceOnIDDesc);
                        myPerfBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.MaterialGroupID);
                        myPerfBean.setMaterialGroupID((String) property.getValue());
                        property = properties.get(Constants.MaterialGroupDesc);
                        myPerfBean.setMaterialGroupDesc((String) property.getValue());

                        property = properties.get(Constants.UOM);
                        myPerfBean.setUOM((String) property.getValue());

                        property = properties.get(Constants.ReportOnID);
                        String mStrReportType = (String) property.getValue();
                        // TODO ReportOnID equal to  '02' display amount values other wise quantity values
                        if (mStrReportType.equalsIgnoreCase("02")) {
                            property = properties.get(Constants.AmtLMTD);
                            BigDecimal mAmtLmtdQty = null;
                            ;
                            if (property != null) {
                                mAmtLmtdQty = (BigDecimal) property.getValue();

                                myPerfBean.setAmtLMTD(UtilConstants.removeLeadingZeroVal(mAmtLmtdQty.toString()));
                            }

                            property = properties.get(Constants.AmtMTD);
                            BigDecimal mAmtMTD = null;
                            ;
                            if (property != null) {
                                mAmtMTD = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMTD(UtilConstants.removeLeadingZeroVal(mAmtMTD.toString()));
                            }

                            property = properties.get(Constants.AmtMonthlyGrowth);
                            BigDecimal mAmtGr = null;
                            ;
                            if (property != null) {
                                mAmtGr = (BigDecimal) property.getValue();
                                myPerfBean.setGrPer(UtilConstants.removeLeadingZeroVal(mAmtGr.toString()));
                            }

                            property = properties.get(Constants.AmtMonth1PrevPerf);
                            if (property != null) {
                                BigDecimal mStrQty = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMonth1PrevPerf(UtilConstants.removeLeadingZeroVal(mStrQty.toString()));
                            }

                            property = properties.get(Constants.AmtMonth2PrevPerf);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMonth2PrevPerf(UtilConstants.removeLeadingZeroVal(mStrAmount.toString()));
                            }

                            property = properties.get(Constants.AmtMonth3PrevPerf);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMonth3PrevPerf(UtilConstants.removeLeadingZeroVal(mStrAmount.toString()));
                            }
                        } else if (mStrReportType.equalsIgnoreCase("01")) {

                            property = properties.get(Constants.QtyLMTD);
                            BigDecimal mAmtLmtdQty = null;
                            if (property != null) {
                                mAmtLmtdQty = (BigDecimal) property.getValue();
                                myPerfBean.setAmtLMTD(UtilConstants.removeLeadingZeroVal(mAmtLmtdQty.toString()));
                            }

                            property = properties.get(Constants.QtyMTD);
                            BigDecimal mAmtMTD = null;
                            if (property != null) {
                                mAmtMTD = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMTD(UtilConstants.removeLeadingZeroVal(mAmtMTD.toString()));
                            }

                            property = properties.get(Constants.QtyMonthlyGrowth);
                            BigDecimal mAmtGr = null;
                            ;
                            if (property != null) {
                                mAmtGr = (BigDecimal) property.getValue();
                                myPerfBean.setGrPer(UtilConstants.removeLeadingZeroVal(mAmtGr.toString()));
                            }

                            property = properties.get(Constants.QtyMonth1PrevPerf);
                            if (property != null) {
                                BigDecimal mStrQty = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMonth1PrevPerf(UtilConstants.removeLeadingZeroVal(mStrQty.toString()));
                            }

                            property = properties.get(Constants.QtyMonth2PrevPerf);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMonth2PrevPerf(UtilConstants.removeLeadingZeroVal(mStrAmount.toString()));
                            }

                            property = properties.get(Constants.QtyMonth3PrevPerf);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMonth3PrevPerf(UtilConstants.removeLeadingZeroVal(mStrAmount.toString()));
                            }
                        }


                        myPerfList.add(myPerfBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return myPerfList;

    }

    public static String[][] getInVoidTypeId() {
        String[][] mArrayDistributors = null;
        String qryStr = Constants.SSInvoiceTypes + "?$filter=" + Constants.GoodsIssueFromID + " eq '000002' and GoodsIssueCatID eq '000002'";
        try {
            mArrayDistributors = OfflineManager.getInvoiceTypeId(qryStr);

        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }

        if (mArrayDistributors == null) {
            mArrayDistributors = new String[2][1];
            mArrayDistributors[0][0] = "";
            mArrayDistributors[1][0] = "";
        }

        return mArrayDistributors;
    }

    public static String[][] getInvoiceTypeId(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        //Retrieve the data from the response
                        distVal = new String[2][entities.size()];
                        int incVal = 0;
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            property = properties.get(Constants.InvoiceTypeID);
                            distVal[0][incVal] = (String) property.getValue();

                            property = properties.get(Constants.InvoiceTypeDesc);
                            distVal[1][incVal] = (String) property.getValue();
                            incVal++;
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

    public static ArrayList<RetailerStockBean> getSampleCollectionList(String retailerStockQry, ArrayList<RetailerStockBean> retailerStockList, String typesetUOM) throws OfflineODataStoreException {
        ArrayList<String> tempArrList = new ArrayList<>();
        if (offlineStore != null) {
            RetailerStockBean retailerStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    int itmPoss = 0;
                    for (ODataEntity entity : entities) {
                        ArrayList<String> uomList = new ArrayList<>();
                        properties = entity.getProperties();

                        retailerStockBean = new RetailerStockBean();
                        property = properties.get(Constants.UOM);
                        retailerStockBean.setUom((String) property.getValue());
                        property = properties.get(Constants.UnrestrictedQty);
                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }
                        if (checkNoUOMZero(retailerStockBean.getUom())) {
                            retailerStockBean.setUnrestrictedQty(trimQtyDecimalPlace(qty));
                        } else {
                            retailerStockBean.setUnrestrictedQty(qty);
                        }

                        property = properties.get(Constants.AlternativeUOM1);
                        retailerStockBean.setAlternativeUOM1((String) property.getValue() != null ? (String) property.getValue() : "");
                        property = properties.get(Constants.AlternativeUOM2);
                        retailerStockBean.setAlternativeUOM2((String) property.getValue() != null ? (String) property.getValue() : "");


                        property = properties.get(Constants.AlternativeUOM1Den);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            if (mStrAmount != null) {
                                retailerStockBean.setAlternativeUOM1Den(mStrAmount.toString());
                            } else {
                                retailerStockBean.setAlternativeUOM1Den("0.0");
                            }

                        }

                        property = properties.get(Constants.AlternativeUOM1Num);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            if (mStrAmount != null) {
                                retailerStockBean.setAlternativeUOM1Num(mStrAmount.toString());
                            } else {
                                retailerStockBean.setAlternativeUOM1Num("0.0");
                            }

                        }

                        if (!TextUtils.isEmpty(retailerStockBean.getUom()))
                            uomList.add(retailerStockBean.getUom());
                        if (!TextUtils.isEmpty(retailerStockBean.getAlternativeUOM1()) && !uomList.contains(retailerStockBean.getAlternativeUOM1()))
                            uomList.add(retailerStockBean.getAlternativeUOM1());
                        if (!TextUtils.isEmpty(retailerStockBean.getAlternativeUOM2()) && !uomList.contains(retailerStockBean.getAlternativeUOM2()))
                            uomList.add(retailerStockBean.getAlternativeUOM2());

                        retailerStockBean.setEnterdUOM(retailerStockBean.getUom());

                        retailerStockBean.setUomList(uomList);

                        property = properties.get(Constants.OrderMaterialGroupID);
                        retailerStockBean.setOrderMaterialGroupID((String) property.getValue());

                        property = properties.get(Constants.Brand);
                        retailerStockBean.setBrandId((String) property.getValue());

                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());

                        property = properties.get(Constants.MaterialDesc);
                        retailerStockBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.MaterialNo);
                        retailerStockBean.setMaterialNo((String) property.getValue());

                        property = properties.get(ConstantsUtils.Brand);
                        retailerStockBean.setBrand((String) property.getValue());

                        property = properties.get(Constants.CPStockItemGUID);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            retailerStockBean.setCPStockItemGUID(mCpGuid.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (qty != null && Double.parseDouble(qty) > 0) {
                            retailerStockBean.setRetailerPos(itmPoss);
                            retailerStockList.add(retailerStockBean);
                            itmPoss++;
                        }

                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerStockList;

    }

    public static ArrayList<ReturnOrderBean> getReturnOrderList(List<ODataEntity> entities, ArrayList<ReturnOrderBean> returnOrderBeanList) throws OfflineODataStoreException {

        ArrayList<String> tempArrList = new ArrayList<>();
        //Check if the offline oData store is initialized
        String materilQry = "";
        if (offlineStore != null) {
            ReturnOrderBean retailerStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Retrieve the data from the response
                int totalLength = entities.size();
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();

                    retailerStockBean = new ReturnOrderBean();
                    property = properties.get(Constants.CPStockItemGUID);
                    try {
                        ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                        retailerStockBean.setCPStockItemGUID(mSpItemGuid.guidAsString36());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    ArrayList<String> uomList = new ArrayList<>();

                    property = properties.get(Constants.Material_No);

                    String MatNo = (String) property.getValue();
                    retailerStockBean.setMaterialNo((String) property.getValue());

                    property = properties.get(Constants.DbBatch);
                    retailerStockBean.setBatch((String) property.getValue());

                   /* property = properties.get(Constants.AlternativeUOM2);
                    retailerStockBean.setAlternativeUOM2((String) property.getValue());
                    if (!TextUtils.isEmpty(retailerStockBean.getAlternativeUOM2()) && !uomList.contains(retailerStockBean.getAlternativeUOM2())){
                        uomList.add(retailerStockBean.getAlternativeUOM2());
                    }*/

                    property = properties.get(Constants.AlternativeUOM1);
                    retailerStockBean.setAlternativeUOM1((String) property.getValue());
                    if (!TextUtils.isEmpty(retailerStockBean.getAlternativeUOM1()) && !uomList.contains(retailerStockBean.getAlternativeUOM1())) {
                        uomList.add(retailerStockBean.getAlternativeUOM1());
                    }

                    property = properties.get(Constants.Material_Desc);
                    retailerStockBean.setMaterialDesc((String) property.getValue());

                    property = properties.get(Constants.StockValue);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        if (mStrAmount != null) {
                            retailerStockBean.setStockValue(mStrAmount.toString());
                        } else {
                            retailerStockBean.setStockValue("0.0");
                        }

                    }

                    property = properties.get(Constants.Currency);
                    retailerStockBean.setCurrency((String) property.getValue());
                    property = properties.get(Constants.UOM);
                    retailerStockBean.setUom((String) property.getValue());
                    retailerStockBean.setReturnUOM(retailerStockBean.getUom());
                    property = properties.get(Constants.MRP);
                    if (property != null) {
                        BigDecimal mStrMrp = (BigDecimal) property.getValue();
                        if (mStrMrp != null) {
                            retailerStockBean.setMRP(mStrMrp.toString());
                        } else {
                            retailerStockBean.setMRP("0.0");
                        }

                    }
                    if (!TextUtils.isEmpty(retailerStockBean.getUom()) && !uomList.contains(retailerStockBean.getUom())) {
                        uomList.add(retailerStockBean.getUom());
                    }
                    retailerStockBean.setUomList(uomList);
                    property = properties.get(Constants.LandingPrice);
                    if (property != null) {
                        BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                        if (mStrLandingPrice != null) {
                            retailerStockBean.setLandingPrice(mStrLandingPrice.toString());
                        } else {
                            retailerStockBean.setLandingPrice("0.0");
                        }

                    }
                    property = properties.get(Constants.AlternativeUOM1Num);
                    if (property != null) {
                        BigDecimal mStrPrice = (BigDecimal) property.getValue();
                        if (mStrPrice != null) {
                            retailerStockBean.setAlternativeUOM1Num(mStrPrice.toString());
                        } else {
                            retailerStockBean.setAlternativeUOM1Num("0.0");
                        }

                    }
                    property = properties.get(Constants.AlternativeUOM1Den);
                    if (property != null) {
                        BigDecimal mStrPrice = (BigDecimal) property.getValue();
                        if (mStrPrice != null) {
                            retailerStockBean.setAlternativeUOM1Den(mStrPrice.toString());
                        } else {
                            retailerStockBean.setAlternativeUOM1Den("0.0");
                        }

                    }
                    property = properties.get(Constants.OrderMaterialGroupID);
                    String orderMatGroup = (String) property.getValue();
                    retailerStockBean.setOrderMaterialGroupID(orderMatGroup);
                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());
                    property = properties.get(Constants.Batch);
                    retailerStockBean.setBatch((String) property.getValue());
                    property = properties.get(ConstantsUtils.Brand);
                    retailerStockBean.setBrand((String) property.getValue());
                    property = properties.get(ConstantsUtils.ProductCategoryID);
                    retailerStockBean.setProductCategoryID((String) property.getValue());
                    property = properties.get(Constants.ManufacturingDate);
                    String convertDateFormat = "";
                    if (property != null) {
                        convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    }
                    retailerStockBean.setMFD(convertDateFormat);

                    retailerStockBean.setQAQty("" + getDBStk(Constants.CPStockItems
                            + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.Material_No + " eq '" + MatNo + "' &$top=1"));

//                        retailerStockList.add(retailerStockBean);
                    if (!tempArrList.contains(MatNo)) {
                        returnOrderBeanList.add(retailerStockBean);
                        if (materilQry.length() == 0)
                            materilQry += "MaterialNo eq '" + MatNo + "'";
                        else
                            materilQry += " or MaterialNo eq '" + MatNo + "'";
                        tempArrList.add(MatNo);
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
            if (!TextUtils.isEmpty(materilQry)) {
                tempArrList.clear();
                materilQry = Constants.CPStockItemSnos + "?$select=" + Constants.UnitPrice + ", MaterialNo &$filter=(" + materilQry + ") and StockTypeID ne '03' &$orderby=" + Constants.ManufacturingDate + "%20asc";//$select=" + Constants.UnitPrice+", MaterialNo" +"&
                List<ODataEntity> entities1 = UtilOfflineManager.getEntities(OfflineManager.offlineStore, materilQry);
                if (entities1 != null && entities1.size() > 0) {
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities1) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.UnitPrice);
                        String unitPrice = property.getValue().toString();
                        property = properties.get(Constants.MaterialNo);
                        String matNo = property.getValue().toString();
                        if (!tempArrList.contains(matNo)) {
                            setMrpList(returnOrderBeanList, unitPrice, matNo);
                            tempArrList.add(matNo);
                        }
                    }
                }
            }
        }
        return returnOrderBeanList;
    }

    private static void setMrpList(ArrayList<ReturnOrderBean> returnOrderBeanList, String unitPrice, String matNo) {
        for (ReturnOrderBean returnOrderBean : returnOrderBeanList) {
            if (returnOrderBean.getMaterialNo().equalsIgnoreCase(matNo)) {
                returnOrderBean.setReturnMrp(unitPrice);
                returnOrderBean.setAltReturnMrp(unitPrice);
                break;
            }
        }
    }

    public static String[][] getBrandListValuesSampleDisbursement(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size() + 1];


                    int incVal = 1;
                    configVal[0][0] = "None";
                    configVal[1][0] = "None";
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.BrandID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.BrandDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    public static String[][] getOrderedMaterialGroupsSampleDisbursement(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size() + 1];
                    configVal[0][0] = "None";
                    configVal[1][0] = "None";

                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.OrderMaterialGroupID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }


//    public static ArrayList<SampleDisbursementListBean> getSampleDisbursementList(String retListQry) throws OfflineODataStoreException {
//        ArrayList<SampleDisbursementListBean> retailerList = new ArrayList<>();
//        if (offlineStore != null) {
//            SampleDisbursementListBean retBean;
//            ODataProperty property;
//            ODataPropMap properties;
//            try {
//
//
//                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
//                request.setMode(ODataRequestParamSingle.Mode.Read);
//                request.setResourcePath(retListQry);
//                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
//                        executeRequest(request);
//
//                if (response.getPayloadType() == ODataPayload.Type.Error) {
//                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
//                            response.getPayload();
//                    throw new OfflineODataStoreException(error.getMessage());
//                }
//                else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
//
//                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
//                    List<ODataEntity> entities = feed.getEntities();
//                    for (ODataEntity entity : entities) {
//
//                        retBean = new SampleDisbursementListBean();
//                        properties = entity.getProperties();
//
//                        property = properties.get(Constants.CPName);
//                        retBean.setCPName((String) property.getValue());
//
//                        property = properties.get(Constants.InvoiceTypeDesc);
//                        retBean.setInvoiceTypeDesc((String) property.getValue());
////
////                        property = properties.get(Constants.ComplaintTypeID);
////                        retBean.setComplaintTypeID((String) property.getValue());
////
////                        property = properties.get(Constants.ComplaintTypeDesc);
////                        retBean.setComplaintTypeDesc((String) property.getValue());
////
////                        property = properties.get(Constants.OrderMaterialGroupDesc);
////                        retBean.setOrderMaterialGroupDesc((String) property.getValue());
////
////                        property = properties.get(Constants.MaterialDesc);
////                        retBean.setMaterialDesc((String) property.getValue());
////
////                        property = properties.get(Constants.Batch);
////                        retBean.setBatch((String) property.getValue());
////
////                        property = properties.get(Constants.Quantity);
////                        retBean.setQuantiity(String.valueOf( property.getValue()));
////
////                        property = properties.get(Constants.ComplaintDate);
////                        if (property != null) {
////
////                            String convertFIPDate = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
////                            retBean.setComplaintDate(convertFIPDate);
////
////                        }
////                        property = properties.get("ComplaintPriorityDesc");
////                        retBean.setComplaintPriorityDesc((String) property.getValue());
////                        property = properties.get(Constants.Remarks);
////                        retBean.setRemarks((String) property.getValue());
////                        property = properties.get(Constants.ComplainCategoryDesc);
////                        retBean.setComplainCategoryDesc((String) property.getValue());
////
//                        retailerList.add(retBean);
//                    }
//                }
//                else {
//                    //    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
//                }
//            } catch (Exception e) {
//                e.printStackTrace();
//                //throw new OfflineODataStoreException(e);
//            }
//        }
//        return retailerList;
//
//    }


    public static ArrayList<InvoiceListBean> getSampleDisruptionList(String schemeQry, Context context, String status, String mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<InvoiceListBean> alInvoiceHis = new ArrayList<>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(context);
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceListBean invoiceHisBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                if (!status.equalsIgnoreCase("5")) {
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(ODataRequestParamSingle.Mode.Read);
                    request.setResourcePath(schemeQry);
                    //Send a request to read the Invoices from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);
                    //Check if the response is an error
                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        //Retrieve the data from the response
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            invoiceHisBean = new InvoiceListBean();

                            property = properties.get(Constants.InvoiceHisNo);
                            invoiceHisBean.setInvoiceNo((String) property.getValue());
                            property = properties.get(Constants.PONo);
                            invoiceHisBean.setPONo((String) property.getValue());
                            property = properties.get(Constants.InvoiceDate);
                            String convertDateFormat = UtilConstants.convertDateIntoDeviceFormat(context, (GregorianCalendar) property.getValue(), configDateFormat);
                            invoiceHisBean.setInvoiceDate(convertDateFormat);
                            property = properties.get(Constants.NetAmount);
                            BigDecimal netAmount = new BigDecimal("0.0"), collamt = new BigDecimal("0.0"), devcollamt = new BigDecimal("0.0");
                            if (property != null) {
                                netAmount = (BigDecimal) property.getValue();
                                invoiceHisBean.setInvoiceAmount(netAmount.toString());
                            }

                            property = properties.get(Constants.CollectionAmount);

                            if (property != null) {
                                collamt = (BigDecimal) property.getValue();
                                invoiceHisBean.setCollectionAmount(collamt.toString());
                            }


                            property = properties.get(Constants.Currency);
                            invoiceHisBean.setCurrency((String) property.getValue());

                            property = properties.get(Constants.InvoiceGUID);
                            String mStrInvoiceGUID32 = "";
                            try {
                                ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                                invoiceHisBean.setInvoiceGuid(mInvoiceGUID.guidAsString36());
                                mStrInvoiceGUID32 = mInvoiceGUID.guidAsString32().toUpperCase();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            invoiceHisBean.setDeviceNo("");
                            invoiceHisBean.setDeviceStatus("");

                            property = properties.get(Constants.SoldToID);
                            String soldTOID = (String) property.getValue();


                            try {
                                devcollamt = getDeviceCollAmt(context, soldTOID, mStrInvoiceGUID32);
                                invoiceHisBean.setDevCollAmount(devcollamt + "");
                            } catch (Exception e) {
                                invoiceHisBean.setDevCollAmount("0.0");
                            }


                            BigDecimal outAmt = netAmount.subtract(collamt.add(devcollamt));

                            if (status.equalsIgnoreCase("")) {
                                if (devcollamt.compareTo(new BigDecimal("0")) == 1) {//devcollamt > 0
                                    if (outAmt.compareTo(netAmount) != -1) {//outAmt >= netAmount
                                        invoiceHisBean.setInvoiceStatus("01");
                                    } else if (outAmt.compareTo(new BigDecimal("0")) != 1) {//outAmt <= 0
                                        invoiceHisBean.setInvoiceStatus("03");
                                    } else if (outAmt.compareTo(netAmount) == -1) {//outAmt < netAmount
                                        invoiceHisBean.setInvoiceStatus("02");
                                    }

                                } else {
                                    property = properties.get(Constants.PaymentStatusID);
                                    invoiceHisBean.setInvoiceStatus((String) property.getValue());

                                }

                            } else {
                                property = properties.get(Constants.PaymentStatusID);
                                invoiceHisBean.setInvoiceStatus((String) property.getValue());

                            }
                            property = properties.get(Constants.StatusID);
                            invoiceHisBean.setDueDateStatus((String) property.getValue());

                            alInvoiceHis.add(invoiceHisBean);
                        }

                    } else {
                        throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alInvoiceHis != null && alInvoiceHis.size() > 0) {
            Collections.sort(alInvoiceHis, new Comparator<InvoiceListBean>() {
                public int compare(InvoiceListBean one, InvoiceListBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
                    }
                }
            });

        }

        return alInvoiceHis;
    }

    public static ArrayList<InvoiceListBean> getSapleDisbursementListFromDataValt(Context context, String mStrCpNo,String tempparentId) throws OfflineODataStoreException {
        InvoiceListBean salesOrderBean;
        ArrayList<InvoiceListBean> salesOrderHeaderArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(context);
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.SampleDisbursement, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SampleDisbursement)
                            && fetchJsonHeaderObject.getString(Constants.SoldToCPGUID).equalsIgnoreCase(mStrCpNo)&& fetchJsonHeaderObject.getString(Constants.CPGUID).equalsIgnoreCase(tempparentId)) {
                        salesOrderBean = new InvoiceListBean();
                        salesOrderBean.setDeviceNo(deviceNo);
                        //   salesOrderBean.setSSROGUID(fetchJsonHeaderObject.optString(Constants.SSSOGuid));
                        salesOrderBean.setInvoiceNo(fetchJsonHeaderObject.optString(Constants.InvoiceNo));
                        String convertDateFormat2 = UtilConstants.convertDateIntoDeviceFormat(context, UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.optString(Constants.InvoiceDate)), configDateFormat);
                        salesOrderBean.setInvoiceDate(convertDateFormat2);
                        //  salesOrderBean.setStatusID(fetchJsonHeaderObject.optString(Constants.StatusID));
                        salesOrderBean.setNetAmount("0.00");
                        salesOrderBean.setCurrency(fetchJsonHeaderObject.optString(Constants.Currency));
                        salesOrderBean.setDmsDivision(fetchJsonHeaderObject.optString(Constants.DmsDivision));
                        salesOrderBean.setDmsDivisionDesc(fetchJsonHeaderObject.optString(Constants.DmsDivisionDesc));
                        salesOrderBean.setInvoiceType(fetchJsonHeaderObject.optString(Constants.InvoiceTypeID));
                        salesOrderBean.setInvoiceTypDesc(fetchJsonHeaderObject.optString(Constants.InvoiceTypeDesc));
                        salesOrderHeaderArrayList.add(salesOrderBean);
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        // return sortingSampleDisbursement(salesOrderHeaderArrayList);
        return salesOrderHeaderArrayList;

    }

    private static ArrayList<InvoiceListBean> sortingSampleDisbursement(ArrayList<InvoiceListBean> alReturnOrdList) {
        if (alReturnOrdList != null && alReturnOrdList.size() > 0) {
            Collections.sort(alReturnOrdList, new Comparator<InvoiceListBean>() {
                public int compare(InvoiceListBean one, InvoiceListBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        //   i1 = new BigInteger(one.getOrderNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        // i2 = new BigInteger(other.getOrderNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return 0;// i2.compareTo(i1);
                    } else {
                        return 0;// other.getOrderNo().compareTo(one.getOrderNo());
                    }
                }
            });
        } else {
            alReturnOrdList = new ArrayList<>();
        }
        return alReturnOrdList;
    }

    public static InvoiceListBean getSampleDisbursementDetailsListFromDataValt(Context context,String mDeviceNo, InvoiceListBean invoiceListBean) throws OfflineODataStoreException {
        ArrayList<InvoiceItemBean> SalesOrderBeanList = new ArrayList<>();
        InvoiceItemBean returnOrderBean;
        String store = "";
        ArrayList<HashMap<String, String>> arrtable;
        try {
            store = ConstantsUtils.getFromDataVault(mDeviceNo,context);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        try {
            JSONObject fetchJsonHeaderObject = new JSONObject(store);
            String itemsString = fetchJsonHeaderObject.getString(Constants.ITEM_TXT);
            arrtable = UtilConstants.convertToArrayListMap(itemsString);
            for (int i = 0; i < arrtable.size(); i++) {
                HashMap<String, String> singleRow = arrtable.get(i);
                returnOrderBean = new InvoiceItemBean();
                returnOrderBean.setMaterialNo(singleRow.get(Constants.MaterialNo));
                returnOrderBean.setMaterialDesc(singleRow.get(Constants.MaterialDesc));
                returnOrderBean.setInvoiceMaterialDescAndNo(returnOrderBean.getMaterialDesc());
                returnOrderBean.setMaterialGroup(singleRow.get(Constants.OrderMatGrp));
                returnOrderBean.setItemNo(singleRow.get(Constants.ItemNo));
                returnOrderBean.setActualInvQty(singleRow.get(Constants.Quantity));
                returnOrderBean.setNetAmount(singleRow.get(Constants.NetAmount));
                returnOrderBean.setCurrency(singleRow.get(Constants.Currency));
                returnOrderBean.setUOM(singleRow.get(Constants.UOM));
//                returnOrderBean.setNetAmount(singleRow.get(Constants.GrossAmount));
                SalesOrderBeanList.add(returnOrderBean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        invoiceListBean.setInvoiceItemBeanArrayList(SalesOrderBeanList);
        return invoiceListBean;

    }


    public static ArrayList<com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean> getDistributorsDmsDivision(List<ODataEntity> entities) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ArrayList<com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean> valueHelpArrayList = new ArrayList<>();
        HashSet<String> mapVal = new HashSet<>();
        com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean valueHelp;
        ODataProperty property;
        ODataPropMap properties;
        try {
            if (entities != null && !entities.isEmpty()) {

                for (ODataEntity entity : entities) {
                    valueHelp = new com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.DMSDivisionID);
                    valueHelp.setDMSDivisionID((String) property.getValue());
                    property = properties.get(Constants.DmsDivsionDesc);
                    valueHelp.setDmsDivsionDesc((String) property.getValue());
                    valueHelp.setDisplayData(valueHelp.getDmsDivsionDesc());
                    property = properties.get(Constants.CPTypeID);
                    valueHelp.setCPTypeID((String) property.getValue());
                    property = properties.get(Constants.CPGUID);
                    valueHelp.setCPGUID((String) property.getValue());
                    property = properties.get(Constants.CPNo);
                    valueHelp.setCPNo((String) property.getValue());
                    property = properties.get(Constants.SPGUID);
                    valueHelp.setSPGUID((String) property.getValue());
                    property = properties.get(Constants.SPNo);
                    valueHelp.setSPNo((String) property.getValue());
                    property = properties.get(Constants.FirstName);
                    valueHelp.setFirstName((String) property.getValue());
                    property = properties.get(Constants.CPName);
                    valueHelp.setCPName((String) property.getValue());
                    if (!mapVal.contains(valueHelp.getDMSDivisionID()) && !valueHelp.getDMSDivisionID().equalsIgnoreCase("")) {
                        mapVal.add(valueHelp.getDMSDivisionID());
                        valueHelpArrayList.add(valueHelp);
                    }


                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new OfflineODataStoreException(e);
        }
        if (valueHelpArrayList.size() != 1) {
            valueHelp = new com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean();
            valueHelp.setDisplayData(Constants.None);
            valueHelpArrayList.add(0, valueHelp);
        }
        return valueHelpArrayList;

    }

    public static ArrayList<ValueHelpBean> getTypesetListFromConfigTypesetTypes(List<ODataEntity> entities) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ArrayList<ValueHelpBean> valueHelpArrayList = new ArrayList<>();
        ValueHelpBean valueHelp;
        ODataProperty property;
        ODataPropMap properties;
        try {
            if (entities != null && !entities.isEmpty()) {

                for (ODataEntity entity : entities) {
                    valueHelp = new ValueHelpBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.TypesName);
                    valueHelp.setDescription((String) property.getValue());
                    property = properties.get(Constants.Types);
                    valueHelp.setID((String) property.getValue());
                    valueHelp.setDisplayData(valueHelp.getDescription());
                    valueHelpArrayList.add(valueHelp);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new OfflineODataStoreException(e);
        }
        if (valueHelpArrayList.size() != 1) {
            valueHelp = new ValueHelpBean();
            valueHelp.setDisplayData(Constants.None);
            valueHelpArrayList.add(0, valueHelp);
        }
        return valueHelpArrayList;

    }

    public static ArrayList<ValueHelpBean> getTypesetListFromConfigTypsetTypeValues(List<ODataEntity> entities) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ArrayList<ValueHelpBean> valueHelpArrayList = new ArrayList<>();
        ValueHelpBean valueHelp;
        ODataProperty property;
        ODataPropMap properties;
        try {
            if (entities != null && !entities.isEmpty()) {

                for (ODataEntity entity : entities) {
                    valueHelp = new ValueHelpBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.Typesname);
                    valueHelp.setDescription((String) property.getValue());
                    property = properties.get(Constants.Types);
                    valueHelp.setID((String) property.getValue());
                    valueHelp.setDisplayData(valueHelp.getDescription());
                    valueHelpArrayList.add(valueHelp);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new OfflineODataStoreException(e);
        }
        if (valueHelpArrayList.size() != 1) {
            valueHelp = new ValueHelpBean();
            valueHelp.setDisplayData(Constants.None);
            valueHelpArrayList.add(0, valueHelp);
        }
        return valueHelpArrayList;

    }


    public static SOListBean getRODetailsFromDataValt(Context context, String roGuid) throws OfflineODataStoreException {
//        SalesOrderBean salesOrderBean;
        SOListBean soListBean = new SOListBean();
        ArrayList<SalesOrderBean> salesOrderHeaderArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(context);
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.ROList, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.ReturnOrderCreate)
                            && fetchJsonHeaderObject.getString(Constants.SSROGUID).equalsIgnoreCase(roGuid.toUpperCase())) {
//                        salesOrderBean = new SalesOrderBean();
                        soListBean.setDeviceNo(deviceNo);
//                        soListBean.setSSROGUID(fetchJsonHeaderObject.optString(Constants.SSROGUID));
                        soListBean.setOrderNo(fetchJsonHeaderObject.optString(Constants.OrderNo));
                        String convertDateFormat2 = UtilConstants.convertDateIntoDeviceFormat(context, UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.optString(Constants.OrderDate)), configDateFormat);
                        soListBean.setOrderDate(convertDateFormat2);
                        soListBean.setStatus(fetchJsonHeaderObject.optString(Constants.StatusID));
                        soListBean.setDelvStatus(fetchJsonHeaderObject.optString(Constants.ApprovalStatus));
                        soListBean.setCurrency(fetchJsonHeaderObject.optString(Constants.Currency));
                        soListBean.setOrderTypeDesc(fetchJsonHeaderObject.optString(Constants.OrderTypeDesc));
                        soListBean.setOrderType(fetchJsonHeaderObject.optString(Constants.OrderType));
                        soListBean.setDelvStatus(fetchJsonHeaderObject.optString(Constants.ApprovalStatusID));
                        soListBean.setDmsDivision(fetchJsonHeaderObject.optString(Constants.DmsDivision));
                        soListBean.setDMSDivisionDesc(fetchJsonHeaderObject.optString(Constants.DmsDivisionDesc));
                        String itemsString = fetchJsonHeaderObject.getString(Constants.ITEM_TXT);
                        ArrayList<SOItemBean> soItemBeanArrayList = new ArrayList<>();
                        ArrayList<HashMap<String, String>> arrtable = UtilConstants.convertToArrayListMap(itemsString);
                        SOItemBean soItemBean;
                        for (int i = 0; i < arrtable.size(); i++) {
                            HashMap<String, String> singleRow = arrtable.get(i);
                            soItemBean = new SOItemBean();

                            soItemBean.setMatCode(singleRow.get(Constants.MaterialNo));
                            soItemBean.setMatDesc(singleRow.get(Constants.MaterialDesc));
//                            soItemBean.setOrderMaterialGroupID(singleRow.get(Constants.OrderMatGrp));
                            soItemBean.setItemNo(singleRow.get(Constants.ItemNo));
                            soItemBean.setSoQty(singleRow.get(Constants.Quantity));
                            soItemBean.setNetAmount(singleRow.get(Constants.MRP));
                            double finalPrice =0.0;
                            try {
                            double inQty=Double.parseDouble(soItemBean.getSoQty());
                            double doubMrp=Double.parseDouble(soItemBean.getNetAmount());
                         //   double taxamount=Double.parseDouble(singleRow.get(Constants.Tax));

                            finalPrice =(inQty*doubMrp);

                            Log.d("price",String.valueOf(finalPrice));

                                soItemBean.setNetAmount(UtilConstants.removeLeadingZerowithTwoDecimal(String.valueOf(finalPrice)));
                            }catch (Exception e){
                                e.printStackTrace();
                                soItemBean.setNetAmount(String.valueOf(finalPrice));
                            }

                            soItemBean.setCurrency(singleRow.get(Constants.Currency));
                            soItemBean.setUom(singleRow.get(Constants.Uom));
                            soItemBean.setRejectionReasonDesc(singleRow.get(Constants.RejectionReasonDesc));
                            soItemBean.setRejectionReasonID(singleRow.get(Constants.RejectionReasonID));
                            try {
                                soItemBean.setRefDocNo(singleRow.get(Constants.RefDocNo));
                            } catch (Exception e) {
                                soItemBean.setRefDocNo("");
                                e.printStackTrace();
                            }
                            soItemBeanArrayList.add(soItemBean);
                        }
                        Collections.sort(soItemBeanArrayList, new Comparator<SOItemBean>() {
                            @Override
                            public int compare(SOItemBean arg0, SOItemBean arg1) {

                                return arg0.getItemNo().compareTo(arg1.getItemNo());
                            }
                        });
                        soListBean.setSoItemBeanArrayList(soItemBeanArrayList);

                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return soListBean;

    }

    public static String getConfigValue(String heplLineQry) throws OfflineODataStoreException {
        String mStrHelpLineNo = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(heplLineQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.TypeValue);

                        mStrHelpLineNo = (String) property.getValue();
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrHelpLineNo;

    }

    public static ArrayList<SchemeBean> getSchemeWindowDisplay(String schemeCatId, String mStrBundleCPGUID32,
                                                               String parentId, String parentTypeId, String cpTypeId,
                                                               ArrayList<SchemeBean> schemeList, String mDMSDivQry, String mDMSDIVSchSalQry) throws OfflineODataStoreException {
        String spGuid = "";
        try {
            spGuid = OfflineManager.getGuidValueByColumnName(Constants.SalesPersons + "?$select=" + Constants.SPGUID + " ", Constants.SPGUID);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        ArrayList<CPDMSDivisionBean> cpDMSDivisionList = new ArrayList<>();
        if (!mStrBundleCPGUID32.equalsIgnoreCase("")) {
            cpDMSDivisionList = OfflineManager.getCPDMSDivisionList(Constants.CPDMSDivisions + "?$filter=" + Constants.PartnerMgrGUID + " eq guid'" + spGuid.toUpperCase() + "' and " + Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(mStrBundleCPGUID32) + "' and " + mDMSDivQry + " ");
        } else {
            cpDMSDivisionList = OfflineManager.getCPDMSDivisionList(Constants.CPDMSDivisions + "?$filter=" + mDMSDivQry + "");//+"?$select=DMSDivision,Group1,Group2,Group3,Group4"
        }
        if (offlineStore != null) {
            SchemeBean schemeBean = null;
            ODataProperty property;
            ODataPropMap properties;
            HashSet<String> hashSet = new HashSet<>();
            hashSet.add(schemeCatId);
            List<ODataEntity> entities = GetSalesOrderListBasedOnScheme.getValidScheme(hashSet);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.SchemeName);
                    schemeBean.setSchemeDesc((String) property.getValue());
                    property = properties.get(Constants.SchemeTypeID);
                    schemeBean.setSchemeTypeID((String) property.getValue());
                    property = properties.get(Constants.SchemeGUID);
                    ODataGuid mSchemeGuid = null;
                    try {
                        mSchemeGuid = (ODataGuid) property.getValue();
                        schemeBean.setSchemeGUID(mSchemeGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.IsHeaderBasedSlab);
                    schemeBean.setIsHeaderBasedSlab((String) property.getValue());
                    property = properties.get(Constants.OrgScopeID);
                    schemeBean.setOrgScopeID((String) property.getValue());
                    property = properties.get(Constants.OrgScopeDesc);
                    schemeBean.setOrgScopeDesc((String) property.getValue());
                    property = properties.get(Constants.SchemeID);
                    schemeBean.setSchemeID((String) property.getValue());
                    boolean displayItem = GetSalesOrderListBasedOnScheme.checkThreeCondition(schemeBean.getSchemeGUID(), mStrBundleCPGUID32, parentId, parentTypeId, cpTypeId, spGuid, mDMSDIVSchSalQry, cpDMSDivisionList);
                    if (displayItem) {
                        ArrayList<SchemeBean> getSchemeCPs = getSchemeCPs(Constants.SchemeCPs + "?$filter= " + Constants.SchemeGUID + " eq guid'" + schemeBean.getSchemeGUID() + "' and CPGUID eq '" + mStrBundleCPGUID32 + "' &$top=1", true);
                        if (!getSchemeCPs.isEmpty()) {
                            schemeBean.setSecondTime(true);
                        } else {
                            schemeBean.setSecondTime(false);
                        }
                        schemeList.add(schemeBean);
                    }


                }
            }
        }
        return schemeList;

    }

    public static ArrayList<SchemeBean> getSchemeCPs(String schemeQry, boolean singleReturnType) throws OfflineODataStoreException {

        ArrayList<SchemeBean> schemeList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SchemeBean schemeBean = null;
            ODataProperty property;
            ODataPropMap properties;


            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.CPGUID);
                    String mStrCPGUID = (String) property.getValue();

                    property = properties.get(Constants.CPTypeID);
                    String mStrCPTypeID = (String) property.getValue();
                    schemeBean.setCPTypeID(mStrCPTypeID);
                    schemeBean.setSchemeGUID(mStrCPGUID);
                    String mStrCPName = "";
                    if (mStrCPTypeID.equalsIgnoreCase("01")) {
                        mStrCPName = getValueByColumnName(Constants.Customers + "?$filter= "
                                + Constants.CustomerNo + " eq '" + mStrCPGUID + "' ", Constants.Name);
                    } else if (mStrCPTypeID.equalsIgnoreCase("02")) {
                        mStrCPName = getValueByColumnName(Constants.ChannelPartners + "?$filter= "
                                + Constants.CPNo + " eq '" + mStrCPGUID + "' ", Constants.Name);
                    }
                    schemeBean.setSchemeCPName(mStrCPName);
                    property = properties.get(Constants.IsExcluded);
                    schemeBean.setIsExclude((String) property.getValue());
                    schemeList.add(schemeBean);
                    if (singleReturnType) {
                        break;
                    }
                }
            }
        }
        return schemeList;
    }

    public static String[][] getArraySchemeCPs(String qry, String schemeGuid, String cpGuids) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[8][entities.size() + 1];
                    configVal[0][0] = "";
                    configVal[1][0] = "";
                    configVal[2][0] = "";
                    configVal[3][0] = "";
                    configVal[4][0] = "";
                    configVal[5][0] = "";
                    configVal[6][0] = "";
                    configVal[7][0] = "";
                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.SchemeCPGUID);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            configVal[0][incVal] = mCpGuid.guidAsString36().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.WindowLength);
                        BigDecimal wLength = (BigDecimal) property.getValue();

                        if (wLength != null) {
                            configVal[1][incVal] = wLength.toString();
                        } else {
                            configVal[1][incVal] = "0.0";
                        }
                        property = properties.get(Constants.WindowBreadth);
                        BigDecimal wBreadth = (BigDecimal) property.getValue();

                        if (wBreadth != null) {
                            configVal[2][incVal] = wBreadth.toString();
                        } else {
                            configVal[2][incVal] = "0.0";
                        }
                        property = properties.get(Constants.WindowHeight);
                        BigDecimal wHeight = (BigDecimal) property.getValue();

                        if (wHeight != null) {
                            configVal[3][incVal] = wHeight.toString();
                        } else {
                            configVal[3][incVal] = "0.0";
                        }
                        property = properties.get(Constants.WindowSizeUOM);
                        configVal[4][incVal] = (String) property.getValue();

                        property = properties.get(Constants.Remarks);
                        configVal[5][incVal] = (String) property.getValue();
                        property = properties.get(ConstantsUtils.RegistrationTypeDesc);
                        configVal[6][incVal] = (String) property.getValue();

                        configVal[7][incVal] = OfflineManager.getGuidValueByColumnName(Constants.Claims + "?$filter = SchemeGUID eq guid'" + schemeGuid + "' and CPGUID eq '" + cpGuids + "' &$top=1", ConstantsUtils.ClaimGUID);

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    public static ArrayList<ExpenseImageBean> getSchemeCPDocuments(String schemeQry, ArrayList<ExpenseImageBean> documentSchemeList) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ExpenseImageBean imageBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingleDefaultImpl var7 = new ODataRequestParamSingleDefaultImpl();
                var7.setMode(ODataRequestParamSingle.Mode.Read);
                var7.setResourcePath(schemeQry);

                ODataResponseSingle response = (ODataResponseSingle) offlineStore.executeRequest(var7);
//                response.getHeaders()
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl feed1 = (ODataErrorDefaultImpl) response.getPayload();
                    throw new OfflineODataStoreException(feed1.getMessage());
                }
                if (response.getPayloadType() != ODataPayload.Type.EntitySet) {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expectedbut got " + response.getPayloadType().name());
                }
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        imageBean = new ExpenseImageBean();
                    /*properties = entity.getProperties();
                    property = properties.get(Constants.DocumentTypeID);
                    imageBean.setDocumentTypeID((String)property.getValue());
                    property = properties.get(Constants.ImagePath);*/
                        imageBean.setImageFromMedia(true);
                        imageBean.setImagePath(entity.getMediaLink() + "");

                        documentSchemeList.add(imageBean);
                    }
                }
            } catch (ODataException e) {
                throw new OfflineODataStoreException(e.getMessage());
            }
        }
        return documentSchemeList;

    }

    public static void createSchemeCPs(Hashtable<String, String> table, UIListener uiListener,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createSchemeCpsEntity(table);
            //Send the request to create the new attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.SchemeCPs,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.SchemeCPs,context),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    public static void createClaimHeader(Hashtable<String, String> header, UIListener uiListener,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createClaimsHeaderEntity(header);
            //Send the request to create the new attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.Claims,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Claims,context),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    private static ODataEntity createSchemeCpsEntity(Hashtable<String, String> hashTable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashTable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.SchemeCPsEntity);

                newEntity.getProperties().put(Constants.SchemeCPGUID,
                        new ODataPropertyDefaultImpl(Constants.SchemeCPGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.SchemeCPGUID))));

                newEntity.getProperties().put(Constants.SchemeGUID,
                        new ODataPropertyDefaultImpl(Constants.SchemeGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.SchemeGUID))));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashTable.get(Constants.CPTypeID)));

                newEntity.getProperties().put(Constants.CPTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.CPTypeDesc, hashTable.get(Constants.CPTypeDesc)));

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashTable.get(Constants.CPGUID)));

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashTable.get(Constants.CPNo)));

                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashTable.get(Constants.CPName)));
                newEntity.getProperties().put(Constants.IsExcluded,
                        new ODataPropertyDefaultImpl(Constants.IsExcluded, hashTable.get(Constants.IsExcluded)));

                newEntity.getProperties().put(Constants.WindowLength,
                        new ODataPropertyDefaultImpl(Constants.WindowLength, BigDecimal.valueOf(Double.parseDouble(hashTable.get(Constants.WindowLength)))));

                newEntity.getProperties().put(Constants.WindowBreadth,
                        new ODataPropertyDefaultImpl(Constants.WindowBreadth, BigDecimal.valueOf(Double.parseDouble(hashTable.get(Constants.WindowBreadth)))));

                newEntity.getProperties().put(Constants.WindowHeight,
                        new ODataPropertyDefaultImpl(Constants.WindowHeight, BigDecimal.valueOf(Double.parseDouble(hashTable.get(Constants.WindowHeight)))));


                newEntity.getProperties().put(Constants.WindowSizeUOM,
                        new ODataPropertyDefaultImpl(Constants.WindowSizeUOM, hashTable.get(Constants.WindowSizeUOM)));

                newEntity.getProperties().put(ConstantsUtils.RegistrationTypeID,
                        new ODataPropertyDefaultImpl(ConstantsUtils.RegistrationTypeID, hashTable.get(ConstantsUtils.RegistrationTypeID)));

                newEntity.getProperties().put(ConstantsUtils.RegistrationTypeDesc,
                        new ODataPropertyDefaultImpl(ConstantsUtils.RegistrationTypeDesc, hashTable.get(ConstantsUtils.RegistrationTypeDesc)));

                newEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashTable.get(Constants.Remarks)));
                if (!hashTable.get(ConstantsUtils.EnrollmentDate).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(ConstantsUtils.EnrollmentDate,
                            new ODataPropertyDefaultImpl(ConstantsUtils.EnrollmentDate, UtilConstants.convertDateFormat(hashTable.get(ConstantsUtils.EnrollmentDate))));
                }
                newEntity.getProperties().put(ConstantsUtils.RegistrationDate,
                        new ODataPropertyDefaultImpl(ConstantsUtils.RegistrationDate, UtilConstants.convertDateFormat(hashTable.get(ConstantsUtils.RegistrationDate))));

                newEntity.setResourcePath(hashTable.get(Constants.SetResourcePath), hashTable.get(Constants.SetResourcePath));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }


    private static ODataEntity createClaimsHeaderEntity(Hashtable<String, String> hashTable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashTable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ClaimsEntity);

                newEntity.getProperties().put(ConstantsUtils.ClaimGUID,
                        new ODataPropertyDefaultImpl(ConstantsUtils.ClaimGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(ConstantsUtils.ClaimGUID))));

                newEntity.getProperties().put(Constants.SchemeGUID,
                        new ODataPropertyDefaultImpl(Constants.SchemeGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.SchemeGUID))));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashTable.get(Constants.CPTypeID)));

                newEntity.getProperties().put(Constants.CPTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.CPTypeDesc, hashTable.get(Constants.CPTypeDesc)));

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashTable.get(Constants.CPGUID)));

                newEntity.getProperties().put(ConstantsUtils.SchemeNo,
                        new ODataPropertyDefaultImpl(ConstantsUtils.SchemeNo, hashTable.get(ConstantsUtils.SchemeNo)));

                newEntity.getProperties().put(ConstantsUtils.ClaimDate,
                        new ODataPropertyDefaultImpl(ConstantsUtils.ClaimDate, UtilConstants.convertDateFormat(hashTable.get(ConstantsUtils.ClaimDate))));


                newEntity.setResourcePath(hashTable.get(Constants.SetResourcePath), hashTable.get(Constants.SetResourcePath));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static void createClaimDocuments(HashMap<String, String> tableItem, UIListener uiListener,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataRequestParamSingle oDataRequestParamSingle = createClaimDocumentsEntity(tableItem);

            //Send the request to create the new visit in the local database

            offlineStore.scheduleRequest(oDataRequestParamSingle, new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.ClaimDocuments,context));


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    public static void createSchemeCPDocument(HashMap<String, String> tableItem, UIListener uiListener,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataRequestParamSingle oDataRequestParamSingle = createSchemeCPDocumentEntity(tableItem);

            //Send the request to create the new visit in the local database

            offlineStore.scheduleRequest(oDataRequestParamSingle, new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.SchemeCPDocuments,context));


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    private static ODataRequestParamSingle createSchemeCPDocumentEntity(HashMap<String, String> hashTblItm) throws ODataParserException {
//		ODataEntity itemEntity = null;
        ODataRequestParamSingle oDataRequestParamSingle = null;
        try {
            if (hashTblItm != null) {

                // CreateOperation the item Entity

                ODataPayload imagePayload = new ODataUploadMediaDefaultImpl(hashTblItm.get(Constants.ImagePath), hashTblItm.get(Constants.DocumentMimeType));


                oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();

                oDataRequestParamSingle.setPayload(imagePayload);
                oDataRequestParamSingle.setMode(ODataRequestParamSingle.Mode.Create);
                oDataRequestParamSingle.setResourcePath(Constants.SchemeCPDocuments);
                oDataRequestParamSingle.setCustomTag(Constants.SchemeCPs + "(guid'" + hashTblItm.get(Constants.SchemeCPGUID) + "')/" + Constants.SchemeCPDocuments + "");

                // Add headers

                Map<String, String> createHeaders = new HashMap<String, String>();

                createHeaders.put("Content-Type", hashTblItm.get(Constants.DocumentMimeType));
                createHeaders.put("SLUG", Constants.SchemeCPDocumentID + ":" + hashTblItm.get(Constants.SchemeCPDocumentID).replace("-", "").toUpperCase() + ","
                        + Constants.SchemeCPGUID + ":" + hashTblItm.get(Constants.SchemeCPGUID).replace("-", "").toUpperCase() + ","
                        + Constants.FileName + ":" + hashTblItm.get(Constants.FileName) + ","
                        + Constants.DocumentStore + ":" + hashTblItm.get(Constants.DocumentStore) + ","
                        + Constants.Remarks + ":" + hashTblItm.get(Constants.Remarks) + ","
                        + Constants.DocumentTypeID + ":" + hashTblItm.get(Constants.DocumentTypeID) + ",");

                oDataRequestParamSingle.getCustomHeaders().putAll(createHeaders);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return oDataRequestParamSingle;

    }

    private static ODataRequestParamSingle createClaimDocumentsEntity(HashMap<String, String> hashTblItm) throws ODataParserException {
        ODataRequestParamSingle oDataRequestParamSingle = null;
        try {
            if (hashTblItm != null) {

                // CreateOperation the item Entity

                ODataPayload imagePayload = new ODataUploadMediaDefaultImpl(hashTblItm.get(Constants.ImagePath), hashTblItm.get(Constants.DocumentMimeType));


                oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();

                oDataRequestParamSingle.setPayload(imagePayload);
                oDataRequestParamSingle.setMode(ODataRequestParamSingle.Mode.Create);
                oDataRequestParamSingle.setResourcePath(Constants.ClaimDocuments);
                oDataRequestParamSingle.setCustomTag(Constants.Claims + "(guid'" + hashTblItm.get(ConstantsUtils.ClaimGUID) + "')/" + Constants.ClaimDocuments + "");

                // Add headers

                Map<String, String> createHeaders = new HashMap<>();

                createHeaders.put("Content-Type", hashTblItm.get(Constants.DocumentMimeType));
                createHeaders.put("SLUG", ConstantsUtils.ClaimDocumentID + ":" + hashTblItm.get(ConstantsUtils.ClaimDocumentID).replace("-", "").toUpperCase() + ","
                        + ConstantsUtils.ClaimGUID + ":" + hashTblItm.get(ConstantsUtils.ClaimGUID).replace("-", "").toUpperCase() + ","
                        + Constants.FileName + ":" + hashTblItm.get(Constants.FileName) + ","
                        + Constants.DocumentStore + ":" + hashTblItm.get(Constants.DocumentStore) + ","
                        + Constants.Remarks + ":" + hashTblItm.get(Constants.Remarks) + ","
                        + Constants.DocumentTypeID + ":" + hashTblItm.get(Constants.DocumentTypeID) + "");

                oDataRequestParamSingle.getCustomHeaders().putAll(createHeaders);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return oDataRequestParamSingle;
    }

    public static ArrayList<SalesOrderBean> getROListFromDataValt(Context context, String
            mStrCpGuid, String beatGuid) throws OfflineODataStoreException {
        SalesOrderBean salesOrderBean;
        ArrayList<SalesOrderBean> salesOrderHeaderArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(context);
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.ROList, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.ReturnOrderCreate)
                            && fetchJsonHeaderObject.getString(Constants.CPGUID).equalsIgnoreCase(Constants.convertStrGUID32to36(mStrCpGuid.toUpperCase()))&& fetchJsonHeaderObject.getString(Constants.FromCPGUID).equalsIgnoreCase((beatGuid.toUpperCase()))) {
                        salesOrderBean = new SalesOrderBean();
                        salesOrderBean.setDeviceNo(deviceNo);
                        salesOrderBean.setSSROGUID(fetchJsonHeaderObject.optString(Constants.SSROGUID));
                        salesOrderBean.setOrderNo(fetchJsonHeaderObject.optString(Constants.OrderNo));
                        String convertDateFormat2 = UtilConstants.convertDateIntoDeviceFormat(context, UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.optString(Constants.OrderDate)), configDateFormat);
                        salesOrderBean.setOrderDate(convertDateFormat2);
                        salesOrderBean.setStatusID(fetchJsonHeaderObject.optString(Constants.StatusID));
                        salesOrderBean.setDelvStatus(fetchJsonHeaderObject.optString(Constants.ApprovalStatus));
                        salesOrderBean.setCurrency(fetchJsonHeaderObject.optString(Constants.Currency));
                        try{

                            String ja_data = fetchJsonHeaderObject.getString("ITEMS");
                            JSONArray array = new JSONArray(ja_data);
                            double finalPrice=0.0;
                            for (int i = 0; i < array.length(); i++) {
                                JSONObject object = array.getJSONObject(i);
                                String qty=object.getString("Quantity");
                               // String tax=object.getString(Constants.Tax);
                                String mrp=object.getString("MRP");

                                Log.d("Tester",qty+":"+mrp);

                                try {
                                    double inQty=Double.parseDouble(qty);
                                   // double taxAmount=Double.parseDouble(tax);
                                    double doubMrp=Double.parseDouble(mrp);

                                    finalPrice=finalPrice+(inQty*doubMrp);

                                Log.d("price",String.valueOf(finalPrice));
                                    salesOrderBean.setNetAmount(UtilConstants.removeLeadingZerowithTwoDecimal(String.valueOf(finalPrice)));
                                }catch (Exception e){
                                    e.printStackTrace();
                                    salesOrderBean.setNetAmount(String.valueOf(finalPrice));
                                }

                            }
                        }catch(Exception ex){
ex.printStackTrace();
                        }
                        salesOrderHeaderArrayList.add(salesOrderBean);
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return sortingROList(salesOrderHeaderArrayList);

    }


    public static Double getSKUGrpWiseCBBQty(String[] mStrCRSSKUGRPArray, String mSalesUnit) {
        Double mCalCBBQty = 0.0;
        try {
            if (!Constants.hashMapMaterialValByOrdMatGrp.isEmpty()) {
                for (String mStrCRSSKUGRP : mStrCRSSKUGRPArray) {
                    if (Constants.hashMapMaterialValByOrdMatGrp.containsKey(mStrCRSSKUGRP)) {
                        Set mSetMat = Constants.hashMapMaterialValByOrdMatGrp.get(mStrCRSSKUGRP);
                        Iterator itr = mSetMat.iterator();
                        while (itr.hasNext()) {
                            String mStrMatNo = itr.next().toString();
                            String mStrCBBQty = null;
                            if (Constants.hashMapCpStockDataByMaterial.containsKey(mStrMatNo)) {
                                if (Constants.isCBBOrBag(mSalesUnit)) {
                                    SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                                    if (skuGroupBean != null) {
                                        try {
                                            mStrCBBQty = skuGroupBean.getCBBQty();
                                        } catch (Exception e) {
                                            mStrCBBQty = "0.0";
                                            e.printStackTrace();
                                        }
                                    }
                                } else {
                                    SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                                    if (skuGroupBean != null) {
                                        try {
                                            mStrCBBQty = Constants.getTotalPieceFromCBB(skuGroupBean);
                                        } catch (Exception e) {
                                            mStrCBBQty = "0.0";
                                            e.printStackTrace();
                                        }
                                    }

                                }
                            }
                            mCalCBBQty = mCalCBBQty + Double.parseDouble(mStrCBBQty);
                        }
                    }
                }


            }
        } catch (NumberFormatException e) {
            mCalCBBQty = 0.0;
            e.printStackTrace();
        }
        return mCalCBBQty;
    }
    public static Double getSKUGrpWiseCBB(String[] mStrCRSSKUGRPArray, String mSalesUnit) {
        Double mCalCBBQty = 0.0;
        try {
            if (!Constants.hashMapMaterialValByOrdMatGrp.isEmpty()) {
                for (String mStrCRSSKUGRP : mStrCRSSKUGRPArray) {
                    if (Constants.hashMapMaterialValByOrdMatGrp.containsKey(mStrCRSSKUGRP)) {
                        Set mSetMat = Constants.hashMapMaterialValByOrdMatGrp.get(mStrCRSSKUGRP);
                        Iterator itr = mSetMat.iterator();
                        while (itr.hasNext()) {
                            String mStrMatNo = itr.next().toString();
                            String mStrCBBQty = null;
                            if (Constants.hashMapCpStockDataByMaterial.containsKey(mStrMatNo)) {
                                if (Constants.isCBBOrBagItemMinmum(mSalesUnit)) {
                                    SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                                    if (skuGroupBean != null) {
                                        try {
                                            mStrCBBQty = skuGroupBean.getCBBQty();
                                        } catch (Exception e) {
                                            mStrCBBQty = "0.0";
                                            e.printStackTrace();
                                        }
                                    }
                                } else {
                                    SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                                    if (skuGroupBean != null) {
                                        try {
                                            mStrCBBQty = Constants.getTotalPieceFromCBB(skuGroupBean);
                                        } catch (Exception e) {
                                            mStrCBBQty = "0.0";
                                            e.printStackTrace();
                                        }
                                    }

                                }
                            }
                            mCalCBBQty = mCalCBBQty + Double.parseDouble(mStrCBBQty);
                        }
                    }
                }


            }
        } catch (NumberFormatException e) {
            mCalCBBQty = 0.0;
            e.printStackTrace();
        }
        return mCalCBBQty;
    }

    public static Double getBrandWiseCBBQty(ArrayList<String> mStrCRSSKUGRPArray, String mSalesUnit) {
        Double mCalCBBQty = 0.0;
        try {
            if (!Constants.hashMapMaterialValByOrdMatGrp.isEmpty()) {
                for (String mStrCRSSKUGRP : mStrCRSSKUGRPArray) {
                    if (Constants.hashMapMaterialValByOrdMatGrp.containsKey(mStrCRSSKUGRP)) {
                        Set mSetMat = Constants.hashMapMaterialValByOrdMatGrp.get(mStrCRSSKUGRP);
                        Iterator itr = mSetMat.iterator();
                        while (itr.hasNext()) {
                            String mStrMatNo = itr.next().toString();
                            String mStrCBBQty = null;
                            if (Constants.hashMapCpStockDataByMaterial.containsKey(mStrMatNo)) {
                                if (Constants.isCBBOrBag(mSalesUnit)) {
                                    SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                                    if (skuGroupBean != null) {
                                        try {
                                            mStrCBBQty = skuGroupBean.getCBBQty();
                                        } catch (Exception e) {
                                            mStrCBBQty = "0.0";
                                            e.printStackTrace();
                                        }
                                    }
                                } else {
                                    SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                                    if (skuGroupBean != null) {
                                        try {
                                            mStrCBBQty = Constants.getTotalPieceFromCBB(skuGroupBean);
                                        } catch (Exception e) {
                                            mStrCBBQty = "0.0";
                                            e.printStackTrace();
                                        }
                                    }

                                }
                            }
                            mCalCBBQty = mCalCBBQty + Double.parseDouble(mStrCBBQty);
                        }
                    }
                }


            }
        } catch (NumberFormatException e) {
            mCalCBBQty = 0.0;
            e.printStackTrace();
        }
        return mCalCBBQty;
    }

    public static Double getMaterialWiseCBBQty(String[] mStrCRSSKUGRPArray, String mSalesUnit) {
        Double mCalCBBQty = 0.0;
        try {
            if (!Constants.hashMapMaterialValByOrdMatGrp.isEmpty()) {
                for (String mStrMatNo : mStrCRSSKUGRPArray) {
                    String mStrCBBQty = null;
                    if (Constants.hashMapCpStockDataByMaterial.containsKey(mStrMatNo)) {
                        if (Constants.isCBBOrBag(mSalesUnit)) {
                            SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                            if (skuGroupBean != null) {
                                try {
                                    mStrCBBQty = skuGroupBean.getCBBQty();
                                } catch (Exception e) {
                                    mStrCBBQty = "0.0";
                                    e.printStackTrace();
                                }
                            }
                        } else {
                            SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                            if (skuGroupBean != null) {
                                try {
                                    mStrCBBQty = Constants.getTotalPieceFromCBB(skuGroupBean);
                                } catch (Exception e) {
                                    mStrCBBQty = "0.0";
                                    e.printStackTrace();
                                }
                            }
                        }
                    }
                    mCalCBBQty = mCalCBBQty + Double.parseDouble(mStrCBBQty);
                }


            }
        } catch (NumberFormatException e) {
            mCalCBBQty = 0.0;
            e.printStackTrace();
        }
        return mCalCBBQty;
    }
    public static Double getMaterialWiseCBB(String[] mStrCRSSKUGRPArray, String mSalesUnit) {
        Double mCalCBBQty = 0.0;
        try {
            if (!Constants.hashMapMaterialValByOrdMatGrp.isEmpty()) {
                for (String mStrMatNo : mStrCRSSKUGRPArray) {
                    String mStrCBBQty = null;
                    if (Constants.hashMapCpStockDataByMaterial.containsKey(mStrMatNo)) {
                        if (Constants.isCBBOrBagItemMinmum(mSalesUnit)) {
                            SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                            if (skuGroupBean != null) {
                                try {
                                    mStrCBBQty = skuGroupBean.getCBBQty();
                                } catch (Exception e) {
                                    mStrCBBQty = "0.0";
                                    e.printStackTrace();
                                }
                            }
                        } else {
                            SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                            if (skuGroupBean != null) {
                                try {
                                    mStrCBBQty = Constants.getTotalPieceFromCBB(skuGroupBean);
                                } catch (Exception e) {
                                    mStrCBBQty = "0.0";
                                    e.printStackTrace();
                                }
                            }
                        }
                    }
                    mCalCBBQty = mCalCBBQty + Double.parseDouble(mStrCBBQty);
                }


            }
        } catch (NumberFormatException e) {
            mCalCBBQty = 0.0;
            e.printStackTrace();
        }
        return mCalCBBQty;
    }


    public static ArrayList<RoutePlanBean> getBeatNamesFromRouteSchedules(List<ODataEntity> entities) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ArrayList<RoutePlanBean> routePlanBeanArrayList = new ArrayList<>();
        RoutePlanBean routePlanBean;
        ODataProperty property;
        ODataPropMap properties;
        String rchGuidQry = "";
        List<ODataEntity> routeEntities=null;
        String qry = Constants.CPSPRelations;
        HashMap<String, String> mapCPName = null;
        try {
            mapCPName = new HashMap<>();
            mapCPName = OfflineManager.getDistNameVal(qry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        if (mapCPName == null) {
            mapCPName = new HashMap<>();
        }

        try {
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.RouteSchGUID);
                    ODataGuid RschGuid = null;
                    RschGuid = (ODataGuid) property.getValue();
//                    if (!Constants.mSetTodayRouteSch.contains(RschGuid.guidAsString36().toUpperCase())) {
                        if (rchGuidQry.length() == 0)
                            rchGuidQry += " guid'" + RschGuid.guidAsString36().toUpperCase() + "'";
                        else
                            rchGuidQry += " or " + Constants.RouteSchGUID + " eq guid'" + RschGuid.guidAsString36().toUpperCase() + "'";
//                    }

                }

                if (!TextUtils.isEmpty(rchGuidQry)) {
                    String rchGuidBeat = Constants.RouteSchedules + "?$filter=(" +
                            Constants.RouteSchGUID + " eq " + rchGuidQry + ") and " + Constants.ApprovalStatus + " eq '03' and StatusID eq '01' &$orderby= Description asc";


                    try {
                        routeEntities = Constants.getListEntities(rchGuidBeat, OfflineManager.offlineStore);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
            if(routeEntities!= null && routeEntities.size()>0) {
                for (ODataEntity routeEntity : routeEntities) {
                    routePlanBean = new RoutePlanBean();
                    properties = routeEntity.getProperties();
                    property = properties.get(Constants.Description);
                    routePlanBean.setDescription((String) property.getValue());
                    property = properties.get(Constants.RoutId);
                    routePlanBean.setRoutId((String) property.getValue());
                    property = properties.get(Constants.CPGUID);
                    routePlanBean.setCPGUID((String) property.getValue());


                    try {
                        routePlanBean.setDistName(mapCPName.get(routePlanBean.getCPGUID()));
                        //Log.d("Retailer Details",mapCPName.get(routePlanBean.getCPGUID()),"--"+mapCPName.get(routePlanBean.get));
                        String resultData = Constants.removeLeadingZero(routePlanBean.getCPGUID());
                        routePlanBean.setDistributors(getDstributorsfromCpGuid(Constants.UserCustomers + "?$filter="
                                + Constants.CustomerNo + " eq '" + resultData + "'"));
                    } catch (Exception e) {
                        routePlanBean.setDistName("");
                        e.printStackTrace();
                    }

                    property = properties.get(Constants.RouteSchGUID);
                    try {
                        ODataGuid mCpGuid = (ODataGuid) property.getValue();
                        routePlanBean.setRschGuid(mCpGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    routePlanBean.setDisplayData(routePlanBean.getDescription() + "(" + routePlanBean.getRoutId() + ")");
                    if (!TextUtils.isEmpty(routePlanBean.getDescription()))
                        routePlanBeanArrayList.add(routePlanBean);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new OfflineODataStoreException(e);
        }
        if (routePlanBeanArrayList.size() != 1) {
            routePlanBean = new RoutePlanBean();
            routePlanBean.setDisplayData(Constants.None);
            routePlanBeanArrayList.add(0, routePlanBean);
        }
        return routePlanBeanArrayList;

    }

    private static List<UserCustomersBean> getDstributorsfromCpGuid(String query) {

        List<UserCustomersBean> distributors= new ArrayList();
        UserCustomersBean customerdata = new UserCustomersBean();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            RetailerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        customerdata = new UserCustomersBean();
                        properties = entity.getProperties();

                        property = properties.get(Constants.Region);
                        customerdata.setStateID((String) property.getValue());
                        property = properties.get(Constants.Name);
                        customerdata.setDistibutorName((String) property.getValue());
                        property = properties.get(Constants.CustomerNo);
                        customerdata.setDistributorID((String) property.getValue());
                        distributors.add(customerdata);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return distributors;

    }

    public static ArrayList<RetailerBean> getBeatList(List<ODataEntity> entities, String defaultValue) {
        ArrayList<RetailerBean> retailerList = new ArrayList<>();
        RetailerBean retBean;
        ODataProperty property;
        ODataPropMap properties;
        if (!TextUtils.isEmpty(defaultValue)) {
            RetailerBean retailerBean = new RetailerBean();
            retailerBean.setRouteDesc(defaultValue);
            retailerList.add(retailerBean);
        }
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.RoutId);

                retBean = new RetailerBean((String) property.getValue());
                retBean.setRouteID((String) property.getValue());
                property = properties.get(Constants.Description);
                retBean.setRouteDesc((String) property.getValue());
                property = properties.get(Constants.RouteSchGUID);
                try {
                    ODataGuid mCpGuid = (ODataGuid) property.getValue();
                    retBean.setRschGuid(mCpGuid.guidAsString36().toUpperCase());
                    retBean.setRschGuid32(mCpGuid.guidAsString32().toUpperCase() + "");
                } catch (Exception e) {
                    e.printStackTrace();
                }
                retBean.setEditResourceURL(entity.getEditResourcePath());
                retBean.setIsAddressEnabled(false);
                retailerList.add(retBean);
            }
        }
        return retailerList;
    }

    public static ArrayList<ExpenseConfig> getConfigExpenseType(List<ODataEntity> entities, String defaultValue) {
        ArrayList<ExpenseConfig> expenseConfigArrayList = new ArrayList<>();
        ArrayList<String> contentId = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                ExpenseConfig expenseConfig = new ExpenseConfig();
                properties = entity.getProperties();
                property = properties.get(Constants.ExpenseType);
                String expenseType = (String) property.getValue();
                expenseConfig.setExpenseType(expenseType);
                if (!contentId.contains(expenseType)) {
                    property = properties.get(Constants.ExpenseTypeDesc);
                    expenseConfig.setExpenseTypeDesc((String) property.getValue());
                    expenseConfigArrayList.add(expenseConfig);
                    contentId.add(expenseType);
                }
            }
        }
        if (!TextUtils.isEmpty(defaultValue)) {
            ExpenseConfig expenseConfig = new ExpenseConfig();
            expenseConfig.setExpenseTypeDesc(defaultValue);
            expenseConfig.setExpenseType("");
            expenseConfigArrayList.add(0, expenseConfig);
        }
        return expenseConfigArrayList;
    }

    public static ArrayList<ExpenseListBean> getExpenseList(String schemeQry, Context context) throws OfflineODataStoreException {

        ArrayList<ExpenseListBean> alInvoiceHis = new ArrayList<>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(context);
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ExpenseListBean invoiceHisBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

//               if (!status.equalsIgnoreCase("5")) {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(schemeQry);
                //Send a request to read the Invoices from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        invoiceHisBean = new ExpenseListBean();
                        property = properties.get(Constants.ExpenseNo);
                        invoiceHisBean.setExpenseNo((String) property.getValue());
                        property = properties.get(Constants.CPTypeDesc);
                        invoiceHisBean.setCPTypeDesc((String) property.getValue());
                        property = properties.get(Constants.ExpenseType);
                        invoiceHisBean.setExpenseType((String) property.getValue());
                        property = properties.get(Constants.ExpenseTypeDesc);
                        invoiceHisBean.setExpenseTypeDesc((String) property.getValue());
                        property = properties.get(Constants.ExpenseDate);
                        String convertDateFormat = UtilConstants.convertDateIntoDeviceFormat(context, (GregorianCalendar) property.getValue(), configDateFormat);
                        invoiceHisBean.setDate(convertDateFormat);
                        property = properties.get(Constants.Amount);
                        BigDecimal netAmount = new BigDecimal("0.0");
                        netAmount = (BigDecimal) property.getValue();
                        invoiceHisBean.setAmount(netAmount.toString());
                        property = properties.get(Constants.Currency);
                        invoiceHisBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.ExpenseGUID);
                        String mStrInvoiceGUID32 = "";
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            invoiceHisBean.setExpenseGUID36(mInvoiceGUID.guidAsString36());
                            mStrInvoiceGUID32 = mInvoiceGUID.guidAsString32().toUpperCase();
                            invoiceHisBean.setExpenseGUID32(mInvoiceGUID.guidAsString32());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
//                            BigDecimal netAmount = new BigDecimal("0.0"), collamt = new BigDecimal("0.0"), devcollamt = new BigDecimal("0.0");
//                            if (property != null) {
//                                netAmount = (BigDecimal) property.getValue();
//                                invoiceHisBean.setInvoiceAmount(netAmount.toString());
//                            }
//
//                            property = properties.get(Constants.CollectionAmount);
//
//                            if (property != null) {
//                                collamt = (BigDecimal) property.getValue();
//                                invoiceHisBean.setCollectionAmount(collamt.toString());
//                            }
//
//
//                            property = properties.get(Constants.Currency);
//                            invoiceHisBean.setCurrency((String) property.getValue());
//
//                            property = properties.get(Constants.InvoiceGUID);
//                            String mStrInvoiceGUID32 = "";
//                            try {
//                                ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
//                                invoiceHisBean.setInvoiceGuid(mInvoiceGUID.guidAsString36());
//                                mStrInvoiceGUID32 = mInvoiceGUID.guidAsString32().toUpperCase();
//                            } catch (Exception e) {
//                                e.printStackTrace();
//                            }
//
//                            invoiceHisBean.setDeviceNo("");
//                            invoiceHisBean.setDeviceStatus("");
//
//                            property = properties.get(Constants.SoldToID);
//                            String soldTOID = (String) property.getValue();
//
//
//                            try {
//                                devcollamt = getDeviceCollAmt(context, soldTOID, mStrInvoiceGUID32);
//                                invoiceHisBean.setDevCollAmount(devcollamt + "");
//                            } catch (Exception e) {
//                                invoiceHisBean.setDevCollAmount("0.0");
//                            }


                        // BigDecimal outAmt = netAmount.subtract(collamt.add(devcollamt));

//                            if (status.equalsIgnoreCase("")) {
//                                if (devcollamt.compareTo(new BigDecimal("0")) == 1) {//devcollamt > 0
//                                    if (outAmt.compareTo(netAmount) != -1) {//outAmt >= netAmount
//                                        invoiceHisBean.setInvoiceStatus("01");
//                                    } else if (outAmt.compareTo(new BigDecimal("0")) != 1) {//outAmt <= 0
//                                        invoiceHisBean.setInvoiceStatus("03");
//                                    } else if (outAmt.compareTo(netAmount) == -1) {//outAmt < netAmount
//                                        invoiceHisBean.setInvoiceStatus("02");
//                                    }
//
//                                } else {
//                                    property = properties.get(Constants.PaymentStatusID);
//                                    invoiceHisBean.setInvoiceStatus((String) property.getValue());
//
//                                }
//
//                            } else {
//                                property = properties.get(Constants.PaymentStatusID);
//                                invoiceHisBean.setInvoiceStatus((String) property.getValue());
//
//                            }
                        //    property = properties.get(Constants.StatusID);
                        //  invoiceHisBean.setDueDateStatus((String) property.getValue());

                        alInvoiceHis.add(invoiceHisBean);
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
                //}

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

//        if (alInvoiceHis != null && alInvoiceHis.size() > 0) {
//            Collections.sort(alInvoiceHis, new Comparator<InvoiceListBean>() {
//                public int compare(InvoiceListBean one, InvoiceListBean other) {
//                    BigInteger i1 = null;
//                    BigInteger i2 = null;
//                    try {
//                        i1 = new BigInteger(one.getInvoiceNo());
//                    } catch (NumberFormatException e) {
//                    }
//
//                    try {
//                        i2 = new BigInteger(other.getInvoiceNo());
//                    } catch (NumberFormatException e) {
//                    }
//
//                    if (i1 != null && i2 != null) {
//                        return i2.compareTo(i1);
//                    } else {
//                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
//                    }
//                }
//            });
//
//        }

        return alInvoiceHis;
    }

    public static ArrayList<ExpenseDetailsBean> getExpenseListDetails(String schemeQry, Context context) throws OfflineODataStoreException {

        ArrayList<ExpenseDetailsBean> alInvoiceHis = new ArrayList<>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(context);
        //Check if the offline oData store is initialized
        String docQry = "";
        if (offlineStore != null) {
            ExpenseDetailsBean invoiceHisBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

//               if (!status.equalsIgnoreCase("5")) {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(schemeQry);
                //Send a request to read the Invoices from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        invoiceHisBean = new ExpenseDetailsBean();
                        property = properties.get(Constants.LocationDesc);
                        invoiceHisBean.setLocationDetailsDesc((String) property.getValue());
                        property = properties.get(Constants.ExpenseItemType);
                        invoiceHisBean.setExpenseItemType((String) property.getValue());
                        property = properties.get(Constants.ExpenseItemTypeDesc);
                        invoiceHisBean.setExpenseItemTypeDesc((String) property.getValue());
                        property = properties.get(Constants.ConvenyanceModeDs);
                        invoiceHisBean.setConveniencemodedesc((String) property.getValue());
                        property = properties.get(Constants.BeatDistance);
                        BigDecimal beatamount = new BigDecimal("0.0");
                        beatamount = (BigDecimal) property.getValue();
                        invoiceHisBean.setBeatDistance(beatamount.toString());

                        property = properties.get(Constants.Amount);
                        BigDecimal netAmount = new BigDecimal("0.0");
                        netAmount = (BigDecimal) property.getValue();
                        invoiceHisBean.setAmmount(netAmount.toString());
                        property = properties.get(Constants.Currency);
                        invoiceHisBean.setCurrency((String) property.getValue());
                        property = properties.get(Constants.UOM);
                        invoiceHisBean.setUOM((String) property.getValue());


                        property = properties.get(Constants.ExpenseItemGUID);
                        String mStrInvoiceGUID32 = "";
                        try {
                            ODataGuid mExpenseGUID = (ODataGuid) property.getValue();
                            invoiceHisBean.setExpenseGUID36(mExpenseGUID.guidAsString36());
                            mStrInvoiceGUID32 = mExpenseGUID.guidAsString32().toUpperCase();
                            invoiceHisBean.setExpenseGuid32(mExpenseGUID.guidAsString32());
                            if (docQry.length() == 0)
                                docQry += "ExpenseItemGUID eq guid'" + mExpenseGUID.guidAsString36() + "'";
                            else
                                docQry += " or ExpenseItemGUID eq guid'" + mExpenseGUID.guidAsString36() + "'";
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        alInvoiceHis.add(invoiceHisBean);
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
                //}

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        if (!TextUtils.isEmpty(docQry)) {
            docQry = Constants.ExpenseDocuments + "?$filter=" + docQry;
            ArrayList<DocumentBean> documentBeanArrayList = getExpenseImageDetails(docQry, context);
            if (documentBeanArrayList != null) {
                alInvoiceHis.get(0).setDocumentBeanslist(documentBeanArrayList);
            }
        }

        return alInvoiceHis;
    }

    public static ArrayList<DocumentBean> getExpenseImageDetails(String qry, Context mContext) {
//        String qry = Constants.ExpenseDocuments + "?$filter=" + Constants.ExpenseItemGUID + " eq guid'" + expenseItemGUID + "' ";

        ArrayList<DocumentBean> documentsList = new ArrayList<>();
        if (offlineStore != null) {
            DocumentBean documentsBean;
            ODataProperty oDataProperty;
            ODataPropMap properties;
            String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(mContext);
            try {
                //Define the resource path
                ODataRequestParamSingle oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();
                oDataRequestParamSingle.setMode(ODataRequestParamSingle.Mode.Read);
                oDataRequestParamSingle.setResourcePath(qry);

                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle responseSingle = (ODataResponseSingle) offlineStore.executeRequest(oDataRequestParamSingle);
                //Check if the response is an error
                if (responseSingle.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            responseSingle.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                } else if (responseSingle.getPayloadType() == ODataPayload.Type.EntitySet) {

                    ODataEntitySet feed = (ODataEntitySet) responseSingle.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities != null) {
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();
                            oDataProperty = properties.get(Constants.ExpenseDocumentID);
                            documentsBean = new DocumentBean();
                            documentsBean.setDocumentID((String) oDataProperty.getValue());
                            oDataProperty = properties.get(Constants.DocumentSt);
                            documentsBean.setDocumentStore((String) oDataProperty.getValue());
                            oDataProperty = properties.get(Constants.DocumentMimeType);
                            documentsBean.setDocumentMimeType((String) oDataProperty.getValue());
                            oDataProperty = properties.get(Constants.DocumentLink);
                            documentsBean.setDocumentLink((String) oDataProperty.getValue());
                            oDataProperty = properties.get(Constants.CreatedOn);
                            if (oDataProperty != null) {
                                String convertDateFormat2 = UtilConstants.convertDateIntoDeviceFormat(mContext, (GregorianCalendar) oDataProperty.getValue(), configDateFormat);//ConstantsUtils.getLastSeenDateFormat(mContext,(GregorianCalendar) oDataProperty.getValue(),configDateFormat);//UtilConstants.convertDateIntoDeviceFormat(mContext, (GregorianCalendar) oDataProperty.getValue(), configDateFormat);
                                documentsBean.setCreatedOn(convertDateFormat2);
                            }
                            oDataProperty = properties.get(Constants.FileName);
                            documentsBean.setFileName((String) oDataProperty.getValue());
                            if (!TextUtils.isEmpty(documentsBean.getFileName())) {
                                String displayName = documentsBean.getFileName().substring(0, documentsBean.getFileName().lastIndexOf("."));
                                displayName = displayName.substring(0, 1).toUpperCase() + displayName.substring(1);
                                documentsBean.setDisplayName(displayName);
                            }
                            documentsBean.setMediaLink(entity.getMediaLink() + "");
                            documentsBean.setImagePath(setImageIntoImageView(mContext, documentsBean.getMediaLink(), documentsBean.getDocumentMimeType(), documentsBean.getFileName().toLowerCase()));
                            documentsList.add(documentsBean);
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + responseSingle.getPayloadType().name());
                }
            } catch (Exception listex) {
                listex.printStackTrace();
            }
        }
        return documentsList;
    }

    public static ArrayList<ExpenseBean> getConfigExpense(List<ODataEntity> list, String typeSetVal) {
        ODataProperty property;
        ODataPropMap properties;
        ArrayList<ExpenseBean> expenseBeanArrayList = new ArrayList<>();
        ExpenseBean expenseBean;
        for (ODataEntity entity : list) {
            properties = entity.getProperties();
            expenseBean = new ExpenseBean();
            property = properties.get(Constants.ExpenseType);
            expenseBean.setExpenseType((String) property.getValue());
            property = properties.get(Constants.ExpenseTypeDesc);
            expenseBean.setExpenseTypeDesc((String) property.getValue());

            property = properties.get(Constants.ExpenseItemType);
            expenseBean.setExpenseItemType((String) property.getValue());

            property = properties.get(Constants.ExpenseItemTypeDesc);
            expenseBean.setExpenseItemTypeDesc((String) property.getValue());

//                        property = properties.get(Constants.ExpenseFreq);
//                        expenseBean.setExpens((String) property.getValue());

//                        property = properties.get(Constants.ExpenseFreqDesc);
//                        configVal[5][incVal] = (String) property.getValue();

//                        property = properties.get(Constants.ExpenseItemCat);
//                        expenseBean.setExpenseItemTypeDesc((String) property.getValue());

//                        property = properties.get(Constants.ExpenseItemCatDesc);
//                        configVal[7][incVal] = (String) property.getValue();

//                        property = properties.get(Constants.DefaultItemCat);
//                        configVal[8][incVal] = (String) property.getValue();

//                        property = properties.get(Constants.DefaultItemCatDesc);
//                        configVal[9][incVal] = (String) property.getValue();

            property = properties.get(Constants.AmountCategory);
            expenseBean.setAmountCategory((String) property.getValue());

            property = properties.get(Constants.AmountCategoryDesc);
            expenseBean.setAmountCategoryDesc((String) property.getValue());

            property = properties.get(Constants.MaxAllowancePer);
            BigDecimal maxAllowance = (BigDecimal) property.getValue();

            if (maxAllowance != null) {
                expenseBean.setMaxAllowancePer(maxAllowance.toString());
            }

            property = properties.get(Constants.ExpenseQuantityUom);
            expenseBean.setUOM((String) property.getValue());

            property = properties.get(Constants.ItemFieldSet);
            expenseBean.setItemFieldSet((String) property.getValue());

            property = properties.get(Constants.ItemFieldSetDesc);
            expenseBean.setItemFieldSetDesc((String) property.getValue());

            property = properties.get(Constants.Allowance);
            BigDecimal allowance = (BigDecimal) property.getValue();

            if (allowance != null) {
                expenseBean.setAllowance(allowance.toString());
            }


            property = properties.get(Constants.IsSupportDocReq);
            expenseBean.setIsSupportDocReq((String) property.getValue());

            property = properties.get(Constants.Currency);
            expenseBean.setCurrency((String) property.getValue());

            property = properties.get(Constants.IsRemarksReq);
            expenseBean.setIsRemarksReq((String) property.getValue());
            expenseBeanArrayList.add(expenseBean);
        }
        return expenseBeanArrayList;

    }

    public static String[][] getDistributorList(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    distVal = new String[12][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPGUID);
                        distVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.CPName);
                        distVal[1][incVal] = (String) property.getValue();
                        property = properties.get(Constants.CountryID);
                        distVal[2][incVal] = (String) property.getValue();
                        property = properties.get(Constants.CPTypeID);
                        distVal[3][incVal] = (String) property.getValue();

                        property = properties.get(Constants.SPGUID);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            distVal[4][incVal] = mInvoiceGUID.guidAsString36();
                            distVal[8][incVal] = mInvoiceGUID.guidAsString32().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.CPGUID);
                        try {

                            distVal[5][incVal] = (String) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.SPNo);
                        distVal[6][incVal] = (String) property.getValue();
                        property = properties.get(Constants.FirstName);
                        distVal[7][incVal] = (String) property.getValue();

                        property = properties.get(Constants.CPNo);
                        distVal[9][incVal] = (String) property.getValue();
                        property = properties.get(Constants.Currency);
                        distVal[10][incVal] = (String) property.getValue();
                        property = properties.get(Constants.LastName);
                        distVal[11][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

    public static String[][] getConfigExpenseAllwance(String qry, String typeSetVal) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    configVal = new String[2][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ConveyanceAmt);
                        BigDecimal conveyanceAmt = (BigDecimal) property.getValue();

                        if (conveyanceAmt != null) {
                            configVal[0][incVal] = conveyanceAmt.toString();
                        } else {
                            configVal[0][incVal] = "";
                        }
                        property = properties.get(Constants.Currency);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /*expense check data from datavalt*/
    public static boolean checkDatavaltDataisPresent(Context context, String date, String expenseTypeId) {

        boolean isDataPresent = false;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.Expenses, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Expenses)
                                && fetchJsonHeaderObject.getString(Constants.ExpenseDate).equalsIgnoreCase(date) &&
                                fetchJsonHeaderObject.getString(Constants.ExpenseType).equalsIgnoreCase(expenseTypeId)) {
                            return true;
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return isDataPresent;
    }

    /*expense monthly check data from datavalt*/
    public static boolean checkDatavaltMonthCompare(Context context, String date, String expenseTypeId) throws ParseException {

        boolean isDataPresent = false;
        Calendar calendar1 = Calendar.getInstance();
        Calendar calendar2 = Calendar.getInstance();

        Date date1 = Constants.convertStringToDate(date);
        calendar1.setTime(date1);
        Date date2;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.Expenses, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        date2 = Constants.convertStringToDate(fetchJsonHeaderObject.getString(Constants.ExpenseDate));
                        calendar2.setTime(date2);
                        int month2 = calendar2.get(Calendar.MONTH) + 1;
                        int year2 = calendar2.get(Calendar.YEAR);
                        int month1 = calendar1.get(Calendar.MONTH);
                        int year1 = calendar1.get(Calendar.YEAR);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Expenses)
                                && fetchJsonHeaderObject.getString(Constants.ExpenseType).equalsIgnoreCase(expenseTypeId) && month2 > month1 && year2 == year1) {
                            return true;
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
        return isDataPresent;
    }

    public static ArrayList<ExpenseListBean> getExpenseListFromDataValt(Context context) throws OfflineODataStoreException {
        ExpenseListBean expenseListBean;
        ArrayList<ExpenseListBean> salesOrderHeaderArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        String configDateFormat = ConstantsUtils.getConfigTypeDateFormat(context);
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.Expenses, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Expenses)) {
                        expenseListBean = new ExpenseListBean();
                        expenseListBean.setDeviceNo(deviceNo);
                        //   salesOrderBean.setSSROGUID(fetchJsonHeaderObject.optString(Constants.SSSOGuid));
                        expenseListBean.setExpenseNo(fetchJsonHeaderObject.optString(Constants.ExpenseNo));
                        String convertDateFormat2 = UtilConstants.convertDateIntoDeviceFormat(context, UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.optString(Constants.ExpenseDate)), configDateFormat);
                        expenseListBean.setDate(convertDateFormat2);
                        expenseListBean.setAmount(fetchJsonHeaderObject.optString(Constants.Amount));
                        expenseListBean.setCurrency(fetchJsonHeaderObject.optString(Constants.Currency));
                        expenseListBean.setExpenseType(fetchJsonHeaderObject.optString(Constants.ExpenseItemType));
                        expenseListBean.setExpenseType(fetchJsonHeaderObject.optString(Constants.ExpenseType));
                        expenseListBean.setExpenseTypeDesc(fetchJsonHeaderObject.optString(Constants.ExpenseTypeDesc));
                        expenseListBean.setCPTypeDesc(fetchJsonHeaderObject.optString(Constants.CPTypeDesc));
                        expenseListBean.setExpenseGUID36(fetchJsonHeaderObject.optString(Constants.ExpenseGUID));


                        salesOrderHeaderArrayList.add(expenseListBean);
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        // return sortingSampleDisbursement(salesOrderHeaderArrayList);
        return salesOrderHeaderArrayList;

    }

    public static void createExpensesingItem(HashMap<String, String> tableItem, HashMap<String, String> tableHdr, UIListener uiListener,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataRequestParamSingle oDataRequestParamSingle = createExpenseImageItemEntity(tableItem, tableHdr);

            //Send the request to create the new visit in the local database

            offlineStore.scheduleRequest(oDataRequestParamSingle, new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.ExpenseDocuments,context));


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*create expense*/
    private static ODataRequestParamSingle createExpenseImageItemEntity(HashMap<String, String> masterItem, HashMap<String, String> hashTblItm) throws ODataParserException {
        ODataRequestParamSingle oDataRequestParamSingle = null;
        try {
            if (hashTblItm != null) {

                ODataPayload imagePayload = new ODataUploadMediaDefaultImpl(hashTblItm.get(Constants.DocumentLink), hashTblItm.get(Constants.DocumentMimeType));
                oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();
                oDataRequestParamSingle.setPayload(imagePayload);
                oDataRequestParamSingle.setMode(ODataRequestParamSingle.Mode.Create);
                oDataRequestParamSingle.setResourcePath(Constants.ExpenseDocuments);
                oDataRequestParamSingle.setCustomTag(Constants.ExpenseItemDetails + "(guid'" + hashTblItm.get(Constants.ExpenseItemGUID) + "')/" + Constants.ExpenseDocuments + "");

                // Add headers

                Map<String, String> createHeaders = new HashMap<String, String>();

                createHeaders.put("Content-Type", hashTblItm.get(Constants.DocumentMimeType));
                createHeaders.put("SLUG", Constants.ExpenseDocumentID + ":" + hashTblItm.get(Constants.ExpenseDocumentID).replace("-", "").toUpperCase() + ","
                        + Constants.ExpenseItemGUID + ":" + hashTblItm.get(Constants.ExpenseItemGUID).replace("-", "").toUpperCase() + ","
                        + Constants.FileName + ":" + hashTblItm.get(Constants.FileName) + ","
                        + Constants.Remarks + ":" + hashTblItm.get(Constants.Remarks) + ","
                        + Constants.DocumentStore + ": A");

                oDataRequestParamSingle.getCustomHeaders().putAll(createHeaders);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return oDataRequestParamSingle;

    }

    public static ArrayList<ExpenseDetailsBean> getExpenseDetails(Context context, String expenseId) {

        ArrayList<ExpenseDetailsBean> expenseDetailsBeanArrayList = new ArrayList<>();
        ArrayList<DocumentBean> documentsList = new ArrayList<>();
        ExpenseDetailsBean expenseBean;
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.Expenses, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        if (fetchJsonHeaderObject.getString(Constants.entityType).equalsIgnoreCase(Constants.Expenses)
                                && fetchJsonHeaderObject.getString(Constants.ExpenseGUID).equalsIgnoreCase(expenseId)) {
                            String itemsString = fetchJsonHeaderObject.getString(Constants.ITEM_TXT);

                            arrtable = UtilConstants.convertToArrayListMap(itemsString);
                            for (int i = 0; i < arrtable.size(); i++) {
                                HashMap<String, String> singleRow = arrtable.get(i);
                                expenseBean = new ExpenseDetailsBean();
                                expenseBean.setLocationDetailsDesc(singleRow.get(Constants.LocationDesc));
                                expenseBean.setExpenseItemType(singleRow.get(Constants.ExpenseItemType));
                                expenseBean.setExpenseItemTypeDesc(singleRow.get(Constants.ExpenseItemTypeDesc));
                                expenseBean.setConveniencemodedesc(singleRow.get(Constants.ConvenyanceModeDs));
                                expenseBean.setBeatDistance(singleRow.get(Constants.BeatDistance));
                                expenseBean.setAmmount(singleRow.get(Constants.Amount));
                                expenseBean.setCurrency(singleRow.get(Constants.Currency));
                                expenseBean.setUOM(singleRow.get(Constants.UOM));
                                String imageListId = singleRow.get("item_no" + i);
                                if (imageListId != null) {
                                    ArrayList<HashMap<String, String>> arrtable1 = UtilConstants.convertToArrayListMap(singleRow.get("item_no" + i));
                                    for (int j = 0; j < arrtable1.size(); j++) {
                                        HashMap<String, String> singleRow1 = arrtable1.get(j);
                                        DocumentBean documentsBean = new DocumentBean();
                                        documentsBean.setDocumentID(singleRow1.get(Constants.ExpenseDocumentID));
                                        documentsBean.setDocumentStore(singleRow1.get(Constants.DocumentSt));
                                        documentsBean.setDocumentMimeType(singleRow1.get(Constants.DocumentMimeType));
                                        documentsBean.setDocumentLink(singleRow1.get(Constants.DocumentLink));
                                        documentsBean.setFileName(singleRow1.get(Constants.FileName));
                                        documentsBean.setImagePath(singleRow1.get(Constants.DocumentLink));
                                        documentsList.add(documentsBean);
                                    }
                                }
                                expenseDetailsBeanArrayList.add(expenseBean);


                            }
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
        if (!documentsList.isEmpty()) {
            expenseDetailsBeanArrayList.get(0).setDocumentBeanslist(documentsList);
        }

        return expenseDetailsBeanArrayList;
    }

    public static ArrayList<ReturnOrderBean> getROInvoiceList(List<ODataEntity> entities,
                                                              ArrayList<ReturnOrderBean> returnOrderBeanList, HashMap<String, String> mapUOM) throws OfflineODataStoreException {

        ArrayList<String> tempArrList = new ArrayList<>();
        //Check if the offline oData store is initialized
        String materilQry = "";
        if (offlineStore != null) {
            ReturnOrderBean retailerStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Retrieve the data from the response
                int totalLength = entities.size();
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();

                    retailerStockBean = new ReturnOrderBean();
                    property = properties.get(Constants.InvoiceItemGUID);
                    try {
                        ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                        retailerStockBean.setCPStockItemGUID(mSpItemGuid.guidAsString36());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.InvoiceGUID);
                    try {
                        ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                        retailerStockBean.setInvoiceGuid(mSpItemGuid.guidAsString36());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    property = properties.get(Constants.InvoiceNo);
                    retailerStockBean.setInvoiceNo((String) property.getValue());


                    /*try {
                        property = properties.get(Constants.RefDocItmGUID);
                        retailerStockBean.setRefDocItmGUID((String) property.getValue());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }*/


                    ArrayList<String> uomList = new ArrayList<>();

                    property = properties.get(Constants.MaterialNo);

                    String MatNo = (String) property.getValue();
                    retailerStockBean.setMaterialNo((String) property.getValue());

                    property = properties.get(Constants.Batch);
                    retailerStockBean.setBatch((String) property.getValue());
                    property = properties.get(Constants.StockRefGUID);
                    ODataGuid oDataGuid = (ODataGuid) property.getValue();
                    retailerStockBean.setStockRefGUID(oDataGuid.guidAsString36());


                    property = properties.get(Constants.AlternativeUOM1);
                    retailerStockBean.setAlternativeUOM1((String) property.getValue());
                    if (!TextUtils.isEmpty(retailerStockBean.getAlternativeUOM1()) && !uomList.contains(retailerStockBean.getAlternativeUOM1())) {
                        uomList.add(retailerStockBean.getAlternativeUOM1());
                    }

                    property = properties.get(Constants.Material_Desc);
                    retailerStockBean.setMaterialDesc((String) property.getValue());

                    property = properties.get(Constants.Batch);
                    retailerStockBean.setReturnBatchNumber((String) property.getValue());


                    property = properties.get(Constants.Quantity);
                    if (property != null) {
                        BigDecimal mStrPrice = (BigDecimal) property.getValue();
                        if (mStrPrice != null) {
                            retailerStockBean.setActualQty(mStrPrice.toString());
                        } else {
                            retailerStockBean.setActualQty("0.0");
                        }
                    }
                    property = properties.get(Constants.UnitPrice);
                    if (property != null) {
                        BigDecimal mStrPrice = (BigDecimal) property.getValue();
                        if (mStrPrice != null) {
                            retailerStockBean.setUnitPrice(mStrPrice.toString());
                        } else {
                            retailerStockBean.setUnitPrice("0.0");
                        }
                    }

                    property = properties.get(Constants.Currency);
                    retailerStockBean.setCurrency((String) property.getValue());
                    property = properties.get(Constants.UOM);
                    retailerStockBean.setUom((String) property.getValue());

                    property = properties.get(Constants.Tax);
                    if (property != null) {
                        BigDecimal mstrTax = (BigDecimal) property.getValue();
                        if (mstrTax != null) {
                            retailerStockBean.setTax(mstrTax.toString());
                        } else {
                            retailerStockBean.setTax("0.0");
                        }
                    }


                    if (mapUOM.containsKey(retailerStockBean.getUom())) {
                     //   retailerStockBean.setActualQty(trimQtyDecimalPlace(retailerStockBean.getActualQty()));
                        retailerStockBean.setActualQty(retailerStockBean.getActualQty());
                    }

                    retailerStockBean.setReturnUOM(retailerStockBean.getUom());
                    property = properties.get(Constants.NetAmount);
                    if (property != null) {
                        BigDecimal mStrMrp = (BigDecimal) property.getValue();
                        if (mStrMrp != null) {
                            retailerStockBean.setMRP(mStrMrp.toString());
                            retailerStockBean.setReturnMrp(mStrMrp.toString());
                            retailerStockBean.setAltReturnMrp(mStrMrp.toString());
                        } else {
                            retailerStockBean.setMRP("0.0");
                            retailerStockBean.setReturnMrp("0.0");
                            retailerStockBean.setAltReturnMrp("0.0");
                        }

                    }
                    if (!TextUtils.isEmpty(retailerStockBean.getUom()) && !uomList.contains(retailerStockBean.getUom())) {
                        uomList.add(retailerStockBean.getUom());
                    }
                    retailerStockBean.setUomList(uomList);

                    property = properties.get(Constants.AlternativeUOM1Num);
                    if (property != null) {
                        BigDecimal mStrPrice = (BigDecimal) property.getValue();
                        if (mStrPrice != null) {
                            retailerStockBean.setAlternativeUOM1Num(mStrPrice.toString());
                        } else {
                            retailerStockBean.setAlternativeUOM1Num("0.0");
                        }
                    }
                    property = properties.get(Constants.AlternativeUOM1Den);
                    if (property != null) {
                        BigDecimal mStrPrice = (BigDecimal) property.getValue();
                        if (mStrPrice != null) {
                            retailerStockBean.setAlternativeUOM1Den(mStrPrice.toString());
                        } else {
                            retailerStockBean.setAlternativeUOM1Den("0.0");
                        }

                    }
                    property = properties.get(Constants.OrderMaterialGroup);
                    String orderMatGroup = (String) property.getValue();
                    retailerStockBean.setOrderMaterialGroupID(orderMatGroup);
                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());
                    property = properties.get(Constants.Batch);
                    retailerStockBean.setBatch((String) property.getValue());
                    property = properties.get(ConstantsUtils.Brand);
                    retailerStockBean.setBrand((String) property.getValue());
                    property = properties.get(ConstantsUtils.ZZIsBomMaterial);
                    retailerStockBean.setZZIsBomMaterial((String) property.getValue());
                    property = properties.get(ConstantsUtils.HigherLevelItm);
                    retailerStockBean.setHigherLevelItm((String) property.getValue());
                    property = properties.get(Constants.MFD);
                    String convertDateFormat = "";
                    if (property != null) {
                        convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    }
                    retailerStockBean.setMFD(convertDateFormat);

                    property = properties.get(Constants.InvoiceDate);
                    if (property != null) {
                        convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    }
                    retailerStockBean.setInvoiceDate(convertDateFormat);
                    retailerStockBean.setAlterInvQty(Constants.getCalInvoiceAlterQty(retailerStockBean));
                    returnOrderBeanList.add(retailerStockBean);

                       /* if (materilQry.length() == 0)
                            materilQry += ""+Constants.Material_No+" eq '" + MatNo + "'";
                        else
                            materilQry += " or "+Constants.Material_No+" eq '" + MatNo + "'";*/

                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
       /* if (!TextUtils.isEmpty(materilQry)) {
            tempArrList.clear();
            materilQry = Constants.CPStockItemSnos + "?$select=" + Constants.UnitPrice+", MaterialNo &$filter=(" + materilQry + ") and StockTypeID ne '03' &$orderby=" + Constants.ManufacturingDate + "%20asc";//$select=" + Constants.UnitPrice+", MaterialNo" +"&
            List<ODataEntity> entities1 = UtilOfflineManager.getEntities(OfflineManager.offlineStore, materilQry);
            if (entities1 != null && entities1.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities1) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.UnitPrice);
                    String unitPrice = property.getValue().toString();
                    property = properties.get(Constants.MaterialNo);
                    String matNo = property.getValue().toString();
                    if (!tempArrList.contains(matNo)) {
                        setMrpList(returnOrderBeanList, unitPrice, matNo);
                        tempArrList.add(matNo);
                    }
                }
            }
        }*/

        // get Alter native uom from

        if (returnOrderBeanList != null && returnOrderBeanList.size() > 0) {
            Collections.sort(returnOrderBeanList, new Comparator<ReturnOrderBean>() {
                public int compare(ReturnOrderBean one, ReturnOrderBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
                    }
                }
            });

        }
        return returnOrderBeanList;
    }

    public static void createComplaintDoc(HashMap<String, String> tableHdr, UIListener uiListener,Context context) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataRequestParamSingle oDataRequestParamSingle = createComplaintImgEntity(tableHdr);

            //Send the request to create the new visit in the local database

            offlineStore.scheduleRequest(oDataRequestParamSingle, new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.ComplaintDocuments,context));


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    private static ODataRequestParamSingle createComplaintImgEntity(HashMap<String, String> hashTblItm) throws ODataParserException {
        ODataRequestParamSingle oDataRequestParamSingle = null;
        try {
            if (hashTblItm != null) {

                ODataPayload imagePayload = new ODataUploadMediaDefaultImpl(hashTblItm.get(Constants.DocumentLink), hashTblItm.get(Constants.DocumentMimeType));
                oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();
                oDataRequestParamSingle.setPayload(imagePayload);
                oDataRequestParamSingle.setMode(ODataRequestParamSingle.Mode.Create);
                oDataRequestParamSingle.setResourcePath(Constants.ComplaintDocuments);
                oDataRequestParamSingle.setCustomTag(Constants.ComplaintDocuments + "(guid'" + hashTblItm.get(Constants.ComplaintGUID) + "')/" + Constants.ComplaintGUID + "");
                // Add headers
                Map<String, String> createHeaders = new HashMap<String, String>();

                createHeaders.put("Content-Type", hashTblItm.get(Constants.DocumentMimeType));
                createHeaders.put("SLUG", Constants.ComplaintGUID + ":" + hashTblItm.get(Constants.ComplaintGUID).replace("-", "").toUpperCase() + ","
                        + Constants.FileName + ":" + hashTblItm.get(Constants.FileName) + ","
                        + Constants.DocumentTypeID + ": ZDMS_CMPL,"
                        + Constants.Remarks + ":" + hashTblItm.get(Constants.Remarks) + ","
                        + Constants.DocumentStore + ": A");

                oDataRequestParamSingle.getCustomHeaders().putAll(createHeaders);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return oDataRequestParamSingle;

    }

    public static Double getSKUGrpWiseCBBQtyItemMinmum(String mStrCRSSKUGRP, String mSalesUnit) {
        Double mCalCBBQty = 0.0;
        try {
            if (!Constants.hashMapMaterialValByOrdMatGrp.isEmpty()) {
                if (Constants.hashMapMaterialValByOrdMatGrp.containsKey(mStrCRSSKUGRP)) {
                    Set mSetMat = Constants.hashMapMaterialValByOrdMatGrp.get(mStrCRSSKUGRP);
                    Iterator itr = mSetMat.iterator();
                    while (itr.hasNext()) {
                        String mStrMatNo = itr.next().toString();
                        String mStrCBBQty = null;
                        if (Constants.hashMapCpStockDataByMaterial.containsKey(mStrMatNo)) {
                            if (Constants.isCBBOrBagItemMinmum(mSalesUnit)) {
                                SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                                if (skuGroupBean != null) {
                                    try {
                                        mStrCBBQty = skuGroupBean.getCBBQty();
                                    } catch (Exception e) {
                                        mStrCBBQty = "0.0";
                                        e.printStackTrace();
                                    }
                                }
                            } else {
                                SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                                if (skuGroupBean != null) {
                                    try {
                                        mStrCBBQty = Constants.getTotalPieceFromCBB(skuGroupBean);
                                    } catch (Exception e) {
                                        mStrCBBQty = "0.0";
                                        e.printStackTrace();
                                    }
                                }

                            }
                        }
                        mCalCBBQty = mCalCBBQty + Double.parseDouble(mStrCBBQty);
                    }
                }


            }
        } catch (NumberFormatException e) {
            mCalCBBQty = 0.0;
            e.printStackTrace();
        }
        return mCalCBBQty;
    }
    public static Double getQryConvertion(String[] mStrCRSSKUGRPArray, String mSalesUnit) {
        Double mCalCBBQty = 0.0;
        try {
            for (String mStrCRSSKUGRP : mStrCRSSKUGRPArray) {
                Set mSetMat = Constants.hashMapMaterialValByOrdMatGrp.get(mStrCRSSKUGRP);
                Iterator itr = mSetMat.iterator();
                while (itr.hasNext()) {
                    String mStrMatNo = itr.next().toString();
                    String mStrCBBQty = null;
                    if (Constants.hashMapCpStockDataByMaterial.containsKey(mStrMatNo)) {
                        if (Constants.isCBBOrBagItemMinmum(mSalesUnit)) {
                            SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                            if (skuGroupBean != null) {
                                try {
                                    mStrCBBQty = skuGroupBean.getCBBQty();
                                } catch (Exception e) {
                                    mStrCBBQty = "0.0";
                                    e.printStackTrace();
                                }
                            }
                        } else {
                            SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                            if (skuGroupBean != null) {
                                try {
                                    mStrCBBQty = Constants.getTotalPieceFromCBB(skuGroupBean);
                                } catch (Exception e) {
                                    mStrCBBQty = "0.0";
                                    e.printStackTrace();
                                }
                            }

                        }
                    }
                    mCalCBBQty = mCalCBBQty + Double.parseDouble(mStrCBBQty);
                }
            }

        } catch (NumberFormatException e) {
            mCalCBBQty = 0.0;
            e.printStackTrace();
        }
        return mCalCBBQty;
    }

    public static Double getBrandWiseCBBQtyItemMinmum(ArrayList<String> skuGroupList, String mSalesUnit) {
        Double mCalCBBQty = 0.0;
        try {
            for(String skuGroup :  skuGroupList){
                if (!Constants.hashMapMaterialValByOrdMatGrp.isEmpty()) {
                    if (Constants.hashMapMaterialValByOrdMatGrp.containsKey(skuGroup)) {
                        Set mSetMat = Constants.hashMapMaterialValByOrdMatGrp.get(skuGroup);
                        Iterator itr = mSetMat.iterator();
                        while (itr.hasNext()) {
                            String mStrMatNo = itr.next().toString();
                            String mStrCBBQty = null;
                            if (Constants.hashMapCpStockDataByMaterial.containsKey(mStrMatNo)) {
                                if (Constants.isCBBOrBagItemMinmum(mSalesUnit)) {
                                    SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                                    if (skuGroupBean != null) {
                                        try {
                                            mStrCBBQty = skuGroupBean.getCBBQty();
                                        } catch (Exception e) {
                                            mStrCBBQty = "0.0";
                                            e.printStackTrace();
                                        }
                                    }
                                } else {
                                    SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                                    if (skuGroupBean != null) {
                                        try {
                                            mStrCBBQty = Constants.getTotalPieceFromCBB(skuGroupBean);
                                        } catch (Exception e) {
                                            mStrCBBQty = "0.0";
                                            e.printStackTrace();
                                        }
                                    }

                                }
                            }
                            mCalCBBQty = mCalCBBQty + Double.parseDouble(mStrCBBQty);
                        }
                    }
                }
            }

        } catch (NumberFormatException e) {
            mCalCBBQty = 0.0;
            e.printStackTrace();
        }
        return mCalCBBQty;
    }

    public static Double getMaterialWiseCBBQtyItemMinmum(String mStrMatNo, String mSalesUnit) {
        Double mCalCBBQty = 0.0;
        try {
            if (!Constants.hashMapMaterialValByOrdMatGrp.isEmpty()) {
                String mStrCBBQty = null;
                if (Constants.hashMapCpStockDataByMaterial.containsKey(mStrMatNo)) {
                    if (Constants.isCBBOrBagItemMinmum(mSalesUnit)) {
                        SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                        if (skuGroupBean != null) {
                            try {
                                mStrCBBQty = skuGroupBean.getCBBQty();
                            } catch (Exception e) {
                                mStrCBBQty = "0.0";
                                e.printStackTrace();
                            }
                        }
                    } else {
                        SKUGroupBean skuGroupBean = Constants.hashMapCpStockDataByMaterial.get(mStrMatNo);
                        if (skuGroupBean != null) {
                            try {
                                mStrCBBQty = Constants.getTotalPieceFromCBB(skuGroupBean);
                            } catch (Exception e) {
                                mStrCBBQty = "0.0";
                                e.printStackTrace();
                            }
                        }
                    }
                }
                mCalCBBQty = mCalCBBQty + Double.parseDouble(mStrCBBQty);


            }
        } catch (NumberFormatException e) {
            mCalCBBQty = 0.0;
            e.printStackTrace();
        }
        return mCalCBBQty;
    }

    public static HashMap<String, String> getUOMMapVal(String mStrQry) throws OfflineODataStoreException {
        HashMap<String, String> mapVal = new HashMap<>();
        ODataProperty property;
        ODataPropMap properties;
        if (offlineStore != null) {
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.Types);
                    String mStrUOM = (String) property.getValue();
                    mapVal.put(mStrUOM, "");
                }
            }

        }
        return mapVal;
    }


    public static HashMap<String, BaseUOMBean> getMaterialAltUOM(String mrpQry) throws OfflineODataStoreException {
        double doubleMRP = 0.0, mDobBatchQty = 0.0;
        HashMap<String, BaseUOMBean> mapAlterUOM = new HashMap<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mrpQry);
            if (entities != null && entities.size() > 0) {
                // getting first manufacturing date mrp value
                for (ODataEntity entity : entities) {
                    BaseUOMBean baseUOMBean = new BaseUOMBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.MaterialNo);
                    String matNo = (String) property.getValue();

//                    skuGrpBean.setMaterialNo(matNo);
//                    skuGrpBean.setMaterialDesc(matSkuDesc);

                }

            }

        }

        return mapAlterUOM;
    }

    public static String makeInvQryFromBeanList(ArrayList<RetailerBean> alRetailers, String columnName) {
        String mCPQry = "";
        for (RetailerBean retBean : alRetailers) {
            if (mCPQry.length() == 0)
                mCPQry += " " + columnName + " eq guid'" + retBean.getCPGUID() + "'";
            else
                mCPQry += " or " + columnName + " eq guid'" + retBean.getCPGUID() + "'";

        }
        return mCPQry;
    }

    public static HashMap<String, String> getSSInvSoldID(ArrayList<RetailerBean> alRetList) {
        HashMap<String, String> mapInvList = new HashMap<>();
        if (alRetList != null && alRetList.size() > 0) {
            String invoiceQry = makeInvQryFromBeanList(alRetList, Constants.SoldToCPGUID);
            if (!invoiceQry.equalsIgnoreCase("")) {
                mapInvList = OfflineManager.getCPNoFromInvoice(Constants.SSINVOICES + "?$select=" + Constants.SoldToCPGUID + " &$filter=("
                        + invoiceQry + " ) and " + Constants.InvoiceDate + " ge datetime'" + Constants.getFirstDateOfCurrentMonth() + "' and (" + Constants.StatusID + " eq '" + Constants.str_03 + "' or "+Constants.StatusID+" eq '04')");
            }
        }
        return mapInvList;
    }

    public static HashMap<String, String> getCPNoFromInvoice(String cpQry) {
        HashMap<String, String> mapCPList = new HashMap<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.SoldToCPGUID);
                        ODataGuid mGUIDVal = null;
                        String cpGUID = "";
                        try {
                            mGUIDVal = (ODataGuid) property.getValue();
                            cpGUID = mGUIDVal.guidAsString36().toUpperCase();
                        } catch (Exception e) {
                            cpGUID = "";
                            e.printStackTrace();
                        }
                        if (!mapCPList.containsKey(cpGUID.toUpperCase())) {
                            mapCPList.put(cpGUID.toUpperCase(), "");
                        }
                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }
        return mapCPList;
    }

    public static ArrayList<String> getVisitTime(String visitQry, String mStrColumnName, String mStrStartTimeCol) {

        ArrayList<String> alStartTime = new ArrayList<>();
        ArrayList<String> alEndTime = new ArrayList<>();

        ArrayList<String> alStartEndTime = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = null;
        String mStrEndTime = "0:0";
        String mStartTime = "0:0";
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, visitQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(mStrColumnName);

                ODataDuration oDataDuration = null;
                try {
                    oDataDuration = (ODataDuration) property.getValue();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                mStrEndTime = UtilConstants.convertTimeOnly(oDataDuration.toString());
                alEndTime.add(mStrEndTime);

                property = properties.get(mStrStartTimeCol);

                try {
                    oDataDuration = (ODataDuration) property.getValue();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                mStartTime = UtilConstants.convertTimeOnly(oDataDuration.toString());
                alStartTime.add(mStartTime);
//                break;
            }

        }
        if (alStartTime != null && alStartTime.size() > 0) {
            Collections.sort(alStartTime, new Comparator<String>() {

                @Override
                public int compare(String timeOne, String timeTwo) {
                    try {
                        return new SimpleDateFormat("HH:mm").parse(timeOne).compareTo(new SimpleDateFormat("HH:mm").parse(timeTwo));
                    } catch (ParseException e) {
                        return 0;
                    }
                }
            });

            Collections.sort(alEndTime, new Comparator<String>() {

                @Override
                public int compare(String timeOne, String timeTwo) {
                    try {
                        return new SimpleDateFormat("HH:mm").parse(timeTwo).compareTo(new SimpleDateFormat("HH:mm").parse(timeOne));
                    } catch (ParseException e) {
                        return 0;
                    }
                }
            });

            try {
                alStartEndTime.add(alStartTime.get(0));
                alStartEndTime.add(alEndTime.get(0));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return alStartEndTime;
    }

    public static String getDateByColumnName(String mQry, String columnName, String configDateFormat, Context context) throws OfflineODataStoreException {

        String mStrVal = "";
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(columnName);
                        mStrVal = UtilConstants.convertDateIntoDeviceFormat(context, (GregorianCalendar) property.getValue(), configDateFormat);
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrVal;

    }

    public static ArrayList<SalesOrderBean> getSOList(String sssoQry, String configDateFormat, Context mContext) throws OfflineODataStoreException {

        ArrayList<SalesOrderBean> sssoArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SalesOrderBean soBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, sssoQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    try {
                        soBean = new SalesOrderBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.OrderNo);
                        soBean.setOrderNo((String) property.getValue());
                        property = properties.get(Constants.OrderDate);
                        String mStrDate = UtilConstants.convertDateIntoDeviceFormat(mContext, (GregorianCalendar) property.getValue(), configDateFormat);
                        soBean.setOrderDate(mStrDate);
                        sssoArrayList.add(soBean);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            }
        }

        if (sssoArrayList != null && sssoArrayList.size() > 0) {
            Collections.sort(sssoArrayList, new Comparator<SalesOrderBean>() {
                public int compare(SalesOrderBean one, SalesOrderBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getOrderNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getOrderNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getOrderNo().compareTo(one.getOrderNo());
                    }
                }
            });

        }

        return sssoArrayList;
    }

    public static String getDeviceOrderCount(String createType, Context context, String mStrCurrentDate, ArrayList<String> alTodayRet) {

        int mDoubleDevOrderValue = 0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        if(store!=null) {
                            JSONObject fetchJsonHeaderObject = new JSONObject(store);
                            String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                            if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                    && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRet.contains(fetchJsonHeaderObject.getString(Constants.SoldToCPGUID))) {
                                if (!Constants.alRetailersCount.contains(fetchJsonHeaderObject.getString(Constants.SoldToCPGUID).toUpperCase())) {
                                    Constants.alRetailersCount.add(fetchJsonHeaderObject.getString(Constants.SoldToCPGUID).toUpperCase());
                                }
                                mDoubleDevOrderValue++;
                            }
                        }

                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrderValue + "";
    }


    public static String getAvgInvValue(String invQry) throws OfflineODataStoreException {

        double mDouTotalInvVal = 0.0;
        //Check if the offline oData store is initialized
        Double mDouAvgInvVal = null;
        try {
            if (offlineStore != null) {
                SalesOrderBean soBean;
                ODataProperty property;
                ODataPropMap properties;

                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, invQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        try {
                            soBean = new SalesOrderBean();
                            properties = entity.getProperties();
                            property = properties.get(Constants.NetAmount);
                            BigDecimal netAmount = new BigDecimal("0.0");
                            if (property != null) {
                                netAmount = (BigDecimal) property.getValue();
                            }
                            mDouTotalInvVal = mDouTotalInvVal + netAmount.doubleValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                }
            }

            mDouAvgInvVal = null;
            try {
                mDouAvgInvVal = mDouTotalInvVal / 30;
            } catch (Exception e) {
                mDouAvgInvVal = 0.0;
                e.printStackTrace();
            }
            if (mDouAvgInvVal.isInfinite() || mDouAvgInvVal.isNaN()) {
                mDouAvgInvVal = 0.0;
            }
        } catch (OfflineODataStoreException e) {
            mDouAvgInvVal = 0.0;
            e.printStackTrace();
        }
        return mDouAvgInvVal + "";
    }

    public static HashMap<String, String> getDistNameVal(String mStrQry) throws OfflineODataStoreException {
        HashMap<String, String> mapVal = new HashMap<>();
        ODataProperty property;
        ODataPropMap properties;
        if (offlineStore != null) {
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.CPGUID);
                    String mStrUOM = (String) property.getValue();
                    property = properties.get(Constants.CPName);
                    String mStrDistName = (String) property.getValue();
                    mapVal.put(mStrUOM, mStrDistName);
                }
            }

        }
        return mapVal;
    }

    public static ArrayList<RetailerBean> getCPListFromDataValt(Context context, ArrayList<String> cpList) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ArrayList<RetailerBean> beanArrayList = new ArrayList<>();
        RetailerBean retailerBean;
        try {
            if (cpList != null && cpList.size() > 0) {
                for (int temp = 0; temp < cpList.size(); temp++) {
                    retailerBean = new RetailerBean();
                    String store = null, deviceNo = "";
                    try {
                        store = ConstantsUtils.getFromDataVault(cpList.get(temp),context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.ChannelPartners)) {
                            retailerBean = Constants.getCPValuesFromJsonObject(fetchJsonHeaderObject);
                            retailerBean.setCustomerId(cpList.get(temp));
//                            Hashtable dbHeadTable = Constants.getCPHeaderValuesFromJsonObject(fetchJsonHeaderObject);
//                            String itemsString = fetchJsonHeaderObject.getString(Constants.ITEM_TXT);
//                            ArrayList<HashMap<String, String>> arrtable=UtilConstants.convertToArrayListMap(itemsString);
                            beanArrayList.add(retailerBean);
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return beanArrayList;
    }

    public static boolean getCpList(String CPQry) throws OfflineODataStoreException {

        boolean check = false;
        if (offlineStore != null) {

            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(CPQry);
                //Send a request to read the Outstanding invoices from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        check = true;
                    }
                }
            } catch (ODataException e) {
                e.printStackTrace();
            }
        }
        return check;
    }

    private static ReentrantLock reentrantLock = null;
    public static int getPendingCount(final String strQry) throws OfflineODataStoreException {
        final int[] pendingCount = {0};
        Thread thread=new Thread(new Runnable() {
            @Override
            public void run() {
                if (reentrantLock==null){
                    reentrantLock = new ReentrantLock();
                }
                try {
                    Log.e("Sync History Info:","LOCKED");
                    reentrantLock.lock();
                    if (offlineStore != null) {
                        try {
                            //Define the resource path
                            String resourcePath = strQry;
                            ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                            request.setMode(ODataRequestParamSingle.Mode.Read);
                            request.setResourcePath(resourcePath);
                            //Send a request to read the Retailer details from the local database
                            ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                                    executeRequest(request);

                            if (response.getPayloadType() == ODataPayload.Type.Error) {
                                ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                        response.getPayload();
                                throw new OfflineODataStoreException(error.getMessage());
                                //Check if the response contains EntitySet
                            } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                                List<ODataEntity> entities = feed.getEntities();
                                if (entities.size() > 0) {
                                    pendingCount[0] = entities.size();
                                }
                            }
                        } catch (Exception e) {
                            try {
                                throw new OfflineODataStoreException(e);
                            } catch (OfflineODataStoreException e1) {
                                e1.printStackTrace();
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Log.e("Sync History Info","ANR EXCEPTION OCCURRED");
                }finally {
                    if (reentrantLock!=null&&reentrantLock.isHeldByCurrentThread())reentrantLock.unlock();
                    Log.e("Sync History Info:","UNLOCKED FINALLY");
                }

            }
        });
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        //Check if the offline oData store is initialized
        Log.d("Sync History","count"+pendingCount[0]);
        return pendingCount[0];

    }

    public static void CreateSyncHistroy(Hashtable hashtable,Context context) throws OfflineODataStoreException {
        if (isOfflineStoreOpen()) {
            try {
                //Creates the entity payload
                ODataEntity newEntity = createSyncHistroyEntity(hashtable);
                newEntity.setResourcePath(Constants.SyncHistorys, Constants.SyncHistorys);

                Log.d("SH Offline","insert RefGuid:-"+hashtable.get(Constants.RefGUID)+"--"+hashtable.get(Constants.Collection));

                OfflineRequestListener collectionListener = new OfflineRequestListener(Operation.Create.getValue(), null, Constants.SyncHistroy,context);

/*
                Map<String, String> createHeaders = new HashMap<String, String>();
                createHeaders.put(Constants.RequestID, ssoGUID32);
                createHeaders.put(Constants.RepeatabilityCreation, mStrDateTime);*/
                Map<String, String> createHeaders = new HashMap<String, String>();
                createHeaders.put("OfflineOData.RemoveAfterUpload", "true");



                ODataRequestParamSingle collectionReq = new ODataRequestParamSingleDefaultImpl();
                collectionReq.setMode(ODataRequestParamSingle.Mode.Create);
                collectionReq.setResourcePath(newEntity.getResourcePath());
                collectionReq.setPayload(newEntity);
                collectionReq.getCustomHeaders().putAll(createHeaders);
                offlineStore.scheduleRequest(collectionReq, collectionListener);

                //Send the request to create the new visit in the local database
               // offlineStore.scheduleCreateEntity(newEntity, Constants.SyncHistroy, new OfflineRequestListener(Operation.Create.getValue(), null, Constants.SyncHistroy), null);
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        //END
    }

    public static ODataEntity createSyncHistroyEntity(Hashtable hashtable) {
        ODataEntity oDataEntity = null;

        if (hashtable != null) {
            oDataEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.SyncHistorysENTITY);

            try {
                offlineStore.allocateProperties(oDataEntity, ODataStore.PropMode.Keys);
            } catch (ODataException e) {
                e.printStackTrace();
            }


            if(hashtable.get(Constants.SyncHisGuid) != null) {
                oDataEntity.getProperties().put(Constants.SyncHisGuid,
                        new ODataPropertyDefaultImpl(Constants.SyncHisGuid, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SyncHisGuid).toString())));
            }
            if(hashtable.get(Constants.RefGUID) != null) {
                oDataEntity.getProperties().put(Constants.RefGUID,
                        new ODataPropertyDefaultImpl(Constants.RefGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.RefGUID).toString())));
            }
            try {
                if(hashtable.get(Constants.Collection) != null) {
                    oDataEntity.getProperties().put(Constants.Collection,
                            new ODataPropertyDefaultImpl(Constants.Collection, hashtable.get(Constants.Collection)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.SyncApplication) != null) {
                    oDataEntity.getProperties().put(Constants.SyncApplication,
                            new ODataPropertyDefaultImpl(Constants.SyncApplication, hashtable.get(Constants.SyncApplication)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.SyncTime) != null) {
                    oDataEntity.getProperties().put(Constants.SyncTime,
                            new ODataPropertyDefaultImpl(Constants.SyncTime, hashtable.get(Constants.SyncTime)));

                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.SyncDate) != null) {
                    oDataEntity.getProperties().put(Constants.SyncDate,
                            new ODataPropertyDefaultImpl(Constants.SyncDate, SyncUtils.convertDateFormat(hashtable.get(Constants.SyncDate).toString())));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.PartnerId) != null) {
                    oDataEntity.getProperties().put(Constants.PartnerId,
                            new ODataPropertyDefaultImpl(Constants.PartnerId, hashtable.get(Constants.PartnerId)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.SyncType) != null) {
                    oDataEntity.getProperties().put(Constants.SyncType,
                            new ODataPropertyDefaultImpl(Constants.SyncType, hashtable.get(Constants.SyncType)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.PartnerType) != null) {
                    oDataEntity.getProperties().put(Constants.PartnerType,
                            new ODataPropertyDefaultImpl(Constants.PartnerType, hashtable.get(Constants.PartnerType)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.LoginId) != null) {
                    oDataEntity.getProperties().put(Constants.LoginId,
                            new ODataPropertyDefaultImpl(Constants.LoginId, hashtable.get(Constants.LoginId)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                oDataEntity.getProperties().put(Constants.APKVersion, new ODataPropertyDefaultImpl(Constants.APKVersion, BuildConfig.VERSION_NAME));
                oDataEntity.getProperties().put(Constants.APKVersionCode, new ODataPropertyDefaultImpl(Constants.APKVersionCode, String.valueOf(BuildConfig.VERSION_CODE)));

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return oDataEntity;
    }

    public static ODataEntity getSyncHistroyByCollection(String collectionName) throws OfflineODataStoreException {

        ODataEntity visitEntity = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            try {
                //Define the resource path
                String resourcePath = Constants.SyncHistorys +"?$filter="+ Constants.Collection + "'" + collectionName + "'";

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Visits from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntity oDataEntity = (ODataEntity) response.getPayload();
                    visitEntity = oDataEntity;
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return visitEntity;

    }

    public static void updateSyncHistory(Hashtable<String, String> table, UIListener uiListener,Context context) throws OfflineODataStoreException {
        ODataEntity newEntity = null;
        if (offlineStore != null) {
            try {
                //Creates the entity payload
                newEntity = UpdateSyncHistoryEntity(table);
                //Send the request to update visit in the local database
                offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.SyncHistorys,context), null);
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
            //END
        }
    }

    private static ODataEntity UpdateSyncHistoryEntity(Hashtable<String, String> hashtable) {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.SyncHistorysENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }


                newEntity.getProperties().put(Constants.SyncHisGuid,
                        new ODataPropertyDefaultImpl(Constants.SyncHisGuid, hashtable.get(Constants.SyncHisGuid)));
                newEntity.getProperties().put(Constants.Collection,
                        new ODataPropertyDefaultImpl(Constants.Collection, hashtable.get(Constants.Collection)));

                newEntity.getProperties().put(Constants.SyncDate,
                        new ODataPropertyDefaultImpl(Constants.SyncDate, UtilConstants.convertDateFormat(hashtable.get(Constants.SyncDate))));

                newEntity.getProperties().put(Constants.SyncTime,
                        new ODataPropertyDefaultImpl(Constants.SyncTime, hashtable.get(Constants.SyncTime)));

                newEntity.getProperties().put(Constants.Application,
                        new ODataPropertyDefaultImpl(Constants.Application, hashtable.get(Constants.Application)));
                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
            }

        }catch (Exception e){
            e.printStackTrace();
        }
        return newEntity;
    }

    public static ODataEntity checkCollectionIsExist(String query) throws
            OfflineODataStoreException {

        ODataEntity entity = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    entity = entities.get(0);
                    return entity;
                }
            }
        }
        return entity;
    }

    public static String getPartnerTypeID(String query) throws
            OfflineODataStoreException {
        String partnerTypeID = "";
        ODataEntity entity = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();
                for (ODataEntity dataEntity : entities){
                    properties = dataEntity.getProperties();
                    property = properties.get(Constants.PartnerTypeID);
                    partnerTypeID = (String) property.getValue();
                    return partnerTypeID;
                }
            }
        }
        return partnerTypeID;
    }

    public static String getTotalRetailerCount(String qry) throws
            OfflineODataStoreException {
        String totalRetailerCount = "0";
        ArrayList<String> alRetailer = new ArrayList<>();
        try {
            if(offlineStore != null){
                ODataProperty oDataProperty = null;
                ODataPropMap oDataPropMap = null;
                ODataResponseSingle dataResponseSingle = readSingleOdataRequest(qry);
                if(dataResponseSingle.getPayloadType() == ODataPayload.Type.EntitySet){
                    ODataEntitySet set = (ODataEntitySet) dataResponseSingle.getPayload();
                    List<ODataEntity> entities = set.getEntities();
                    for(ODataEntity entity : entities) {
                        oDataPropMap = entity.getProperties();
                       /* oDataProperty = oDataPropMap.get(Constants.CPNo);
                        String cpNO = (String) oDataProperty.getValue();
                        if(!alRetailer.contains(cpNO)){
                            alRetailer.add(cpNO);
                        }else{
                            Log.d("Not Matched Retailer","cpNo"+cpNO);

                        }*/
                        oDataProperty = oDataPropMap.get(Constants.CPGUID);
                        ODataGuid mGUIDVal = null;
                        String cpGUID = "";
                        try {
                            mGUIDVal = (ODataGuid) oDataProperty.getValue();
                            cpGUID = mGUIDVal.guidAsString36().toUpperCase();
                            if(!alRetailer.contains(cpGUID)){
                                alRetailer.add(cpGUID);
                            }else{
                                Log.d("Not Matched Retailer","cpNo"+cpGUID);
                            }
                        } catch (Exception e) {
                            cpGUID = "";
                            e.printStackTrace();
                        }

                    }
                }
            }
            if(alRetailer!=null && alRetailer.size()>0) {
                try {
                    totalRetailerCount = String.valueOf(alRetailer.size());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        return totalRetailerCount;
    }

    public static boolean getRoutePlanStatus(String qry) throws
            OfflineODataStoreException {
        boolean check = false;
        if(offlineStore != null){
            ODataProperty oDataProperty = null;
            ODataPropMap oDataPropMap = null;
            ODataResponseSingle dataResponseSingle = readSingleOdataRequest(qry);
            if(dataResponseSingle.getPayloadType() == ODataPayload.Type.EntitySet){
                ODataEntitySet set = (ODataEntitySet) dataResponseSingle.getPayload();
                List<ODataEntity> entities = set.getEntities();
                if(entities != null && entities.size()>0){
                    check = true;
                }
            }
        }
        return check;
    }

    public static ArrayList<BrandProductiveBean> getDeviceSSSoDetails(String createType, Context context, String mStrCurrentDate) {
        ArrayList<BrandProductiveBean> alBrandProductive = new ArrayList<>();
        ArrayList<BrandProductiveBean> alBrandProductiveDatavolt = new ArrayList<>();
        ArrayList<String> alBrand = new ArrayList<>();
        ArrayList<String> alItem = new ArrayList<>();
        ArrayList<String> alRetailerCount = new ArrayList<>();
        BrandProductiveBean brandProductiveBean = null;
        int alValue = 0;
        int visitCount = 0;
        String brandName = "";
        String itemName = "";
        String price = "";
        String banner = "";
        String IsfreeGoodsItem = "";
        String quantity = "";
        String UOM = "";
        String soldToCpguid = "";
        String beatguid = "";
        int quantityValue = 0;
        double netPrice = 0.0;
        int pcValue = 0;
        int bagValue = 0;
        int carValue = 0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {

                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        if(store!=null) {
                            JSONObject fetchJsonHeaderObject = new JSONObject(store);
                            String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                            if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                    && createdOn[0].equalsIgnoreCase(splitToday[0])) {
                                Hashtable<String, String> tableHdr = Constants.getSOHeaderValuesFromJsonObject(fetchJsonHeaderObject);
                                try {
                                    soldToCpguid = tableHdr.get(Constants.SoldToCPGUID);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                try {
                                    beatguid = tableHdr.get(Constants.BeatGuid);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                String itemsString = fetchJsonHeaderObject.getString(Constants.ITEM_TXT);
                                ArrayList<HashMap<String, String>> arrtable = UtilConstants.convertToArrayListMap(itemsString);
                                for (int i = 0; i < arrtable.size(); i++) {
                                    brandProductiveBean = new BrandProductiveBean();
                                    HashMap<String, String> singleRow = arrtable.get(i);
                                    try {
                                        brandName = singleRow.get(Constants.OrderMatGrpDesc);
                                        quantity = singleRow.get(Constants.Quantity);
                                        itemName = singleRow.get(Constants.MaterialDesc);
                                        price = singleRow.get(Constants.NetPrice);
                                        banner = singleRow.get(Constants.Brand);
                                        if (banner == null) {
                                            banner = "";
                                        }
                                        IsfreeGoodsItem = singleRow.get(Constants.IsfreeGoodsItem);
//                                        soldToCpguid = singleRow.get(Constants.SoldToCPGUID);
                                        UOM = singleRow.get(Constants.Uom);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    if (!IsfreeGoodsItem.equalsIgnoreCase("X")) {
                                        if (!alBrand.contains(banner)) {
                                            alItem = new ArrayList<>();
                                            alRetailerCount = new ArrayList<>();
                                            quantityValue = 0;
                                            netPrice = 0.0;
                                            pcValue = 0;
                                            bagValue = 0;
                                            carValue = 0;
                                            alBrand.add(banner);
                                            alValue = alValue + 1;
                                            if (!TextUtils.isEmpty(price)) {
                                                netPrice = netPrice + Double.parseDouble(price);
                                            }
                                            if (!TextUtils.isEmpty(quantity)) {
                                                quantityValue = quantityValue + (int) Float.parseFloat(quantity);
                                            }
                                            if (!alItem.contains(itemName)) {
                                                alItem.add(itemName);
                                            }
                                            if (!alRetailerCount.contains(soldToCpguid + ":" + beatguid)) {
                                                alRetailerCount.add(soldToCpguid + ":" + beatguid);
                                            }

                                            if (UOM.equalsIgnoreCase("pc")) {
                                                if (!TextUtils.isEmpty(quantity)) {
                                                    pcValue = pcValue + (int) Float.parseFloat(quantity);
                                                }
                                            }
                                            if (UOM.equalsIgnoreCase("bag")) {
                                                if (!TextUtils.isEmpty(quantity)) {
                                                    bagValue = bagValue + (int) Float.parseFloat(quantity);
                                                }
                                            }
                                            if (UOM.equalsIgnoreCase("car")) {
                                                if (!TextUtils.isEmpty(quantity)) {
                                                    carValue = carValue + (int) Float.parseFloat(quantity);
                                                }
                                            }

                                            brandProductiveBean.setOrderMatGrpDesc(brandName);
                                            brandProductiveBean.setQuantity(String.valueOf(quantityValue));
                                            brandProductiveBean.setMaterialItemDesc(String.valueOf(alItem.size()));
                                            brandProductiveBean.setRetailerCount(String.valueOf(alRetailerCount.size()));
                                            brandProductiveBean.setToatlPrice(String.valueOf(netPrice));
                                            brandProductiveBean.setMaterialItemList(alItem);
                                            brandProductiveBean.setRetailerCountList(alRetailerCount);
                                            brandProductiveBean.setBrandID(banner);
                                            brandProductiveBean.setPcValue(String.valueOf(pcValue));
                                            brandProductiveBean.setBagValue(String.valueOf(bagValue));
                                            brandProductiveBean.setCarValue(String.valueOf(carValue));
                                            alBrandProductive.add(brandProductiveBean);
                                        } else {
                                            int j = 0;
                                            for (BrandProductiveBean brandProductiveBean1 : alBrandProductive) {
                                                int qty = (int) Float.parseFloat(brandProductiveBean1.getQuantity());
                                                int pcVal = (int) Float.parseFloat(brandProductiveBean1.getPcValue());
                                                int bagVal = (int) Float.parseFloat(brandProductiveBean1.getBagValue());
                                                int carVal = (int) Float.parseFloat(brandProductiveBean1.getCarValue());
                                                double totlePrice = Double.parseDouble(brandProductiveBean1.getToatlPrice());
                                                ArrayList<String> alItem1 = brandProductiveBean1.getMaterialItemList();
                                                ArrayList<String> alRetailerCountList = brandProductiveBean1.getRetailerCountList();
                                                if (banner.equalsIgnoreCase(brandProductiveBean1.getBrandID())) {
                                                    if (!TextUtils.isEmpty(quantity)) {
                                                        qty = qty + (int) Float.parseFloat(quantity);
                                                    }
                                                    if (!TextUtils.isEmpty(price)) {
                                                        totlePrice = totlePrice + Double.parseDouble(price);
                                                    }
                                                    if (!alItem1.contains(itemName)) {
                                                        alItem1.add(itemName);
                                                    }
                                                    if (!alRetailerCountList.contains(soldToCpguid + ":" + beatguid)) {
                                                        alRetailerCountList.add(soldToCpguid + ":" + beatguid);
                                                    }
                                                    if (UOM.equalsIgnoreCase("pc")) {
                                                        if (!TextUtils.isEmpty(quantity)) {
                                                            pcVal = pcVal + (int) Float.parseFloat(quantity);
                                                        }
                                                    }
                                                    if (UOM.equalsIgnoreCase("bag")) {
                                                        if (!TextUtils.isEmpty(quantity)) {
                                                            bagVal = bagVal + (int) Float.parseFloat(quantity);
                                                        }
                                                    }
                                                    if (UOM.equalsIgnoreCase("car")) {
                                                        if (!TextUtils.isEmpty(quantity)) {
                                                            carVal = carVal + (int) Float.parseFloat(quantity);
                                                        }
                                                    }
                                                    brandProductiveBean.setRetailerCountList(alRetailerCountList);
                                                    brandProductiveBean1.setMaterialItemDesc(String.valueOf(alItem1.size()));
                                                    brandProductiveBean1.setRetailerCount(String.valueOf(alRetailerCountList.size()));
                                                    brandProductiveBean1.setQuantity(String.valueOf(qty));
                                                    brandProductiveBean1.setToatlPrice(String.valueOf(totlePrice));
                                                    brandProductiveBean1.setMaterialItemList(alItem1);
                                                    brandProductiveBean1.setPcValue(String.valueOf(pcVal));
                                                    brandProductiveBean1.setBagValue(String.valueOf(bagVal));
                                                    brandProductiveBean1.setCarValue(String.valueOf(carVal));
                                                    alBrandProductive.set(j, brandProductiveBean1);
                                                    break;
                                                }
                                                j++;
                                            }
                                        }
                                    }
                                }


                            } else {

                            }
                        }

                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
        return alBrandProductive;
    }

    public static ArrayList<SOCreateBean> getDeviceSOCount(String createType, Context context, String mStrCurrentDate) {

        int mDoubleDevOrderValue = 0;
        ArrayList<String> alSOCount = new ArrayList<>();
        ArrayList<SOCreateBean> alSOOrder = new ArrayList<>();
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    SOCreateBean soCreateBean = new SOCreateBean();
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                && createdOn[0].equalsIgnoreCase(splitToday[0])) {
                            try {
                                soCreateBean.setCPGUID(fetchJsonHeaderObject.getString(Constants.SoldToCPGUID));
                            } catch (Throwable e) {
                                e.printStackTrace();
                            }

                            try {
                                soCreateBean.setBeatGUID(fetchJsonHeaderObject.getString(Constants.BeatGuid));
                            } catch (Throwable e) {
                                e.printStackTrace();
                            }

                            if(!alSOCount.contains(fetchJsonHeaderObject.getString(Constants.SoldToCPGUID))){
                                alSOCount.add(fetchJsonHeaderObject.getString(Constants.SoldToCPGUID));
                                alSOOrder.add(soCreateBean);
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return alSOOrder;
    }
    public static String getDivisionsByItemGuid(String qry) throws OfflineODataStoreException {

        String division = "";
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.DMSDivision);
                    try {
                        division = (String) property.getValue();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }
        return division;
    }


    public static String getBrandsID(String brandQry) throws OfflineODataStoreException {

        String brandID = "";
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, brandQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.Brand);
                    try {
                        brandID = (String) property.getValue();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }
        return brandID;
    }

    public static String getCpTypeID(String cpTypeIDQry) throws OfflineODataStoreException {

        String CPTypeID = "";
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpTypeIDQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.CPTypeID);
                    try {
                        CPTypeID = (String) property.getValue();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }
        return CPTypeID;
    }

    public static String[] getSPGuidNameValue(String retailerQry) throws OfflineODataStoreException {
        String[] spDeatils = new String[2];
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retailerQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.SPGUID);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            spDeatils[0] = mInvoiceGUID.guidAsString36().toUpperCase();
                            //To Remove
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.FirstName);
                        try {
                            spDeatils[1] = (String) property.getValue();;
                            //To Remove
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        break;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return spDeatils;
    }

    public static String getSPName(String retailerQry) throws OfflineODataStoreException {
        String spName = "";
        String firstName = "";
        String lastName = "";
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retailerQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.SPGUID);


                        property = properties.get(Constants.FirstName);
                        try {
                            firstName = (String) property.getValue();;
                            //To Remove
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.LastName);
                        try {
                            lastName = (String) property.getValue();;
                            //To Remove
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        break;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return firstName + " " + lastName;
    }

    public static ArrayList<com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean> getRetailerBAseDmsDivision(List<ODataEntity> entities) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ArrayList<com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean> valueHelpArrayList = new ArrayList<>();
        HashSet<String> mapVal = new HashSet<>();
        com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean valueHelp;
        ODataProperty property;
        ODataPropMap properties;
        try {
            if (entities != null && !entities.isEmpty()) {

                for (ODataEntity entity : entities) {
                    valueHelp = new com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.DMSDivision);
                    valueHelp.setDMSDivisionID((String) property.getValue());
                    property = properties.get(Constants.DMSDivisionDesc);
                    valueHelp.setDmsDivsionDesc((String) property.getValue());
                    valueHelp.setDisplayData(valueHelp.getDmsDivsionDesc());
                    /*property = properties.get(Constants.CPTypeID);
                    valueHelp.setCPTypeID((String) property.getValue());
                    property = properties.get(Constants.CPGUID);
                    valueHelp.setCPGUID((String) property.getValue());
                    property = properties.get(Constants.CPNo);
                    valueHelp.setCPNo((String) property.getValue());
                    property = properties.get(Constants.SPGUID);
                    valueHelp.setSPGUID((String) property.getValue());
                    property = properties.get(Constants.SPNo);
                    valueHelp.setSPNo((String) property.getValue());
                    property = properties.get(Constants.FirstName);
                    valueHelp.setFirstName((String) property.getValue());
                    property = properties.get(Constants.CPName);
                    valueHelp.setCPName((String) property.getValue());*/
                    if (!mapVal.contains(valueHelp.getDMSDivisionID()) && !valueHelp.getDMSDivisionID().equalsIgnoreCase("")) {
                        mapVal.add(valueHelp.getDMSDivisionID());
                        valueHelpArrayList.add(valueHelp);
                    }


                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new OfflineODataStoreException(e);
        }
        if (valueHelpArrayList.size() != 1) {
            valueHelp = new com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean();
            valueHelp.setDisplayData(Constants.None);
            valueHelpArrayList.add(0, valueHelp);
        }
        return valueHelpArrayList;

    }

    public static ArrayList<String> getSaleAreaFromUsrAth(String logiQry) {
        String authOrgTypeID = "";
        String authOrgValue = "";
        ArrayList<String> saleArea = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, logiQry);
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.AuthOrgTypeID);
                    authOrgTypeID = property.getValue().toString();
                    property = properties.get(Constants.AuthOrgValue);
                    if(authOrgTypeID.equalsIgnoreCase("000013")){
                        saleArea.add(property.getValue().toString());
                    }
                }
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        return saleArea;
    }

    public static String getParentID(String logiQry) {
        String parentID = "";
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, logiQry);
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.ParentID);
                    parentID = (String) property.getValue();
                    break;
                }
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        return parentID;
    }

    public static int getInvoiceListCount(String logiQry) {
        int count=0;
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, logiQry);
            if (entities != null && !entities.isEmpty()) {
                count = entities.size();
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        return count;
    }
    public static ArrayList<com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean> getRetailerBAseDmsDivisionwithoutNone(List<ODataEntity> entities) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ArrayList<com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean> valueHelpArrayList = new ArrayList<>();
        HashSet<String> mapVal = new HashSet<>();
        com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean valueHelp;
        ODataProperty property;
        ODataPropMap properties;
        try {
            if (entities != null && !entities.isEmpty()) {

                for (ODataEntity entity : entities) {
                    valueHelp = new com.arteriatech.ss.msecsales.rspl.mbo.DMSDivisionBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.DMSDivision);
                    valueHelp.setDMSDivisionID((String) property.getValue());
                    property = properties.get(Constants.DMSDivisionDesc);
                    valueHelp.setDmsDivsionDesc((String) property.getValue());
                    valueHelp.setDisplayData(valueHelp.getDmsDivsionDesc());
                    if (!mapVal.contains(valueHelp.getDMSDivisionID()) && !valueHelp.getDMSDivisionID().equalsIgnoreCase("")) {
                        mapVal.add(valueHelp.getDMSDivisionID());
                        valueHelpArrayList.add(valueHelp);
                    }


                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new OfflineODataStoreException(e);
        }
        return valueHelpArrayList;

    }


    public static SOCreateBean getCPGuid(String cpGuidQry) throws OfflineODataStoreException {
        String cpGuid = "";
        SOCreateBean soCreateBean = new SOCreateBean();
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(cpGuidQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        soCreateBean = new SOCreateBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.SoldToCPGUID);
                        ODataGuid guid = (ODataGuid) property.getValue();
                        cpGuid = guid.guidAsString36().toUpperCase();
                        soCreateBean.setCPGUID36(cpGuid);
                        property = properties.get(Constants.BeatGuid);
                        ODataGuid beatGuid = (ODataGuid) property.getValue();
                        String beatguid = beatGuid.guidAsString36().toUpperCase();
                        soCreateBean.setBeatGUID(beatguid);
                        break;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return soCreateBean;
    }

    public static boolean getSyncStatus(String syncType) throws OfflineODataStoreException{

        String qrySyncDoneorNot = Constants.SyncHistroy + "?$filter=" + Constants.SyncDate + " eq datetime'"+UtilConstants.getNewDate()+"' and "+Constants.PartnerId+ " eq '"+Constants.getSPGUID(Constants.SPGUID).replaceAll("-","")+"' and "+Constants.SyncType + " eq '"+syncType+"'";
        try {
            if (offlineStore != null) {
                try {
                    //Define the resource path
                    String resourcePath = qrySyncDoneorNot;
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(ODataRequestParamSingle.Mode.Read);
                    request.setResourcePath(resourcePath);
                    //Send a request to read the Retailer details from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);

                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        if (entities.size() > 0) {
                            return true;
                        }
                    }
                } catch (Exception e) {
                    try {
                        throw new OfflineODataStoreException(e);
                    } catch (OfflineODataStoreException e1) {
                        e1.printStackTrace();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Log.e("Sync History Info","ANR EXCEPTION OCCURRED");
        }
        return false;
    }

    public static String getLoginID(String logiQry) {
        String loginID = "";
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, logiQry);
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.LoginID);
                    loginID = property.getValue().toString();
                    break;
                }
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }

        return loginID;
    }
    public static ArrayList<ConfigTypeValues> getConfigTypeValuesDoc(String query) throws OfflineODataStoreException {
        ArrayList<ConfigTypeValues> configTypesetTypesBeanArrayList = new ArrayList<>();
        ConfigTypeValues configTypesetTypesBean;
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        configTypesetTypesBean = new ConfigTypeValues();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        if (property != null)
                            configTypesetTypesBean.setType((String) property.getValue());

                        property = properties.get(Constants.Typesname);
                        if (property != null)
                            configTypesetTypesBean.setTypeName((String) property.getValue());

                        property = properties.get(Constants.TypesValue);
                        if (property != null)
                            configTypesetTypesBean.setTypeValue((String) property.getValue());

                        property = properties.get(Constants.Typeset);
                        if (property != null)
                            configTypesetTypesBean.setTypeset((String) property.getValue());

                        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configTypesetTypesBeanArrayList;
    }

    public static BeatOpeningSummaryBean getBeatOpeningDetails(String retListQry) throws OfflineODataStoreException {
        BeatOpeningSummaryBean beatOpeningSummaryBean = null;
        ODataProperty oDataProperty = null;
        ODataPropMap properties=null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        beatOpeningSummaryBean = new BeatOpeningSummaryBean();
                        properties = entity.getProperties();

                        oDataProperty = properties.get(Constants.VisitDate);
                        if (oDataProperty != null) {
                            String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) oDataProperty.getValue());
                            beatOpeningSummaryBean.setVisitDate(convertDateFormat);
                        }
                        oDataProperty = properties.get(Constants.SPGUID);
                        if(oDataProperty!=null) {
                            ODataGuid spGUIDGuid = (ODataGuid) oDataProperty.getValue();
                            if(spGUIDGuid!=null){
                                beatOpeningSummaryBean.setSPGUID(spGUIDGuid.guidAsString36());
                            }
                        }
                        oDataProperty = properties.get(Constants.RschGUID);
                        if(oDataProperty!=null) {
                            ODataGuid rshcGuid = (ODataGuid) oDataProperty.getValue();
                            if(rshcGuid!=null){
                                beatOpeningSummaryBean.setRschGUID(rshcGuid.guidAsString36());
                            }
                        }
                        oDataProperty = properties.get(Constants.VisitSummaryGUID);
                        if(oDataProperty!=null) {
                            ODataGuid visitSummaryGUID = (ODataGuid) oDataProperty.getValue();
                            if(visitSummaryGUID!=null){
                                beatOpeningSummaryBean.setVisitSummaryGUID(visitSummaryGUID.guidAsString36());
                            }
                        }
                        oDataProperty = properties.get(Constants.NonProdNoOrder);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setNonProdNoOrder((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.NonProductive);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setNonProductive((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.ParntName);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setParntName((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.ParntNo);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setParntNo((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.ParntCPTypDesc);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setParntCPTypDesc((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.ParntCPType);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setParntCPType((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.Productive);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setProductive((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.RouteDesc);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setRouteDesc((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.RoutID);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setRoutID((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.SpName);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setSpName((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.SpNo);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setSpNo((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.TotalRetailers);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setTotalRetailers((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.VisitedRetailers);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setVisitedRetailers((String) oDataProperty.getValue());
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        /*Collections.sort(retailerList, new Comparator<RetailerBean>() {
            public int compare(RetailerBean one, RetailerBean other) {
                return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
            }
        });*/
        if(beatOpeningSummaryBean == null) beatOpeningSummaryBean = new BeatOpeningSummaryBean();
        return beatOpeningSummaryBean;

    }

    public static BeatOpeningSummaryBean getVisitListDetails(String retListQry) throws OfflineODataStoreException {
        BeatOpeningSummaryBean beatOpeningSummaryBean = new BeatOpeningSummaryBean();
        ODataProperty oDataProperty = null;
        ODataPropMap properties=null;
        int sumBeatCount = 0;
        ArrayList<String> beatlst = new ArrayList<>();
        int sumVisitCount = 0;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        /*oDataProperty = properties.get(Constants.VisitDate);
                        if (oDataProperty != null) {
                            String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) oDataProperty.getValue());
                            beatOpeningSummaryBean.setVisitDate(convertDateFormat);
                        }
                        oDataProperty = properties.get(Constants.SPGUID);
                        if(oDataProperty!=null) {
                            ODataGuid spGUIDGuid = (ODataGuid) oDataProperty.getValue();
                            if(spGUIDGuid!=null){
                                beatOpeningSummaryBean.setSPGUID(spGUIDGuid.guidAsString36());
                            }
                        }
                        oDataProperty = properties.get(Constants.RschGUID);
                        if(oDataProperty!=null) {
                            ODataGuid rshcGuid = (ODataGuid) oDataProperty.getValue();
                            if(rshcGuid!=null){
                                beatOpeningSummaryBean.setRschGUID(rshcGuid.guidAsString36());
                            }
                        }
                        oDataProperty = properties.get(Constants.VisitSummaryGUID);
                        if(oDataProperty!=null) {
                            ODataGuid visitSummaryGUID = (ODataGuid) oDataProperty.getValue();
                            if(visitSummaryGUID!=null){
                                beatOpeningSummaryBean.setVisitSummaryGUID(visitSummaryGUID.guidAsString36());
                            }
                        }
                        oDataProperty = properties.get(Constants.NonProdNoOrder);
                        if(oDataProperty!=null) {
                                beatOpeningSummaryBean.setNonProdNoOrder((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.NonProductive);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setNonProductive((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.ParntName);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setParntName((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.ParntNo);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setParntNo((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.ParntCPTypDesc);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setParntCPTypDesc((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.ParntCPType);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setParntCPType((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.Productive);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setProductive((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.RouteDesc);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setRouteDesc((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.RoutID);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setRoutID((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.SpName);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setSpName((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.SpNo);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setSpNo((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.TotalRetailers);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setTotalRetailers((String) oDataProperty.getValue());
                        }*/
                        String visitRetailer = "";
                        oDataProperty = properties.get(Constants.VisitedRetailersMTD);
                        if(oDataProperty!=null) {
                            visitRetailer = (String) oDataProperty.getValue();
                        }
                        if(!TextUtils.isEmpty(visitRetailer)){
                            sumVisitCount = sumVisitCount + Integer.parseInt(visitRetailer);
                        }
                        oDataProperty = properties.get(Constants.RschGUID);
                        if(oDataProperty!=null) {
                            ODataGuid rshcGuid = (ODataGuid) oDataProperty.getValue();
                            if(rshcGuid!=null){
                                beatlst.add(rshcGuid.guidAsString36().toLowerCase());
                            }
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        beatOpeningSummaryBean.setBeatList(beatlst);
        beatOpeningSummaryBean.setVisitedRetailers(""+sumVisitCount);
        beatOpeningSummaryBean.setVisitedBeats(""+beatlst.size());
        /*Collections.sort(retailerList, new Comparator<RetailerBean>() {
            public int compare(RetailerBean one, RetailerBean other) {
                return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
            }
        });*/
        if(beatOpeningSummaryBean == null) beatOpeningSummaryBean = new BeatOpeningSummaryBean();
        return beatOpeningSummaryBean;

    }
    public static ArrayList<RoutePlanBean> getTotalBeatList(String qry) throws OfflineODataStoreException {

        ArrayList<RoutePlanBean> retailerList = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        RoutePlanBean routePlanBean = new RoutePlanBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.RouteSchGUID);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();
                        routePlanBean.setRschGuid(RschGuid.guidAsString36());
                        property = properties.get(Constants.CPGUID);
                        routePlanBean.setCPGUID((String) property.getValue());
                       /* property = properties.get(Constants.CPGUID);
                        routePlanBean.setCPGUID((String) property.getValue());

                        property = properties.get(Constants.RoutId);
                        routePlanBean.setRoutId((String) property.getValue());

                        property = properties.get(Constants.SalesPersonID);
                        ODataGuid salePersonGuid = null;
                        salePersonGuid = (ODataGuid) property.getValue();
                        routePlanBean.setSalesPersonID(salePersonGuid.guidAsString36());

                        property = properties.get(Constants.SalesPersonName);
                        routePlanBean.setSalesPersonName((String) property.getValue());*/

                        retailerList.add(routePlanBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return retailerList;
    }

    public static ArrayList<BeatOpeningSummaryBean> getVisitSummaryDetails(String retListQry) throws OfflineODataStoreException {
        BeatOpeningSummaryBean beatOpeningSummaryBean = null;
        ODataProperty oDataProperty = null;
        ODataPropMap properties=null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        beatOpeningSummaryBean = new BeatOpeningSummaryBean();
                        properties = entity.getProperties();

                        oDataProperty = properties.get(Constants.VisitDate);
                        if (oDataProperty != null) {
                            String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) oDataProperty.getValue());
                            beatOpeningSummaryBean.setVisitDate(convertDateFormat);
                        }
                        oDataProperty = properties.get(Constants.SPGUID);
                        if(oDataProperty!=null) {
                            ODataGuid spGUIDGuid = (ODataGuid) oDataProperty.getValue();
                            if(spGUIDGuid!=null){
                                beatOpeningSummaryBean.setSPGUID(spGUIDGuid.guidAsString36());
                            }
                        }
                        oDataProperty = properties.get(Constants.RschGUID);
                        if(oDataProperty!=null) {
                            ODataGuid rshcGuid = (ODataGuid) oDataProperty.getValue();
                            if(rshcGuid!=null){
                                beatOpeningSummaryBean.setRschGUID(rshcGuid.guidAsString36());
                            }
                        }
                        oDataProperty = properties.get(Constants.VisitSummaryGUID);
                        if(oDataProperty!=null) {
                            ODataGuid visitSummaryGUID = (ODataGuid) oDataProperty.getValue();
                            if(visitSummaryGUID!=null){
                                beatOpeningSummaryBean.setVisitSummaryGUID(visitSummaryGUID.guidAsString36());
                            }
                        }
                        oDataProperty = properties.get(Constants.NonProdNoOrder);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setNonProdNoOrder((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.NonProductive);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setNonProductive((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.ParntName);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setParntName((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.ParntNo);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setParntNo((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.ParntCPTypDesc);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setParntCPTypDesc((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.ParntCPType);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setParntCPType((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.Productive);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setProductive((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.RouteDesc);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setRouteDesc((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.RoutID);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setRoutID((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.SpName);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setSpName((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.SpNo);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setSpNo((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.TotalRetailers);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setTotalRetailers((String) oDataProperty.getValue());
                        }
                        oDataProperty = properties.get(Constants.VisitedRetailers);
                        if(oDataProperty!=null) {
                            beatOpeningSummaryBean.setVisitedRetailers((String) oDataProperty.getValue());
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        /*Collections.sort(retailerList, new Comparator<RetailerBean>() {
            public int compare(RetailerBean one, RetailerBean other) {
                return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
            }
        });*/
        if(beatOpeningSummaryBean == null) beatOpeningSummaryBean = new BeatOpeningSummaryBean();
        return null;

    }

    public static ArrayList<RetailerBean> getTotalRetailerList(String strQry) throws OfflineODataStoreException {

        ODataEntity retailerEntity = null;
        ArrayList<String> cpGuidStrList = new ArrayList<>();
        ArrayList<RetailerBean> RetailerList = new ArrayList<>();
        RetailerBean retailerBean = null;
        List<ODataEntity> entities = null;
        ODataPropMap properties;
        ODataProperty oDataProperty;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntity oDataEntity = (ODataEntity) response.getPayload();
                    retailerEntity = oDataEntity;
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    entities = feed.getEntities();
                    for(ODataEntity oDataEntity : entities){
                        retailerBean = new RetailerBean();
                        properties = oDataEntity.getProperties();
                        oDataProperty = properties.get(Constants.CPGUID);
                        ODataGuid mCpGuid = null;
                        try {
                            mCpGuid = (ODataGuid) oDataProperty.getValue();
                            String cpguid  = (mCpGuid.guidAsString36().toUpperCase());
                            retailerBean.setCPGUID(cpguid);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        oDataProperty = properties.get(Constants.RouteGUID);
                        ODataGuid routeGuid = null;
                        try {
                            routeGuid = (ODataGuid) oDataProperty.getValue();
                            String cpguid  = (routeGuid.guidAsString36().toUpperCase());
                            retailerBean.setRouteGuid36(cpguid);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        oDataProperty = properties.get(Constants.ParentID);
                        try {
                            retailerBean.setParentID((String) oDataProperty.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                       /*         oDataProperty = properties.get(Constants.VisitCPGUID);
                        try {
                            retailerBean.setCPGUID((String) oDataProperty.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }*/
                        if(!cpGuidStrList.contains(retailerBean.getCPGUID())){
//                            VisitSummaryReportPresentImpl.beatDetailMap.put(retailerBean.getRouteGuid36().toLowerCase(),retailerBean.getParentID());
                            cpGuidStrList.add(retailerBean.getCPGUID());
                            RetailerList.add(retailerBean);
                        }
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return RetailerList;
    }

    public static  ArrayList<BeatOpeningSummaryBean> getTodayDateVisitDetails(String logiQry) {
        ArrayList<BeatOpeningSummaryBean> saleArea = new ArrayList<>();
        ArrayList<String> srtList = new ArrayList<>();
        HashMap<String, BeatOpeningSummaryBean> distMap = new HashMap<>();
        BeatOpeningSummaryBean beatOpeningSummaryBean = null;
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, logiQry);
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    beatOpeningSummaryBean = new BeatOpeningSummaryBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.BeatGUID);
                    ODataGuid beatGUID = (ODataGuid) property.getValue();
                    try {
                        beatOpeningSummaryBean.setBeatGUID(beatGUID.guidAsString36());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    srtList = new ArrayList<>();
                    if (distMap.containsKey(beatOpeningSummaryBean.getBeatGUID())) {

                        property = properties.get(Constants.CPGUID);
                        beatOpeningSummaryBean = distMap.get(beatOpeningSummaryBean.getBeatGUID());
                        String count = beatOpeningSummaryBean.getVisitedRetailers();
                        int countRet = 0;
                        if(!TextUtils.isEmpty(count)) {
                            countRet = countRet + Integer.parseInt(count);
                        }

                        ArrayList<String> tempLit = beatOpeningSummaryBean.getBeatList();
                        if(!tempLit.contains((String) property.getValue())) {
                            tempLit.add((String) property.getValue());
                            countRet = countRet+1;
                        }
                        beatOpeningSummaryBean.setVisitedRetailers(""+countRet);
                        beatOpeningSummaryBean.setBeatList(tempLit);


                        distMap.put(beatOpeningSummaryBean.getBeatGUID(), beatOpeningSummaryBean);
                        // dmsbean.setDMSDivisionQuery((String) property.getValue());
                    } else {
                        int countRet = 0;
                        beatOpeningSummaryBean.setBeatGUID(beatOpeningSummaryBean.getBeatGUID());
                        property = properties.get(Constants.CPGUID);
                        if(!srtList.contains((String) property.getValue())) {
                            countRet = countRet+1;
                            srtList.add((String) property.getValue());
                        }
                        beatOpeningSummaryBean.setBeatList(srtList);
                        beatOpeningSummaryBean.setVisitedRetailers(""+countRet);

                        distMap.put(beatOpeningSummaryBean.getBeatGUID(), beatOpeningSummaryBean);
                    }


                }

                }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        Set keys = distMap.keySet();
        Iterator itr = keys.iterator();

        String key;
        BeatOpeningSummaryBean value;
        while (itr.hasNext()) {
            key = (String) itr.next();
            value = (BeatOpeningSummaryBean) distMap.get(key);
            saleArea.add(value);
        }
        return saleArea;
    }

    public static ArrayList<RetailerBean> getRetailerApprovalListJSON(JSONArray jsonArray) {
        ArrayList<RetailerBean> retailerList = new ArrayList<>();
        ArrayList<RetailerBean> finalRetailerList = new ArrayList<>();
        ArrayList<RetailerBean> otherRetailerList = new ArrayList<>();
        RetailerBean retBean;
        String lastRoutId = "";
        RetailerBean rb1 = null;
        try {
            for (int i=0;i<jsonArray.length();i++) {
                JSONObject jsonObject = jsonArray.getJSONObject(i);

                retBean = new RetailerBean(jsonObject.optString(Constants.EntityKeyID));
                retBean.setCPNo(jsonObject.optString(Constants.EntityKeyID));
                retBean.setRetailerName(jsonObject.optString(Constants.EntityKeyDesc));
                try {
                    retBean.setCPGUID(jsonObject.optString(Constants.EntityKey).toUpperCase());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                retBean.setMobileNumber(jsonObject.optString(Constants.EntityAttribute1));

                retBean.setInstanceId(jsonObject.optString(Constants.InstanceID));


                //            property = properties.get(Constants.Address1);
                //            retBean.setAddress1((String) property.getValue());
                //            property = properties.get(Constants.Address2);
                //            retBean.setAddress2((String) property.getValue());
                //            property = properties.get(Constants.Address3);
                //            retBean.setAddress3((String) property.getValue());
                //            property = properties.get(Constants.TownDesc);
                //            if (property != null)
                //                retBean.setTownDesc((String) property.getValue());

                //            property = properties.get(Constants.DistrictDesc);
                //            if (property != null)
                //                retBean.setDistrictDesc((String) property.getValue());
                //
                //            property = properties.get(Constants.Landmark);
                //            if (property != null)
                //                retBean.setLandMark((String) property.getValue());

                //            property = properties.get(Constants.Latitude);
                //            if (property != null) {
                //                BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property
                //
                //                if (mDecimalLatitude != null) {
                //                    retBean.setLatVal(mDecimalLatitude.doubleValue());
                //                } else {
                //                    retBean.setLatVal(0.0);
                //                }
                //            }

                //            property = properties.get(Constants.Longitude);
                //            if (property != null) {
                //                BigDecimal mDecimalLongitude = (BigDecimal) property.getValue();  //---------> Decimal property
                //
                //                if (mDecimalLongitude != null) {
                //                    retBean.setLongVal(mDecimalLongitude.doubleValue());
                //                } else {
                //                    retBean.setLongVal(0.0);
                //                }
                //            }

                //            property = properties.get(Constants.CityDesc);
                //            if (property != null)
                //                retBean.setCity((String) property.getValue());
                //
                //            property = properties.get(Constants.PostalCode);
                //            if (property != null)
                //                retBean.setPostalCode((String) property.getValue());
                //
                //            property = properties.get(Constants.MobileNo1);
                //            retBean.setMobileNumber((String) property.getValue());
                //
                //            property = properties.get(Constants.CPUID);
                //            retBean.setUID((String) property.getValue());

                //            property = properties.get(Constants.DOB);
                //            if (property != null)
                //                retBean.setCustDOB(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));
                //
                //            property = properties.get(Constants.Anniversary);
                //            if (property != null)
                //                retBean.setAnniversary(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));
                //
                //            property = properties.get(Constants.OwnerName);
                //            if (property != null)
                //                retBean.setOwnerName((String) property.getValue());
                //            property = properties.get(Constants.Group3Desc);
                //            if (property != null)
                //                retBean.setGroup3Desc((String) property.getValue());

                // retBean.setEditResourceURL(entity.getEditResourcePath());
                //    retBean.setIsAddressEnabled(false);


                otherRetailerList.add(retBean);
                /*else if (!retBean.getRouteID().equalsIgnoreCase(lastRoutId)) {

                    if (rb1 != null) {
                        retailerList.add(rb1);
                    }
                    rb1 = new RetailerBean();
                    property = properties.get(Constants.RouteID);
                    rb1.setRouteID((String) property.getValue());
                    rb1.setTitle(true);
                    property = properties.get(Constants.RouteDesc);
                    rb1.setRouteDesc((String) property.getValue());
                    ArrayList<RetailerBean> tempRetailerList1 = new ArrayList<>();
                    tempRetailerList1.add(retBean);
                    rb1.setItemList(tempRetailerList1);
                    lastRoutId = rb1.getRouteID();
                   *//* if (!tempRetailerList.isEmpty()) {
                        Collections.sort(tempRetailerList, new Comparator<RetailerBean>() {
                            public int compare(RetailerBean one, RetailerBean other) {
                                return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
                            }
                        });
                        retailerList.addAll(tempRetailerList);
                        tempRetailerList.clear();
                    }

                    retailerList.add(rb1);
                    tempRetailerList.add(retBean);*//*
                }
                else {
                    if (rb1 != null) {
                        ArrayList<RetailerBean> tempRetailerList1 = rb1.getItemList();
                        tempRetailerList1.add(retBean);
                        rb1.setItemList(tempRetailerList1);
                    }
    //                tempRetailerList.add(retBean);
                }*/
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        if (rb1 != null) {
            retailerList.add(rb1);
        }
        Collections.sort(retailerList, new Comparator<RetailerBean>() {
            public int compare(RetailerBean one, RetailerBean other) {
                return one.getRouteDesc().toLowerCase().compareTo(other.getRouteDesc().toLowerCase());
            }
        });

        for (RetailerBean retailerBean : retailerList) {
            ArrayList<RetailerBean> tempArr = retailerBean.getItemList();
            Collections.sort(tempArr, new Comparator<RetailerBean>() {
                public int compare(RetailerBean one, RetailerBean other) {
                    return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
                }
            });
            retailerBean.setItemList(tempArr);
            retailerBean.setRetailerCount(String.valueOf(tempArr.size()));
//            finalRetailerList.add(retailerBean);
//            finalRetailerList.addAll(tempArr);
        }
        /*if (!tempRetailerList.isEmpty()) {
            Collections.sort(tempRetailerList, new Comparator<RetailerBean>() {
                public int compare(RetailerBean one, RetailerBean other) {
                    return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
                }
            });
            retailerList.addAll(tempRetailerList);
            tempRetailerList.clear();
        }*/
        if (!otherRetailerList.isEmpty()) {
            rb1 = new RetailerBean();
            rb1.setRouteID("");
            rb1.setTitle(true);
            rb1.setRouteDesc("");
            rb1.setRetailerCount(String.valueOf(otherRetailerList.size()));


            Collections.sort(otherRetailerList, new Comparator<RetailerBean>() {
                public int compare(RetailerBean one, RetailerBean other) {
                    return one.getRetailerName().toLowerCase().compareTo(other.getRetailerName().toLowerCase());
                }
            });
            rb1.setItemList(otherRetailerList);
            retailerList.add(rb1);
//            finalRetailerList.addAll(otherRetailerList);
        }
        return retailerList;
    }
}
